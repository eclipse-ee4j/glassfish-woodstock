<?xml version="1.0"?>
<!--

    Copyright (c) 2007, 2019 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<taglib>
    
    <tag>
        <name>addRemove</name>

        <description><![CDATA[
 <p>Use the <code>webuijsf:addRemove</code> tag to display an addRemove component in the rendered 
 HTML page. The addRemove component can be used to construct a list and determine 
 the order of the items in the list. List items are selected from another list and 
 moved to the list that is being constructed.</p>
 <p>
 The addRemove component presents all the items that can be included in the list, 
 and does not permit users to add their own list items. Items are shifted from 
 one list to the other, and can be moved up and down in the list until the user 
 is satisfied with the list of selected items. </p>
 <p>
 Another component, the editableList, also allows users to manipulate lists. 
 However, the editableList is designed to allow users to provide their own list 
 items, and does not allow users to change the order of the items after being 
 added to the list.  </p>
 <h3>HTML Elements and Layout</h3>
 <p>
 The addRemove component renders two listboxes, one for available options and one for
 selected options. Between the lists are buttons that are used to move
 the options between the lists, and optionally to order the selected options. </p>
 <p>
 The addRemove component is laid out with a horizontal layout by
 default, as shown in the <a href="#horizontal">Horizontal layout</a> diagram.
 The component is rendered in a vertical layout, as shown in the <a
  href="#vertical">Vertical layout</a> diagram, if you set the <code>webuijsf:addRemove</code> 
 tag's <code>vertical</code> attribute to true. In both diagrams, the
 supported facets are shown in light blue. Non-facet areas
 are gray. The facets are described in <a href="#facets">Facets</a> section.</p>
 <h4><a name="horizontal"></a>Horizontal layout</h4>
 <p>    
 In horizontal layout, the component label (or header) is displayed next to the
 component by default. The <code>header</code> facet shows the location of the 
 component label in the diagram. The header is displayed above the component when 
 the <code>webuijsf:addRemove</code> tag's <code>labelOnTop</code> attribute is
 set to true.</p>
 <style type="text/css">
 table.AddRmvBtnTbl .Btn1 {width:100%}
 table.AddRmvBtnTbl .Btn1Hov {width:100%}
 table.AddRmvBtnTbl .Btn1Dis {width:100%}
 table.AddRmvBtnTbl .Btn2 {width:100%}
 table.AddRmvBtnTbl .Btn2Hov {width:100%}
 table.AddRmvBtnTbl .Btn2Dis {width:100%}
 .AddRmvHrzWin, .AddRmvHrzBwn {margin-top:3px}
 .AddRmvHrzDiv {float:left; display:inline-table; margin:3px}  
 .AddRmvHrzLst {display:inline-table; margin:3px}  
 select {margin:3px}  
 .spacer {margin:3px}  
 </style> 
 <div id="addremove1:list_enclosing">
 <span class="AddRmvHrzDiv_sun4">
 <span style="background:lightblue">header</span>
 </span>
 <span class="AddRmvHrzDiv_sun4">&nbsp;</span>
 <div class="AddRmvHrzDiv_sun4">
 <span style="background:lightblue">availableLabel</span>
 <br />
 <select style="background:lightgray" size="12">
 <option>List of available items</option> 
 </select>
 </div>
 <div class="AddRmvHrzDiv_sun4">
 <span>&nbsp;</span>
 <br />
 <div style="padding-left:10;padding-right:10">
 <table class="AddRmvBtnTbl_sun4">
 <tr>
 <td align="center" width="125px">
 <span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
 <div class="AddRmvHrzWin_sun4">
 <span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addAllButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
 </div>
 <div class="AddRmvHrzBwn_sun4">
 <span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
 </div>
 <div class="AddRmvHrzBwn_sun4">
 <span style="background:lightblue">&nbsp;&nbsp;&nbsp;removeAllButton&nbsp;&nbsp;</span>
 </div>
 <div class="AddRmvHrzBwn_sun4">
 <span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;moveUpButton&nbsp;&nbsp;&nbsp;&nbsp;</span>
 </div>
 <div class="AddRmvHrzBwn_sun4">
 <span style="background:lightblue">&nbsp;&nbsp;moveDownButton&nbsp;&nbsp;</span>
 </div>
 </td>
 </tr>
 </table>
 </div>
 </div>
 <div class="AddRmvHrzLst_sun4">
 <span style="background:lightblue">selectedLabel</span>
 <br />
 <select style="background:lightgray" size="12">
 <option>List of selected items</option> 
 </select>
 </div>
 </div> 
 <span>&nbsp;</span> 
 <div> 
     <span style="background:lightblue">
       footer
     </span> 
 </div> 
 <hr style="height: 2px; margin-left: 0px; margin-right: auto; width: 100%;">
 <h4><a name="vertical"></a>Vertical layout</h4>
 In vertical layout, the component label (header) is always displayed above the 
 component.
 <br>
 <div id="addremove1:list_enclosing">
 <div class="spacer_sun4">
 <span style="background:lightblue">header</span>
 </div>
 <div class="spacer_sun4">
 <span style="background:lightblue">availableLabel</span>
 <br />
 <select style="background:lightgray" size="12">
 <option>List of available items</option> 
 </select>
 </div>
 <div class="spacer_sun4"> 
 <span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;addButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
 <span>&nbsp; 
 <span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 addAllButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
 <span>&nbsp; 
 <span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 removeButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
 <span>&nbsp; 
 <span style="background:lightblue">&nbsp;&nbsp;&nbsp;
 removeAllButton&nbsp;&nbsp;</span>
 <div class="spacer_sun4">
 <span style="background:lightblue">selectedLabel</span>
 <br />
 <select style="background:lightgray" size="12">
 <option>List of selected items</option> 
 </select>
 </div>
 <div class="spacer_sun4"> 
 <span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;
 moveUpButton&nbsp;&nbsp;&nbsp;&nbsp;</span>
 <span>&nbsp;</span> 
 <span style="background:lightblue">&nbsp;&nbsp;
 moveDownButton&nbsp;&nbsp;</span>
 </div>
 </div> 
 <div> 
     <span style="background:lightblue">
       footer
     </span> 
 </div> 
 <hr style="height: 2px; margin-left: 0px; margin-right: auto; width: 100%;"></div>
 <h3>Configuring the <code>webuijsf:addRemove</code> Tag</h3>
 <p>Use the <code>items</code> attribute to associate the component with an array, 
 collection, or map of <code>com.sun.webui.jsf.model.Option.</code> The contents of the 
 <code>items</code> attribute are used for the items in the available items list.</p>
 <p>Use the <code>selected</code> attribute to associate the component with a model 
 object that represents the selected items. The model object must be an array of 
 objects, whose values must be represented by the values on the 
 <code>com.sun.webui.jsf.model.Option</code>.
 </p>
 <p>The <code>label</code> attribute can be used to specify a header label for the 
 addRemove component. The <code>labelOnTop</code> attribute can be used to display the 
 label above the lists. By default the header label is displayed to the left of the 
 list of available items. You can use the <code>header</code> facet to specify a custom 
 component for the header label. The <code>labelOnTop</code> attribute also affects
 the <code>header</code> facet.</p>
 <p>The <code>availableItemsLabel</code> attribute can be used to specify the label text
 that is displayed above the list of available items. The <code>selectedItemsLabel</code>
 attribute can be used to specify the label text that is displayed above the list of
 items that are selected. These labels are always displayed above the lists, regardless
 of the value of the <code>labelOnTop</code> attribute.</p>
 <p>By default, only the Add and Remove buttons are displayed. You can use the
 <code>moveButtons</code> attribute to render the Move Up and Move Down buttons, 
 to enable users to specify the order of selected list items by moving them up or 
 down in the list. You can use the <code>selectAll</code> attribute to render the 
 Add All and Remove All buttons to enable users to quickly move all items from 
 one list to the other list. In addition, any of the buttons can be replaced
 with a facet, as described in <a href="#facets">Facets</a>.</p>
 <p>You can enable users to add available list items to the selected 
 list more than once by setting the <code>duplicateSelections</code> attribute.
 When this attribute is true, items remain displayed in the available
 items list after they have been added to the selected items list. The default
 behavior is to remove an item from one list when it is added to the other list.
 </p>  
 <p>The <code>sorted</code> attribute can be specified to automatically 
 alphabetize items in the lists. 
 <h3><a name="facets"></a>Facets</h3>
 <p>The <code>webuijsf:addRemove</code> tag supports the facets in the following table. 
 These facets enable you to customize the layout of the component.</p>
 <table style="width: 100%;" border="1" cellpadding="2"
  cellspacing="2">
   <tbody>
     <tr>
       <td style="vertical-align: top;"><code>addButton</code></td>
       <td style="vertical-align: top;">Use the <code>addButton</code> facet 
       to replace the standard Add
 button. When you use this facet, the id attribute of the facet component
 should be set to the <code>webuijsf:addRemove</code> tag's id attribute with <code>_addButton</code>
 appended to the id. For example, if the <code>webuijsf:addRemove</code> id is <code>ar1</code>,
 the facet component's id should be <code>ar1_addButton</code>. <br>
       <br>
 If you want to use the JavaScript function associated with the default button, use the <code>
 add()</code> function. See <a href="#JS">Client-side JavaScript Functions</a> 
 below for details.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>removeButton</code></td>
       <td style="vertical-align: top;">Use the <code>removeButton</code> facet 
       to replace the standard Remove 
       button. When you use this facet, the id attribute of the facet component 
       should be set to the <code>webuijsf:addRemove</code> tag's id attribute with 
       <code>_removeButton</code> appended to the id. For example, if
       the <code>webuijsf:addRemove</code> id is <code>ar1</code>, the facet
       component's id should be <code>ar1_removeButton</code>. <br>
       If you want to use the JavaScript function associated with the 
       default button, use the <code>remove()</code> function. See 
       <a href="#JS">Client-side JavaScript Functions</a> below for details.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>addAllButton</code></td>
       <td style="vertical-align: top;">Use the <code>addAllButton</code>facet to replace the standard Add
 All button. When you use this facet, the id
 attribute of the facet component should be set to
 the <code>webuijsf:addRemove</code> tag's id attribute with <code>_addAllButton</code>
 appended to the id. For example, if
 the <code>webuijsf:addRemove</code> id is <code>ar1</code>,
 the facet component's id should be <code>ar1_addAllButton</code>. <br>
       <br>
 If you want to use
 the JavaScript function associated with the default button, use the <code>
 addAll()</code> function. See <a href="#JS">Client-side JavaScript Functions</a> 
 below for details.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"> <code>removeAllButton</code></td>
       <td style="vertical-align: top;">Use the <code>removeAllButton</code>facet 
       to replace the standard
 Remove All button. When you use this facet, the id
 attribute of the facet component should be set to
 the <code>webuijsf:addRemove</code> tag's id attribute with <code>_removeAllButton</code>
 appended to the id. For example, if the <code>webuijsf:addRemove</code> id is <code>ar1</code>,
 the facet component's id should be <code>ar1_removeAllButton</code>.
       <br>
       <br>
 If you want to use the
 JavaScript function associated with the default button, use the 
 <code>removeAll()</code> function. See <a href="#JS">Client-side
 JavaScript Functions</a> below for details.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>moveUpButton</code></td>
       <td style="vertical-align: top;">Use the <code>moveUpButton</code>facet 
       to replace the standard Move Up button. When you use this facet, the id
       attribute of the facet component should be set to
       the <code>webuijsf:addRemove</code> tag's id attribute with <code>_moveUpButton</code>
       appended to the id. For example, if
       the <code>webuijsf:addRemove</code> id is <code>ar1</code>,
       the facet component's id should be <code>ar1_moveUpButton</code>. <br>
       <br>
       If you want to use the
       JavaScript function associated with the default button, use the <code>
       moveUp()</code> function. See <a href="#JS">Client-side JavaScript Functions</a> 
       below for details.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"> <code>moveDownButton</code></td>
       <td style="vertical-align: top;">
       Use the <code>moveDownButton</code> facet to replace the standard Move
 Down button. When you use this facet, the id attribute of the facet component should be set to
 the <code>webuijsf:addRemove</code> tag's id attribute with <code>_moveDownButton</code>
 appended to the id. For example, if the <code>webuijsf:addRemove</code> id is <code>ar1</code>,
 the facet component's id should be <code>ar1_moveDownButton</code>. <br>
       <br>
 If you want to use the JavaScript function associated with the default button, use the <code>
 moveDown()</code> function. See <a href="#JS">Client-side JavaScript Functions</a> 
 below for details.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>header</code></td>
       <td style="vertical-align: top;">
       Use the <code>header</code> facet to replace the component label. 
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>footer</code></td>
       <td style="vertical-align: top;">
       Use the <code>footer</code> facet to create a footer for the
 component. By default there is no footer.<br>
       </td>
     </tr>
   </tbody>
 </table>
 <h3>Theme Identifiers</h3>
 <p>None.</p>
 <h3><a name="JS"></a>Client-side JavaScript Functions</h3>
 <p>When the component is rendered, a DOM object corresponding to the
 component is created. To manipulate the component on the client side,
 you may invoke functions on the DOM object. With reference to the DOM
 id, to add all elements on the available list that the user has
 selected, invoke <code>document.getElementById(id).add()</code>. 
 </p> 
    <table style="text-align: left; width: 100%;" border="1"
  cellpadding="2" cellspacing="2">
   <tbody>
     <tr>
       <td style="vertical-align: top;"><code>add()</code></td>
       <td style="vertical-align: top;">The highlighted
 items on the available list are moved to the selected list.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>addAll()</code></td>
       <td style="vertical-align: top;">All non-disabled
 items on the available list are moved to the selected list.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>remove()</code></td>
       <td style="vertical-align: top;">The highlighted
 items on the selected list are moved to the available list.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>removeAll()</code></td>
       <td style="vertical-align: top;">All non-disabled
 items on the selected list are moved to the available list.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>moveUp()</code></td>
       <td style="vertical-align: top;">The highlighted
 items on the selected list are moved up one position.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>moveDown()</code></td>
       <td style="vertical-align: top;">The highlighted
 items on the selected list are moved down one position.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>updateButtons()</code></td>
       <td style="vertical-align: top;">This function
 ensures that the buttons are enabled/disabled based on the current selections in the
 lists. Invoke this function if you programmatically modify the
 selections on the available or selected list using client-side scripts.
 You do not need to invoke it when using any of the functions listed
 above, as they already invoke this function at the end.</td>
     </tr>
   </tbody>
 </table>
 <h3>Examples</h3>
 <h4>Example 1: Horizontal AddRemove Component</h4>    
 <p>In this example, the component gets the list options from a managed bean called
 AirportBean. The selections are stored in another managed bean
 (AirportSelectionBean). The <code>selectAll</code> attribute indicates that the
 Add All and Remove All buttons should be
 shown. A label for the component as a whole (<code>label</code>) is shown
 next to the component (<code>labelOnTop</code> is false). Labels have
 been specified for the list of available items and for the list of
 selected items. The <code>sorted</code> attribute indicates that the options on
 the list will be shown in alphabetical order. See also the <a href="#AirportBean">
 sample backing bean code</a> below.</p>
 <pre>
         &lt;webuijsf:addRemove id="list"
                       items="#{AirportBean.airports}"
                       selected="#{AirportBean.airportSel}"
                       label="Select airports"
                       availableItemsLabel="Available Airports"
                       selectedItemsLabel="Selected Airports"
                       selectAll="true"
 		      sorted="true"
                       labelOnTop="false"/&gt;
 </pre>
 <h4>Example 2: Vertical AddRemove Component</h4>
 <p>This example is similar to the previous example, with the following 
 exceptions: The component is rendered using vertical layout (in this case, the main
 component label is always rendered above the component). 
 The <code>moveButtons</code> attribute indicates that the
 Move Up and Move Down buttons should be shown. See also the <a href="#AirportBean">
 sample backing bean code</a> below.</p>
 <pre> 
         &lt;webuijsf:addRemove id="list"
                       items="#{AirportBean.airports}"
                       selected="#{AirportBean.airportSel}"
                       label="Select some names"
                       availableItemsLabel="Available Names"
                       selectedItemsLabel="Selected Names"
                       selectAll="true"
                       moveButtons="true"
                       vertical="true"/&gt;
 </pre> 
 <h4>Example 3: AddRemove Using Facets</h4>
 <p>This example uses the header facet to create a label with the <code>webuijsf:label
 </code> tag,
 which provides the labelLevel attribute to change the appearance of the label.
 The example also uses the <code>addButton</code> facet to replace the standard Add 
 button. The child Button component uses the <code>add()</code> Javascript 
 function on the <code>webuijsf:button</code> tag's <code>onClick</code> attribute, 
 to enable the button to add items to the selected items list. 
 See also the <a href="#AirportBean">sample backing bean code</a> below.</p>
 <pre> 
  &lt;webuijsf:form id="arform1"&gt;
  ...
   &lt;webuijsf:addRemove id="arlist" 
                       label="Select some names"
                       availableItemsLabel="Available Names:"
                       selectedItemsLabel="Selected Names:"
                       items="#{AirportBean.airports}"
                       selected="#{AirportBean.airportSel}"
                       labelOnTop="false" &gt;
               &lt;f:facet name="header"&gt;
                    &lt;webuijsf:label id="arheader" text="Label in a Facet" for="arlist" labelLevel="1" /&gt;
               &lt;/f:facet&gt;
               &lt;f:facet name="addButton"&gt;
                    &lt;webuijsf:button id="arlist_addButton" text="Add It!" onClick="document.getElementById('arform1:arlist').add()"/&gt;
               &lt;/f:facet&gt;
           &lt;/webuijsf:addRemove&gt;
 ...
 &lt;/webuijsf:form&gt;
  </pre>   
 <h4><a name="AirportBean"></a>Example Backing Bean Content</h4>       
 The following code is from the AirportBean used in the examples.
 <pre>
 public class BackingFileChoice {
     private static final boolean DEBUG = false;
     private String airport = "ARN";
     private String[] airportSel = { "ARN", "MNL" };
     private Option[] airports = null;
     private Option[] multibyte = null;
     public String getAirport() {
         return airport;
     }
     public void setAirport(String s) {
         airport = s;
     }
     public String[] getAirportSel() {
         return airportSel;
     }
 }
     public String getAirportSelString() {
         String s = new String();
         if(airportSel == null) return "NO Option";
         for(int i=0; i&lt;airportSel.length; ++i) {
             s = s.concat(" " + airportSel[i]);
         }
         if(DEBUG) log("\tString is " + s);
         return s;
     }
     public void setAirportSel(String[] s) {
         if(DEBUG) { 
             log("setAirportSel() with new value");
             if(s == null) log("No value!"); 
             else {
             for(int i=0; i&lt;s.length; ++i) 
                 log("adding value " + s[i]);
             }
         }
         airportSel = s;
     }
     public Option[] getAirports() {
         return airports;
     }
     public BackingFileChoice() {
         airports = new Option[11];
         airports[0] = new Option("SFO", "San Francisco");
         airports[1] = new Option("OAK", "Oakland");
         airports[2] = new Option("SAN", "San Diego");
         airports[3] = new Option("BOS", "Boston");
         airports[4] = new Option("ARN", "Stockholm");
         airports[5] = new Option("MNL", "Manila");
         airports[6] = new Option("CDG", "Paris");
         airports[7] = new Option("PDX", "Portland");
         airports[8] = new Option("LAX", "Los Angeles");
         airports[9] = new Option("NRT", "Tokyo");
         airports[10] = new Option("TBD", "Future Airport");
         airports[10].setDisabled(true);
     }
  }
  </pre>
]]></description>
    </tag>

    <tag>
        <name>alarm</name>

        <description><![CDATA[ 
 <p>Use the <code>webuijsf:alarm</code>
 tag to display a theme-specific alarm image in the rendered
 HTML page. The <code>webuijsf:alarm</code> tag
 can be used anywhere that an image can be displayed. Alarm images are
 useful in pages and tables that display the status of devices.</p>
 <h3>HTML Elements and Layout</h3>
 <p>The rendered HTML page displays an XHTML compliant <code>&lt;img&gt;</code>
 element with any applicable attributes.&nbsp;
 The attributes can be specified through the <code>&lt;webuijsf:alarm&gt;</code>
 tag attributes.</p>
 <h3>Configuring the <code>webuijsf:alarm</code> tag</h3>
 <p>Use the <code>severity</code> attribute to specify the alarm
 severity, which determines the theme-specific alarm icon to render. 
 <p>The <code>text</code> attribute is used to specify text to display next to the
 alarm icon, and the <code>textPosition</code> attribute specifies whether the text
 should be displayed to the left or right of the icon.
 <p>The <code>url</code> attribute can be used to override
 the theme-specific alarm icon. The image that you specify with the 
 <code>url</code> attribute is always rendered, even if a severity is not
 specified. If you specify a theme key with the <code>icon</code> attribute, you must also 
 specify a standard severity. If you do not specify a severity, or if you specify a 
 custom severity, no image is rendered when you use the <code>icon</code> attribute. 
 The icon is coupled 
 with the severity, while the url is not. 
 If you specify an <code>icon</code> attribute as well as a 
 <code>url</code> attribute, the image specified by the <code>url</code> takes precedence 
 over the image specified by the <code>icon</code> attribute. 
 <p>
 Other image-related attributes, such as border, height, and width, can also be 
 specified with the <code>webuijsf:alarm</code>
 tag attributes to override the image attributes of the icon.</p>
 <h3>Theme Identifiers</h3>
 <p>The Theme provides the
 following alarm icon identifiers. </p>
 <pre wrap="">
 ALARM_CRITICAL_SMALL
 ALARM_CRITICAL_MEDIUM 
 ALARM_MAJOR_SMALL
 ALARM_MAJOR_MEDIUM 
 ALARM_MINOR_SMALL 
 ALARM_MINOR_MEDIUM
 ALARM_DOWN_SMALL 
 ALARM_DOWN_MEDIUM
 ALARM_MASTHEAD_CRITICAL_MEDIUM 
 ALARM_MASTHEAD_DOWN_MEDIUM 
 ALARM_MASTHEAD_MAJOR_MEDIUM
 ALARM_MASTHEAD_MINOR_MEDIUM</pre>
 <h3>Client Side Javascript Functions</h3>
 None.
 <br>
 <h3>Examples</h3>
 <h4>Example 1: Create an alarm with critical severity.</h4>
 <code>&lt;webuijsf:alarm id="alarm1" severity="critical" /&gt;
 <br>
 <br>
 </code>
 <h4>Example 2: Create an alarm with major severity, but override the
 alarm image.</h4>
 <pre wrap="">
 <code>&lt;webuijsf:alarm id="alarm2" 
           severity="major"
           url="../images/major.gif" 
           height="10" 
           width="10" 
           alt="Processor Alarm:Major" /&gt;
 </code></pre>
 <h4>Example 3: Using Alarms in a Table</h4>
 <p>See the Examples section in the documentation for the 
 <a href="tableColumn.html#Alarms"><code>webuijsf:tableColumn</code></a> component. 
 </p>
]]></description>
    </tag>

    <tag>
        <name>alarmStatus</name>

        <description><![CDATA[ 
<p>
 Use the <code>webuijsf:alarmStatus</code>
 tag to display alarm information as hyperlinks. This
 tag is typically specified as part of the <a href="masthead.html"><code>webuijsf:masthead</code></a>
 tag's <code>statusArea</code> facet. The <code>webuijsf:alarmStatus</code>
 tag produces alarm information identical to the <code>webuijsf:masthead</code>
 tag's <code>alarmCounts</code> attribute. See the <a href="masthead.html"><code>webuijsf:masthead</code>
 documentation</a> for more information about the <code>statusArea</code> facet.
 </p>
 The <code>statusArea</code> facet overrides the masthead's status area attributes. 
 The <code>webuijsf:alarmStatus</code> tag enables you to include the alarm counts in the status area,
 along with your custom components. The <a href="jobStatus.html"><code>webuijsf:jobStatus</code></a>,
 <a href="timeStamp.html"><code>webuijsf:timeStamp</code></a>, and <a
 href="notificationPhrase.html"><code>webuijsf:notificationPhrase</code></a>
 tags enable you to include the other standard status area components as
 well. <br>
 </p>
 <p>Note that when you use the <code>webuijsf:masthead</code>
 attributes, spacing between the components is handled
 automatically. When
 you use the <code>webuijsf:alarmStatus</code>, <code>webuijsf:jobStatus</code>, <code>webuijsf:timeStamp</code>,
 and <code>webuijsf:notificationPhrase</code> tags in the <code>statusArea</code> facet,
 you may have to add code to handle the spacing between the components,
 as demonstrated in the example below. </p>
 <h3>HTML Elements and Layout</h3>
 <p>
 The rendered HTML page includes a <code>&lt;span&gt;</code> element
 that contains the label for the alarm count. The label text is "Current
 Alarms:" by default. Immediately following the <code>&lt;span&gt;</code>
 element are four image hyperlinks that show the number of alarms for each severity.
 You can determine how the links respond when clicked by specifying attributes such 
 as <code>url</code>, <code>action</code>,
 or <code>actionListener</code>. The links might be used to show
 the user more information about the alarms, for example. </p>
 <h3>Configuring the <code>webuijsf:alarmStatus</code> tag</h3>
 <p>Use the <code>text</code>
 attribute to specify a title or label for the alarmStatus component. The default
 text is "Current Alarms:". </p>
 <p>The <code>immediate</code> attribute should be set to true when this component 
 is used in the masthead.</p>
 <p>
 By default, all four alarm icons and counts are displayed. You can prevent any alarm type
 from being displayed by setting the following attributes to false:
 <ul>
 <li><code>criticalAlarms</code></li>
 <li><code>downAlarms</code></li>
 <li><code>majorAlarms</code></li>
 <li><code>minorAlarms </code></li>
 </ul>
 You can specify the number of each type
 of alarm by using the attributes: 
 <ul>
 <li><code>numCriticalAlarms</code></li>
 <li><code>numDownAlarms</code></li>
 <li><code>numMajorAlarms</code></li>
 <li><code>numMinorAlarms </code></li>
 </ul>
 <p>The order in which you specify
 the attributes does not matter because the alarms are always displayed
 in the order of severity: down, critical, major, minor. If the count
 of an alarm type is 0, a dimmed version of icon is displayed.</p>
 <p>
 You can also specify key identifiers
 for alternative theme image files to use for the icons.  See the 
 <a href="#ThemeIdentifiers">Theme Identifiers</a>
 section. </p>
 <p>
 The image-related attributes such as align, border, vspace apply to all
 the alarm images. The link-related attributes such as type, url, and
 action apply to all the alarm count links.
 </p>
 <p>If you want to customize a particular alarm count icon count, you can use
 facets to replace any of the icons.  See <a href="#Facets">Facets</a> for more information. 
 <h3><a name="Facets"></a>Facets</h3>
 <p>The <code>webuijsf:alarmStatus</code> tag supports the following facets.
 </p>
 <table style="text-align: left;" border="1" cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;"><code>alarmLabel</code></td>
 <td style="vertical-align: top;">Specify a custom component to use
 for the label. This facet overrides the static text label that is rendered
 by default, and also overrides the text attribute. The facet might be used to
 create a hyperlink label, for example, instead of static text. 
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>criticalAlarms</code></td>
 <td style="vertical-align: top;">Specify a custom component for the icon and count
 for critical alarms. Overrides <code>criticalAlarms</code> and 
 <code>numCriticalAlarms</code> attributes.
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>downAlarms</code></td>
 <td style="vertical-align: top;">Specify a custom component for the icon and 
 count for down alarms. Overrides <code>downAlarms</code> and 
 <code>numDownAlarms</code> attributes.
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>majorAlarms</code></td>
 <td style="vertical-align: top;">Specify a custom component for the icon and 
 count for major alarms. Overrides <code>majorAlarms</code> and 
 <code>numMajorAlarms</code> attributes.
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>minorAlarms</code></td>
 <td style="vertical-align: top;">Specify a custom component for the icon and 
 count for minor alarms. Overrides <code>minorAlarms</code> and 
 <code>numMinorAlarms</code> attributes.
 </td>
 </tr>
 </tbody>
 </table>
 <p>
 For example, to replace the down alarms icon, use the following facet in the
 <code>webuijsf:alarmStatus</code> tag: </p>
 <code>&lt;f:facet name="downAlarms"&gt;
 <br>
 &nbsp; &lt;h:panelGroup id="downAlarmsPanel"&gt;
 <br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:imageHyperlink id="downAlarmsLink"
 styleClass="#{themeStyles.MASTHEAD_ALARM_LINK}"
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;icon="ALARM_DOWN_MEDIUM" text=" 3"
 url="downAlarms.jsp" /&gt;
 <br>
 &nbsp;&nbsp;&nbsp;
 &lt;f:verbatim&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/f:verbatim&gt;
 <br>
 &nbsp; &lt;/h:panelGroup&gt;
 <br>
 &lt;/f:facet&gt;
 </code>
 <p>Note that you can use the theme style class <code>MstAlmLnk</code> to apply 
 appropriate spacing for links you create with facets.</p> 
 <h3><a name="ThemeIdentifiers">Theme Identifiers</a></h3>
 <p>The theme provides the following alarm icon key identifiers.
 <pre wrap="">
 ALARM_CRITICAL_SMALL
 ALARM_CRITICAL_MEDIUM
 ALARM_MAJOR_SMALL
 ALARM_MAJOR_MEDIUM
 ALARM_MINOR_SMALL
 ALARM_MINOR_MEDIUM
 ALARM_DOWN_SMALL
 ALARM_DOWN_MEDIUM
 ALARM_MASTHEAD_CRITICAL_MEDIUM
 ALARM_MASTHEAD_CRITICAL_DIMMED
 ALARM_MASTHEAD_DOWN_MEDIUM
 ALARM_MASTHEAD_DOWN_DIMMED
 ALARM_MASTHEAD_MAJOR_MEDIUM
 ALARM_MASTHEAD_MAJOR_DIMMED
 ALARM_MASTHEAD_MINOR_MEDIUM
 ALARM_MASTHEAD_MINOR_DIMMED
 </pre>
 <p>These identifiers can be specified with the <code>criticalIcon</code>, 
 <code>majorIcon</code>, <code>minorIcon</code>, 
 <code>downIcon</code> attributes to vary the appearance of the icons.
 </p>
 <h3>Client Side Javascript Functions</h3>
 <p>None.</p>
 <h3>Examples</h3>
 <h4>Example 1: Display alarm status information as part of the masthead statusArea facet</h4>
 <p>This example shows the <code>webuijsf:alarmStatus</code> tag with attributes set to indicate the 
 numbers of each type of alarm. The example shows literal values for these 
 attributes, but you would typically set them to a JavaServer Faces EL expression  
 that resolves to a backing bean property. The <code>f:verbatim</code> tags are 
 used to add style selectors that are defined in the theme style sheet.
 </p>
 <pre><code>&lt;webuijsf:masthead id="Masthead" productImageURL="../images/webconsole.png"
         productImageDescription="Java Web Console" userInfo="user_name" 
         serverInfo="server_name"&gt;
      &lt;f:facet name="statusArea"&gt;
        &lt;webuijsf:panelGroup id="statusPanel" separator=""&gt;
          &lt;webuijsf:markup tag="div" styleClass="#{themeStyles.MASTHEAD_STATUS_DIV}"&gt;
            &lt;webuijsf:notificationPhrase text="Important info goes here" /&gt;
            &lt;webuijsf:image icon="DOT" border="0" width="20" height="1" /&gt;
            &lt;webuijsf:jobStatus numJobs="1" /&gt;
          &lt;/webuijsf:markup&gt;
          &lt;webuijsf:markup tag="div" styleClass="#{themeStyles.MASTHEAD_TIME_DIV}"&gt;
            &lt;webuijsf:timeStamp /&gt;
          &lt;/webuijsf:markup&gt;
          &lt;webuijsf:markup tag="div" styleClass="#{themeStyles.MASTHEAD_ALARM_DIV}"&gt;
            &lt;webuijsf:alarmStatus numDownAlarms="0" numCriticalAlarms="1" numMajorAlarms="2" numMinorAlarms="3" /&gt;
          &lt;/webuijsf:markup&gt;
        &lt;/webuijsf:panelGroup&gt;
      &lt;/f:facet&gt;
 &lt;/webuijsf:masthead&gt;
 </code></pre>
]]></description>
    </tag>

    <tag>
        <name>alert</name>

        <description><![CDATA[
 <p>Use the <code>webuijsf:alert</code>
 tag to display an inline alert
 message at the top of the rendered HTML page. Inline alert messages
 permit users to correct problems or proceed with their work without
 having to dismiss a window and navigate to a new location.</p>
 <h3>HTML Elements and Layout</h3>
 <p>
 The alert 
 component includes an icon, a summary message, and an optional detail message. 
 The icon shown is determined by the type attribute, which must be set to 
 <code>information</code>, <code>success</code>, <code>warning</code>, or <code>error</code>. 
 A different icon is shown for each alert type. The icon is determined by the theme.</p>
 <p>
 The component renders HTML <code>&lt;div&gt;</code> and <code>&lt;table&gt;</code> elements 
 for the alert box and text, 
 with an <code>&lt;img&gt;</code> element for the icon. If you include a link with the alert, an 
 <code>&lt;a&gt;</code> element is also rendered.
 <h3>Configuring the <code>webuijsf:alert</code> tag</h3>
 <p>
 The summary message is specified with the <code>summary</code> attribute,
 and is displayed prominently next to the icon. The optional
 detail message is specified with the <code>detail</code> attribute,
 and is displayed in less prominent text following the summary
 text. The detail text can provide more information about the
 alert. </p>
 <p>
 You can also include a link to further information or another window
 by using the <code>linkTarget</code>, <code>linkText</code>,
 <code>linkToolTip</code>, <code>linkURL</code>, and <code>linkActionExpression</code> attributes.
 The link is displayed below the detail text. </p>
 <p>
 The icon and link can be overridden with facets. 
 </p>
 <h3>Facets</h3>
 <p>
 The <code>webuijsf:alert</code> tag supports the following facets:
 <ul>
   <li><code>alertImage</code> - use this facet to specify a custom
 component to use for the alert icon. For example, you might override the theme icon
 for the alert with the <code>webuijsf:image</code> component.</li>
 </ul>
 <ul>
   <li><code>alertLink</code> - use this facet to specify a custom component 
   to use for the link, to add formatting or extra text, for example. </li>
 </ul>
 <h3>Client Side Javascript
 Functions</h3>
 None.<h3>Examples</h3><b>Example 1: An example showing
 an informational alert:</b><br><code>&lt;webuijsf:alert id="msg1"
 type="information" summary="Patch Installed Successfully" detail="Patch
 9997-01 was successfully installed on host alpha, beta and zed."
 /&gt;<br></code><br><b>Example 2: An example showing
 an error alert with an alert link:</b><br><code>&lt;webuijsf:alert id="msg2"
 type="error" summary="Patch Installation Failed!"
 detail="Patch 9997-01 was not installed on host alpha, beta and zed."
 linkText="View Log" linkURL="/log/patch-log.txt" linkTarget="_blank"
 linkToolTip="Open Window Containing Error Log"/&gt;<br><br></code><b>Example
 3: An example showing the use of an alertImage facet:</b><br><code>&lt;webuijsf:alert id="msg2"
 type="error" summary="Patch Installation Failed!"
 detail="Patch 9997-01 was not installed on host alpha, beta and
 zed."&gt;<br>&nbsp;&nbsp;&nbsp; &lt;f:facet name="alertImage"&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &lt;webuijsf:image
 id="foo" </code><code>url="../images/foo.gif"
 /&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>&lt;/webuijsf:alert&gt;<br></code>
]]></description>
    </tag>

    <tag>
        <name>anchor</name>

        <description><![CDATA[
 <p>
 Use the <code>webuijsf:anchor</code> tag
 to create HTML anchors in the rendered HTML page. You can then use <code>webuijsf:hyperlink</code>
 tags that jump to the locations of the anchors in the page.</span><br>
 <h3 >HTML Elements and Layout</h3>
 The <code>webuijsf:anchor</code> tag
 creates an <code>&lt;a&gt;</code> element in the rendered HTML page.
 The name and id attributes of the <code>&lt;a&gt;</code> element are
 both set to the value of the id attribute specified with the <code>webuijsf:anchor</code>
 tag. The name attibute is included to maintain compatibility with older
 browsers.</span><br >
 <h3 >Client Side Javascript Functions</h3>
 <span >None.&nbsp; </span><br>
 <h3 >Examples</h3>
 <h4 >Example 1: Create an anchor</h4>
 <code >&lt;webuijsf:anchor id="anchor1" /&gt;
 <br>
 <br>
 </code><span >This generates an anchor,
 with id and name set to the same
 value. </span><br >
 <span >&nbsp;&nbsp; </span><br>
 <code >&lt;a id="anchor1" name="anchor1"
 /&gt;
 </code><br>
 <h4 >Example 2: Create a hyperlink to
 that will go to the anchor above<br>
 </h4>
 <code >&lt;webuijsf:hyperlink id="gotoAnchor1"
 url="#anchor1" /&gt;<br>
 </code>
 <h4 >Example 3: Create a relative hyperlink to
 go to the anchor
 in Example 1</h4>
 <code >&lt;webuijsf:hyperlink id="gotoAnchor1"
 url="/faces/hyperlink.jsp#anchor1" /&gt;<br>
 </code><br>
 Note:&nbsp; In the <code>url</code>
 attribute, you must specify a path that maps to the correct servlet.
 However, you do not need the context. In this example, the <code
 /faces</code> part of the path maps to the servlet
 through the JSF FacesServlet as defined in the web.xml.
]]></description>
    </tag>

    <tag>
        <name>body</name>

        <description><![CDATA[
 <p>
 Use the <code>webuijsf:body</code> tag to contain the JSP tags for
 the body of the JSP page, if you are not using frames in the
 page. The <code>webuijsf:body</code> tag must be placed after the 
 <a href="html.html"><code>webuijsf:html</code></a> and 
 <a href="head.html"><code>webuijsf:head</code></a> tags. The tags for
 the page content must be nested inside the <code>webuijsf:body</code> tag. This
 placement ensures that the corresponding HTML elements are rendered in the order that is
 required in HTML. </p>
 <p>
 Note that if you are using frames, you should use 
 the <a href="frameSet.html"><code>webuijsf:frameSet</code></a>
 tag instead of the <code>webuijsf:body</code> tag.</p>
 <p>
 The focus can be maintained with the <code>body</code> tag's
 <code>focus</code> and <code>preserveFocus</code> attributes.
 The <code>preserveFocus</code> attribute's default value is <code>true</code>.
 This means that the focus, after the first display, will be returned
 to the element that had the focus when the request was made. Setting 
 <code>preserveFocus</code> to <code>false</code> inhibits that behavior.
 </p>
 <p>
 The <code>focus</code> attribute allows the developer to specify the
 element that should receive the focus on first display.
 If <code>preserveFocus</code> is set to false the <code>focus</code>
 attribute can control which element receives the focus on every
 request/response cycle.
</p>
 <h3>HTML Elements and Layout</h3>
 <p>The body component
 creates an HTML <code>&lt;body&gt;</code> element in the rendered HTML
 page. Attributes that you specify with the <code>webuijsf:body</code>
 tag are used to specify the corresponding attributes in the rendered <code>&lt;body&gt;</code>
 element.</p>
 <h3>Client Side Javascript Functions</h3>
 <p>None.
 </p>
 <p>
 <h3>Examples</h3>
 <h4>Example 1: Create a body tag</h4>
 <p>This example shows a simple <code>webuijsf:body</code> tag.</p>
 <code>&lt;webuijsf:page&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:head title="body test" &gt;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &lt;webuijsf:meta httpHead="refresh"
 content="5" /&gt;<br>
 &nbsp; &nbsp; &lt;/webuijsf:head&gt;&nbsp; <br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:body id="bodytest"&gt;
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ....your body content
 ...<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:body id="bodytest"&gt;<br>
 &lt;/webuijsf:page&gt;</code>
 <h4>Example 2: Create a body tag that sets focus</h4>
 <p>This example demonstrates how to set focus in the 
 <code>webuijsf:body</code> tag for a particular
 component in the page. When the page is first loaded, the third text
 field has focus.</p>
 <p>
 Since <code>preserveFocus</code> has not been specified, then focus will
 be set in one of two ways if the same page is redisplayed in the 
 resulting response.
 </p>
 <ul>
 <li>
 If the enter key is pressed in an input field then the focus will be
 returned to that field in the subsequent response.
 </li>
 <li>
 If the page is submitted is some other fashion, say via a submit button
 then the focus will be returned to the element that submitted the page
 since it was the last element to have the focus.
 </li>
 </ul>
 </p>
 <code>
 &nbsp; &lt;webuijsf:page&gt;<br>
 &nbsp;&nbsp; &lt;webuijsf:head title="Body tests" /&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:body focus="form1:textTest3"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:form id="form1"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:textField id="textTest"
 label="Text Field 1:" required="true"&nbsp;
 text="#{FieldTest.test1}"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:textField id="textTest2"
 label="Text Field 2:" required="true"&nbsp;
 text="#{FieldTest.test2}"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:textField id="textTest3"
 label="Text Field 3:" required="true"&nbsp;
 text="#{FieldTest.test3}"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:button primary="true"
 id="fieldButton2" text="Submit"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:form&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:body&gt;<br>
 &nbsp; &lt;/webuijsf:page&gt;
 </code>
 <p>Auto-generated component class.
 Do <strong>NOT</strong> modify; all changes
 <strong>will</strong> be lost!</p>
]]></description>
    </tag>

    <tag>
        <name>breadcrumbs</name>

        <description><![CDATA[
 <p>Use the <code>webuijsf:breadcrumbs</code> tag to display a set of hyperlinks
 that can be used as a navigation aid in the rendered HTML page.
 Breadcrumbs, or a parentage path, show the user's location within an
 application, and the physical or logical path to a page. The user can
 click breadcrumbs to navigate to other locations previously traversed
 within the application.
 <p>A breadcrumb's hyperlinks may be specified in one of two ways:
 <ul>
 <li>Directly in the JSP, by placing one or more <code><a href="hyperlink.html">webuijsf:hyperlink</a></code>
 tags within the <code>webuijsf:breadcrumbs</code> tag. Hyperlinks specified in this manner
 are referred to as "child" hyperlinks.
 <li>Indirectly via the <code>pages</code> attribute. The value must a value binding
 expression that identifies an array of <code>com.sun.webui.jsf.Hyperlink</code> components. Hyperlinks 
 specified in this manner are referred to as "bound" hyperlinks. Bound hyperlinks must
 be uniquely identifiable by the value of their <code>id</code> attribute, and this attribute
 must not be null. Bound hyperlinks should not be part of a view tree, and the value of
 their <code>parent</code> property should be null.
 </ul>
 You should provide either child hyperlinks or bound hyperlinks, but not both.
 If both are provided, bound hyperlinks are rendered, and any child hyperlinks are 
 ignored. Non-hyperlink children are also ignored.
 <p>Bound hyperlinks are treated as child hyperlinks for all phases of request processing,
 except that they are not asked to save or restore their state.
 <p>The breadcrumbs component has an <code>immediate</code> property, the default
 value of which is <code>true</code>. If the breadcrumbs is immediate, all action events
 generated by child or bound hyperlinks will be treated as though they too were immediate,
 whether or not the source hyperlink is immediate. If the breadcrumbs is not immediate,
 action events will be processed according to whether their source hyperlink is
 immediate or not.
 <h3>HTML Elements and Layout</h3>
 <p>Breadcrumbs are rendered as a series of <code>&lt;a&gt;</code> XHTML hyperlinks
 separated by "&gt;"&nbsp; symbols, similar to the following:&nbsp;
  <ul>
  <span style="color: rgb(51, 102, 255);">Main App Page</span> &gt; <span
  style="color: rgb(51, 102, 255);">Second level page&nbsp;</span> &gt; <span
  style="color: rgb(51, 102, 255);">Another level</span> &gt; Current page
  </ul>
 <p>The last element in the breadcrumbs should correspond to the current page,
 and is rendered as static text.
 <p>Separators are rendered between hyperlinks that are visible and renderable. The
 last child hyperlink is always assumed to refer to the current page, whether or not
 it is visible or renderable.
 <h3>Theme Identifiers</h3>
 None.
 <h3>Client Side Javascript Functions</h3>
 None.
 <h3>Examples</h3>
 <h4>Example 1: Using child components</h4>
 <code>
 <pre>
       &lt;webuijsf:breadcrumbs id="breadcrumbs1"&gt;
         &lt;webuijsf:hyperlink url="http://google.com" label="Google"/&gt;
         &lt;webuijsf:hyperlink url="http://yahoo.com" label="Yahoo"/&gt;
         &lt;webuijsf:hyperlink url="http://example.com" label="Example"/&gt;
       &lt;/webuijsf:breadcrumbs&gt;
 </pre>
 </code>
 <h4>Example 2: Using a value binding</h4>
 <code>
 <pre>
       &lt;webuijsf:breadcrumbs id="breadcrumbs2" pages="#{FieldBean.pagelist}" /&gt;
 </pre>
 </code>
]]></description>
    </tag>

    <tag>
        <name>button</name>

        <description><![CDATA[
<p>
 Use the <code>webuijsf:button</code> tag to display
 an input button in the rendered HTML page. The input button submits the
 associated form when activated by the user. The
 corresponding ActionEvent events then occur on the server.<br>
 <h3>HTML Elements and Layout</h3>This tag creates an XHTML<code> &lt;input&gt;</code> button element
with a text label.<br>
<h3>Configuring the webuijsf:button tag&nbsp; <br>
</h3>
The button component can render a button as a primary button or a
secondary button. A primary button is intended to be used for buttons
that are the most commonly used on a page or section of a page, and are
rendered to be more visually prominent than secondary buttons. The <code>primary</code>
attribute is false by default, which renders a secondary button. <br>
<p>The <code>text</code> attribute is used to specify the characters
displayed on the buttons, which use a default button image set by the
theme. The <code>escape</code> attribute, when set to false, causes an
HTML <code>&lt;button&gt;</code> to be rendered instead of an <code>&lt;input&gt;</code>
element. The <code>&lt;button&gt;</code> element, unlike the&nbsp; <code>&lt;input&gt;</code>
element, allows you to specify button text that will be interpreted as
HTML. For example if you wanted the button to say M&amp;M, you would
have to specify M&amp;amp;M and set <code>escape="false"</code>.&nbsp;&nbsp;
<br>
</p>
<p>You can use the <code>imageURL</code> attribute to specify a
different image for a button, or the&nbsp; <code>icon</code> attribute
to specify a theme key to a button image. When you use these
attributes, the <code>text</code> attribute is ignored, so your button
image must include any desired button text.<br>
</p>
<p>Note that the <code>mini</code> attribute at one time rendered a
smaller button, but currently all buttons are the same size. The <code>mini</code>
attribute has no effect. However, you can use <code>style</code> and <code>styleClass</code>
attributes to create a smaller button if desired.<br>
</p>
<h4>Button Actions<br>
</h4>
<p>The button component is the most commonly used component for
submitting
a page. By default, the button component creates a submit
button. However, you might want to use a button to go to another
page in the application. In this case, you should configure the button
with <code>immediate="true"</code> and an <code>actionExpression</code>
that handles the navigation. <br>
</p>
A button that is used to affect the input components on the page, such
as providing initial default input, should be configured
with <code>immediate="true"</code> and&nbsp; an <code>actionListenerExpression</code>
that updates the components. <br>
<p>If you want a button to submit a page, you should <span
style="font-style: italic;">not</span> set <code>immediate</code>,
and should set an <code>actionExpression</code> and possibly an <code>actionListenerExpression</code>.&nbsp;&nbsp;
The action should get information from the managed bean and
perform some business logic, and then determine what to show next on
the basis of the outcome of the business logic.<br>
</p>
<p>If you want the button to reset all the input component values on
the page, set the <code>reset</code> attribute to true.<br>
</p>
 <h3>Client Side Javascript Functions</h3>
 <p>When the component is rendered, a DOM object corresponding to the
 component is created. To manipulate the component on the client side,
 you may invoke functions on the DOM object. With reference to the DOM
 id, to disable the component, invoke 
 <code>document.getElementById(id).setDisabled(true)</code>.
 </p>
 <ul>
 <li><span style="font-style: italic;">isPrimary(elementId)</span>:
 Test
 if button style is "primary" for
 the given button element id.</li>
 <li><span style="font-style: italic;">setDisabled(disabled)</span>: Enable/disable the component. Set <code>disabled</code> to true to disable the component, or false to enable it. </li>
 <li><span style="font-style: italic;">setPrimary(elementId,
 primary) </span>: Set button style to "primary" for the
 given
 element id. If the primary attribute is set to
 true, the element is shown with primary styles.</li>
 </li></ul><h3>Examples</h3>
 <h4>Example 1: Create a primary button:</h4><code>&lt;webuijsf:button id="button1" text="#{ButtonBean.text}"
 actionExpression="#{ButtonBean.success}" primary="true" /&gt;<br></code>
 <h4>Example 2: Create a secondary button:</h4><code>&lt;webuijsf:button id="button1" text="#{ButtonBean.text}"
 actionExpression="#{ButtonBean.success}"  /&gt;<br></code>
 <h4>Example 3: Create a reset button:</h4><code>&lt;webuijsf:button id="button1"
 text="#{ButtonBean.text}" actionExpression="#{ButtonBean.success}" reset="true"
 /&gt;<br></code>
 <h4>Example 4: Create an image button:</h4><code>&lt;webuijsf:button id="button1" imageURL="#{ButtonBean.image}"
 actionExpression="#{ButtonBean.success}" /&gt;</code><br><br>
 
]]></description>
    </tag>

    <tag>
        <name>calendar</name>

        <description><![CDATA[
 <p>Use the <code>webuijsf:calendar</code> when the user needs to select a
     date. The calendar component displays a text field that expects a
     date as input, together with an icon that when clicked displays a
     small calendar. The user can either type directly into the
     textfield or select a date from the calendar display. 
 </p>
 <h3>HTML Elements and Layout</h3>
 <p>
 The component renders several elements: an optional
 <code>&lt;label&gt;</code>, an <code>&lt;input type="text"&gt;</code>
 and an <code>&lt;img&gt;</code> element for the icon. They are laid
 out inside a HTML <code>&lt;table&gt;</code>. </p> <p> The pop-up
 calendar is a complex component also laid out using a HTML
 <code>&lt;table&gt;</code>. It has child components corresponding to
 <code>&lt;webuijsf:dropDown&gt;</code> and
 <code>&lt;webuijsf:iconHyperlink&gt;</code> (please see these for details)
 and anchors <code>&lt;a&gt;</code> to represent the dates and the
 "close" button. </p>
 <h3>Configuring the <code>webuijsf:calendar</code> tag </h3>
 <p>Use the <code>selectedDate</code> attribute to associate the
 component with a model object that represents the current value, by
 setting the attribute's value to an EL expression that corresponds to
 a property of a backing bean.</p>
 <p>By default, the component accepts dates between the current date
     and four years out. The years shown in the popup calendar reflect
     this range. If a date outside of the range is entered into the
     textfield, the component indicates a validation error. To specify
     a different range of date, use the <code>minDate</code> and
     <code>maxDate</code> attributes. 
 <p>To optionally specify a label for the component, use the
 <code>label</code> attribute, or specify a label facet. </p>
     <h3>Facets</h3>
     <ul>
     <li><code>label</code>: use this facet to specify a custom 
     component for the label.</li>
     <li><code>readOnly</code>: use this facet to specify a custom 
     component for displaying the value of this component when it is
     marked as readonly. The default is a <code>webuijsf:staticText</code>. </li>
     </ul>
     <h3>Client-side JavaScript functions</h3>
 <p>When the component is rendered, a DOM object corresponding to the
 component is created. To manipulate the component on the client side,
 you may invoke functions on the DOM object. With reference to the DOM
 id, to disable the component, invoke 
 <code>document.getElementById(id).setDisabled(true)</code>.
 </p>
     <table cellpadding="2" cellspacing="2" border="1" 
            style="text-align: left; width: 100%;">
     <tbody>
     <tr>
     <td style="vertical-align">
     <code>setDisabled(disabled)</code>
     </td>
     <td style="vertical-align: top">
     Enable/disable the component. Set <code>disabled</code>
     to true to disable the component, or false to enable it.
     </td>
     </tr>
   </tbody>
 </table>
 <h3>Examples</h3>
 <h4>Example 1: Basic Popup Calendar</h4>
 <p>The component gets the options from a managed bean called
 <code>CalendarBean</code>. The value of the component
     <code>selectedDate</code> is bound to a property of the managed
     bean. A label for the component as a whole (<code>label</code>) is
     shown next to the component.  
 </p>
 <p>
 This example shows how to create a simple calendar.
 </p>  
 <p>
  <pre>&lt;webuijsf:calendar id="startDate" 
               selectedDate="#{CalendarBean.startDate}"
               label="Start Date: " /&gt;</pre>
 </p>                      
 <p>Code for the managed bean:<p>
 <h4>CalendarBean.java</h4>
 <code>import java.io.Serializable;<br>
 import java.util.Date;<br>
 import java.util.Calendar;<br>
 import javax.faces.event.ValueChangeEvent;<br>
 <br>
 <br>
 public class CalendarBean {<br>
 &nbsp;&nbsp;&nbsp; <br>
 &nbsp;&nbsp;&nbsp; public CalendarBean() {<br>
 &nbsp;&nbsp;&nbsp; } <br>
 &nbsp;&nbsp;&nbsp; <br>
 &nbsp;&nbsp;&nbsp; private Date startDate = null;<br>
 <br>
 &nbsp;&nbsp;&nbsp; public Date getStartDate() {<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 return this.startDate;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; public void setStartDate(Date startDate)
 {<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 this.startDate = startDate;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 }</code><br>
  The <code>selectAll</code> attribute indicates that the
 <code>Add All</code> and <code>Remove All</code> buttons should be
 shown. A label for the component as a whole (<code>label</code>) is shown
 next to the component (<code>labelOnTop</code> is false). Labels have
 been specified for the list of available items and for the list of
 selected items. The <code>sorted</code> attribute indicates that the options on
 the list will be shown in alphabetical order.</p>
 <h4>Example 2: DateFormat Pattern and Range of Dates configured</h4>
 <p>The component gets the options from a managed bean called
 <code>TravelBean</code>. The value of the component
     <code>selectedDate</code> is bound to a property
     <code>travelDate</code>of the managed
     bean. A label for the component as a whole (<code>label</code>) is
     shown next to the component; the label is retrieved from a message
     bundle. 
 </p>
 <p>The component has been configured to use a pattern for date
     representation consisting of four digits for the year, two for the
     month, and two for the day, separated by dashes. This pattern, set
     using the <code>dateFormatPattern</code> attribute will be used
     regardless of locale. With this date format pattern, the default
     help string will be "YYYY-MM-DD", which is suitable for English,
     but not for other locales where other words are used, so a
     different message is retrieved for each locale
     (<code>dateFormatPattern</code>). </p> 
 <p>
 The component is also configured to restrict the range of dates that
     are valid, so that the first valid date is the day after the day
     the component is viewed, and the last valid date is six months
     from that date.
 <p>
 <pre>
     &lt;webuijsf:calendar id="travelDate" 
         selectedDate="#{TravelBean.travelDate}"
         label="#{msgs.travelDate}"
         dateFormatPattern="yyyy-MM-dd"
         dateFormatPatternHelp="#{msgs.dateFormatPattern}"
         minDate="#{TravelBean.tomorrowsDate}"
         maxDate="#{TravelBean.sixMonthsFromNow}" /&gt;
 </pre>
]]></description>
    </tag>

    <tag>
        <name>checkbox</name>

        <description><![CDATA[
 <p>
 Use the <code>webuijsf:checkbox</code> tag to display a checkbox
 in the rendered HTML page. The tag can be used as a single
 checkbox or as one checkbox among a group of checkboxes. A group
 of checkboxes represents a multiple selection list which can have any
 number of checkboxes selected, or none selected. A checkbox can
 represent a value of a class type such as <code>Boolean, Byte, Character,
 Double, Float, Integer, Long, Short, String</code> or the primitive form
 of one of these class types.
 A checkbox may also represent an application defined object value.
 </p>
 <p>
 A <code>Boolean</code> value is useful for indicating whether
 an item, such as a table row, is selected. A <code>String</code>
 value is useful for passing values for checkbox selections made in the
 interface. An application defined <code>Object</code> value or class
 instance can be used to hold more information related to a checkbox
 selection.
 </p>
 <p>
 A single checkbox can be used to represent several types of data:
 </p>
 <ul>
   <li>a boolean control</li>
   <li>a string value that is related to the checkbox selection</li>
   <li>an object value defined by the application</li>
 </ul>
 <p>
 A group of checkboxes can be used to represent:
 </p>
 <ul>
   <li>string values that are related to the checkbox selections</li>
   <li>object values defined by the application</li>
 </ul>
 <p>
 Note: Another tag for rendering checkboxes is
 <code>webuijsf:checkboxGroup</code>, which imposes a grid layout on a group
 of checkboxes. The <code>checkbox</code> tag is useful in
 situations where the <code>checkboxGroup</code> tag layout is not
 desirable, such as in a table row.
 </p>
 <p>
 </p>
 <h3>Detecting a selected checkbox</h3>
 <p>
 The <code>checkbox</code> tag uses both the <code>selected</code>
 and <code>selectedValue</code> attributes to pass information about
 the checkbox's selection status. The <code>selected</code>
 attribute is used to indicate that the checkbox is selected, and should
 have a check mark displayed in the page. The <code>selectedValue</code>
 attribute is used to pass a data value for the
 checkbox. A checkbox is considered to be selected when the value of the
 <code>selected</code> attribute is equal to the value of
 the <code>selectedValue</code> attribute. You can display a checkbox as
 selected on the initial viewing of the page by assigning the same value
 to the <code>selectedValue</code> and the <code> selected</code> attributes.
 </p>
 <p>
 If the <code>selectedValue</code> attribute is not specified or its
 value is <code>null</code> then the checkbox behaves like a
 boolean control. If the checkbox is selected, the value of the
 <code>selected</code> attribute is a true <code>Boolean</code>
 instance. If the checkbox is not selected, the value of the
 <code>selected</code> attribute will be a false <code>Boolean</code>
 instance.
 </p>
 <p><em>
 Note that a value binding expression that evaluates to a
 primitive value can be assigned to the <code>selected</code>
 and <code>selectedValue</code> attributes.
 </em>
 </p>
 <p>
 When checkboxes are part of a group, an <code>ArrayList</code> of
 selected checkboxes is maintained. If any checkboxes within a group are
 selected, a request attribute whose name is the value of the <code>name</code>
 attribute is created and added to the <code>RequestMap</code>. The
 request attribute value is an <code>ArrayList</code> containing the
 value of the <code>selectedValue</code> attribute of each selected
 checkbox. If no checkboxes are selected, no request attribute is
 created. The <code>selected</code> attribute of each selected checkbox
 within the group will also contain the value of the <code>selectedValue</code>
 attribute of the respective selected checkbox.<br/>
 </p>
 The <code>Checkbox</code> class provides a convenience method for
 obtaining the selected checkboxes in a group:
 </p>
 <p>
 public static ArrayList getSelected(String groupName);
 </p>
 <p> where <code>groupName</code> is the value of the <code>name</code>
 attribtue. Note that unlike the <code>selected</code> and
 <code>selectedValue</code> attributes, the return value of this method
 is always an ArrayList of class instances and not primitive values.
 </p>
 <h3>Using a <code>checkbox</code> tag as a boolean control</h3>
 <p>
 If the <code>selectedValue</code> attribute is not specified or its
 value is <code>null</code> then the checkbox behaves like a
 boolean control.
 </p>
 <p>
 To use the <code>checkbox</code> tag as a boolean control, do not
 specify a value for the <code>selectedValue</code> attribute. The
 checkbox is selected if the <code>selected</code> attribute is not
 null and has the value of a true <code>Boolean</code> instance or
 a <code>boolean</code> primitive value.
 If the checkbox is not selected, then the value of the
 <code>selected</code> attribute is a false <code>Boolean</code> instance
 or <code>boolean</code> primitive.
 </p>
 <p>
 Normally the value of the <code>selectedValue</code> attribute is
 specified as the value of the &lt;input&gt; HTML element. When a
 checkbox is behaving as a boolean control the value of the &lt;input&gt;
 element is the <code>clientId</code> of the checkbox.
 </p>
 <p><em>
 Note that using a boolean checkbox in a group and
 referencing the request attribute for the selected checkboxes is not
 useful, since the value of the request attribute will be an <code>ArrayList
 </code> of indistinguishable <code>true</code> values.
 </em>
 </p>
 <h3>Using a <code>checkbox</code> tag to represent an application defined
 value</h3>
 <p>
 The <code>selectedValue</code> attribute can be assigned an
 application defined object value to represent the value of a selected
 checkbox. If the checkbox is selected, the value of the <code>selected</code>
 attribute is assigned the value of the <code>selectedValue</code>
 attribute.
 </p>
 <p>
 If the value of the <code>selectedValue</code> attribute is an
 application defined object, a converter must be registered
 to convert to and from a <code>String</code> value. The
 converter is used to encode the checkbox value
 as the value of the HTML &lt;input&gt; element and to decode the
 submitted value in a request. In addition the object must support an
 <code>equals</code> method that returns <code>true</code> when the 
 value of the <code>selectedValue</code> attribute is compared to
 the <code>selected</code> attribute value in order to detect a
 selected checkbox.
 </p>
 <h3>Using a <code>checkbox</code> tag as one control in a group</h3>
 <p>
 The <code>name</code> attribute determines whether a
 checkbox is part of a group. A checkbox is treated as part of a group
 of checkboxes if the <code>name</code> attribute of the checkbox is
 assigned a value equal to the <code>name</code> attribute of the other
 checkboxes in the group. In other words, all checkboxes of a group have the
 same <code>name</code> attribute value. The group behaves
 like a multiple selection list, where zero or more checkboxes
 can be selected. The value of the name attribute must
 be unique within the scope of the &lt;form&gt; element containing the
 checkboxes.
 </p>
 <h3>Facets</h3>
 <p>
 The following facets are supported:
 </p>
 <ul>
   <li><em>image</em> If the image facet exists, it is rendered to the
       immediate right hand side of the checkbox.
   <li><em>label</em> If the label facet exists, it is rendered to the
      immediate right of the image, or to the immediate right of the
      checkbox if no image is rendered.
 </ul>
 <h3>Examples</h3>
 <h4>Example 1: Single boolean checkbox with value binding.</h4>
 <code>
 &lt;webuijsf:checkbox id="cb1" selected="#{tldRbCbExample.selectedCb1}"/&gt;
 </code>
 <p>
 The value binding <code>#{tldRbCbExample.selectedCb1}</code> implies that
 there are two methods implemented in the <code>tldRbCbExample</code>
 managed bean.
 <ul>
 <li>public void setSelectedCb1(boolean selected)</li>
 <li>public boolean getSelectedCb1()</li>
 </ul>
 The <code>getSelectedCb1</code> method will be called to determine the checked
 state of the checkbox during rendering.<br/>
 When the tag is first rendered, its initial checked state is
 determined by the return value of <code>getSelectedCb1</code>. If it returns
 <code>true</code> the checkbox will be checked on the HTML page and 
 not checked if it returns <code>false</code><br/>
 When the checkbox is checked by the user the <code>setSelectedCb1</code> method
 will be called with a <code>boolean</code> argument equal to <code>true</code>.
 When it is unchecked the method will be called with a <code>boolean</code>
 argument equal to <code>false</code>.<br/>
 </p>
 <p>No image or label will be displayed by this example.</p>
 <h4>Example 2: Single boolean checkbox with value binding,
 that displays an image and a label.</h4>
 <code>
 &lt;webuijsf:checkbox id="cb2" selected="#{tldRbCbExample.selectedCb2}"
 imageURL="tree_server.gif label="Server"/&gt;
 </code>
 <p>
 The behavior of this checkbox is the same as example one.<br/>
 In this example an image and a label are displayed next to the checkbox. Both
 the <code>imageURL</code> and <code>label</code> attributes may be assigned
 value binding expressions instead of literal values.
 </p>
 <h4>Example 3: Single String valued checkbox with value binding.</h4>
 <code>
 &lt;webuijsf:checkbox id="cb3" label="Printer" selectedValue="Printer"
 selected="#{tldRbCbExample.selectedCb3}"/&gt;
 </code>
 <p>
 The value binding <code>#{tldRbCbExample.selectedCb3}</code> implies that
 there are two methods implemented in the <code>tldRbCbExample</code>
 managed bean. Because the <code>selectedValue</code> attribute is a
 <code>String</code> the expected method signatures will be:
 <ul>
 <li>public void setSelectedCb3(String selected)</li>
 <li>public String getSelectedCb3()</li>
 </ul>
 The <code>getSelectedCb3</code> method will be called to determine the
 checked state of the checkbox during rendering.<br/>
 When the tag is first rendered, its initial checked state is determined by
 the return value of <code>getSelectedCb3</code>. With a <code>String</code>
 valued checkbox, this checkbox will be checked only if the
 <code>getSelectedCb3</code> method returns "Printer", since that is the value
 of the checkbox as dictated by the <code>selectedValue="Printer"</code>
 attribute. If the <code>getSelectedCb3</code> method returns anything else,
 the checkbox will not be checked.<br/>
 When the checkbox is checked by the user the <code>setSelectedCb3</code>
 method will be called with a <code>String</code> argument equal to "Printer".
 When it is unchecked the method will be called with a null <code>String</code>
 argument.
 </p>
 <h4>Example 4: Single Object valued checkbox with value bindings and a label.</h4>
 <code>
 &lt;webuijsf:checkbox id="cb4" label="Printer"
      selectedValue="#{tldRbCbExample.selectedValueCb4}"
      selected="#{tldRbCbExample.selectedCb4}"
      converter="#{tldRbCbExample.printerConverter}"/&gt;
 </code>
 <p>
 The value bindings <code>#{tldRbCbExample.selectedCb4}</code> and
 <code>#{tldRbCbExample.selectedValueCb4}</code> imply the following methods
 are implemented in the <code>tldRbCbExample</code> managed bean. Let's say
 the object value is an instance of the "Printer" class, then the expected
 method signatures will be:
 </p>
 <p>
 <ul>
 <li>public void setSelectedCb4(Printer selected)</li>
 <li>public Printer getSelectedCb4()</li>
 <li>public void setSelectedValueCb4(Printer selected)</li>
 <li>public Printer getSelectedValueCb4()</li>
 </ul>
 </p>
 A Printer class might look like:
 <p>
 <code><pre>
     public static class Printer {
      private String name;
      private String location;
      public Printer(String name, String location) {
          this.name = name;
          this.location = location;
      }
      public String getName() {
          return name;
      }
      public String getLocation() {
          return location;
      }
      public boolean equals(Printer p) {
          return this.name.equals(p.getName()) &&
                  this.location.equals(p.getLocation());
      }
     };
 </pre>
 </code>
 </p>
 <p>
 Since this is an application defined object value, the application must supply
 a converter, as indicated in the example. The converter attribute's
 value binding expression implies a method in the <code>tldRbCbExample</code>
 managed bean called
 </p>
 <p>
 <code>public Converter getPrinterConverter();</code>.
 </p>
 The converter class might look like:
 <code><pre>
     public class PrinterConverter implements javax.faces.convert.Converter {
      public PrinterConverter() {
      }
      public String getAsString(FacesContext context, 
              UIComponent component, Object value) {
          if (!(value instanceof Printer)) {
              throw new ConverterException("Not a Printer value");
          }
          return ((Printer)value).getName();
      }
      public Object getAsObject(FacesContext context, 
              UIComponent component, String value) {
          if (!value.equals("printer1")) {
              throw new ConverterException("Unrecognized printer: " + value);
          }
          return printerDb.getPrinter("printer1");
      }
     };
 </pre>
 </code>
 </p>
 <p>
 The <code>getSelectedCb4</code> method will be called to determine the
 checked state of the checkbox during rendering.<br/> When the tag
 is first rendered, its initial state is determined by the return value of
 <code>getSelectedCb4</code>. With an <code>Object</code> valued checkbox,
 this checkbox will be checked only if the <code>getSelectedCb4</code> method
 returns a Printer instance that equals the Printer instance returned
 by the <code>getSelectedValueCb4</code> method.<br/>
 If the <code>getSelectedCb4</code> method returns a Printer instance that
 is not equal as determined by
 <code>getSelectedValueCb4().equals(getSelectedCb4())</code> the checkbox
 will not be checked.<br/>
 When the checkbox is checked by the user the <code>setSelectedCb4</code>
 method will be called with the Printer instance returned by the converter.
 </p>
 <h4>Example 5: Grouped Integer valued checkboxes in a table.</h4>
 <p>
 The following example shows a common use case for checkboxes in
 a table. The checkboxes are used to select zero or more rows
 for processing. The checkbox state does not need to be
 stored. The selected row indexes can be obtained directly as
 <code>Integer</code> values from the <code>ArrayList</code> of
 selected checkboxes maintained by the checkbox
 in the action callback <code>#{tldRbCbExample.table5process}</code>.<br/>
 The markup in bold is how you would specify a checkbox tag for this purpose.
 The <code>selectedValue</code> value binding,
 <code>#{tldRbCbExample.currentRow1}</code>
 is implemented to return the current row in the <code>table5row1</code>
 tableRow tag.
 </p>
 <p>
 <code><pre>
     &lt;webuijsf:table id="table5"&gt;
      &lt;webuijsf:tableRow id="table5row1"
          sourceData="#{tldRbCbExample.table5row1data}"
          sourceVar="table5data"
          binding="#{tldRbCbExample.table5row1}"&gt;
          &lt;webuijsf:tableColumn id="col1"&gt;
              &lt;f:facet name="header"&gt;
                  &lt;webuijsf:tableHeader id="header1"
                      deselectAllButton="true"
                      selectAllButton="true"
                      selectId="cb5"/&gt;
              &lt;/f:facet&gt;
              <b>
              &lt;webuijsf:checkbox id="cb5" name="cb5Grp" 
                      selectedValue="#{tldRbCbExample.currentRow1}"&gt;
              &lt;/webuijsf:checkbox&gt;
              </b>
          &lt;/webuijsf:tableColumn&gt;
          &lt;webuijsf:tableColumn id="col2"&gt;
              &lt;f:facet name="header"&gt;
                  &lt;webuijsf:staticText text="Application Data"/&gt;
              &lt;/f:facet&gt;
              &lt;webuijsf:staticText text="#{table5data.text}"/&gt;
          &lt;/webuijsf:tableColumn&gt;
      &lt;/webuijsf:tableRow&gt;
      &lt;f:facet name="tableActionsBottom"&gt;
         &lt;webuijsf:button id="table5process"
              action="#{tldRbCbExample.table5process}"
              text="Process Checked"/&gt;
      &lt;/f:facet&gt;
     &lt;/webuijsf:table&gt;
 </pre>
 </code>
 </p>
 <p>
 See <a href="table.html" target="tagFrame">webuijsf:table</a> for details
 on using the <code>&lt;webuijsf:table&gt;</code> tag and other table child tags
 and facets.
 </p>
 <p>
 </p>
 <p>
 Normally when checkboxes are contained within a <code>webuijsf:tableRow</code>
 the application MUST provide a value binding for the <code>selected</code>
 attribute and any attribute that is expected to maintain its state. This
 is because the table only creates a single instance of the checkbox for
 all rows. It depends on a model to provide the storage for the attribute
 values, as it iterates over the rows in the dataset.<br/>
 In this example, we don't need to maintain the state across requests because
 the rows just need to be selected for processing. Once the processing
 is complete, the checkbox no longer needs to be checked.
 <p>
 The following code shows how the <code>table5process</code> action
 method obtains the selected checkbox values from the request map.
 It calls a static member on <code>Checkbox</code> to return the
 <code>ArrayList</code>
 </p>
 <p>
 <code>public static ArrayList getSelected(String groupName)</code>
 </p>
 <code><pre>
     public void table5process() {
      // Checkbox.getSelected(String groupName) is
      // a static convenience method that obtains the 
      // ArrayList of selected checkboxes from the request map
      // <em>ONLY when the checkboxes are part of a group</em>.
      //
      ArrayList al = Checkbox.getSelected("cb5Grp");
      if (al != null) {
          ListIterator li = al.listIterator();
          while (li.hasNext()) {
              processRow(((Integer)li.next()).intValue());
          }
      }
     }
 </pre></code>
 <p>
 <h4>Example 6: Grouped boolean checkboxes in a table, using value bindings to
 maintain the state.</h4>
 <p>
 This example is similar to Example 5, but it maintains the state of checkboxes
 across requests, by specifying a value binding for the selected attribute.
 A simple way to store the checkbox state is to store the state with the
 row data.
 </p>
 <code>
      &lt;webuijsf:checkbox id="cb6" selected="#{table6data.selected}"&gt;
      &lt;/webuijsf:checkbox&gt;
 </code>
 <p>
 The value binding <code>#{table6data.selected}</code> references a boolean
 member in the row data for storing and retrieving the checkbox state.
 Notice also that it is not necessary to group the checkboxes by specifying
 a value for the <code>name</code> attribute. It is not useful to specify
 boolean checkboxes in a group, in order to obtain the list of selected
 checkboxes from the request map. The list will consist of indistinguishable
 <code>true</code> values; one for each selected checkbox.
 </p>
 <h3>HTML Elements and Layout</h3>
 <p>
 A <code>checkbox</code> is rendered as at least one HTML &lt;span&gt; 
 element and one &lt;input&gt; element of type <em>checkbox</em>. 
 Each checkbox may consist of the following elements and components:
 </p>
 <ul>
   <li>a &lt;span&gt; element</li>
   <li>an &lt;input&gt; element of type <em>checkbox</em></li>
   <li>an optional image, if the <code>imageURL</code>
       attribute or an <code>image</code> facet is specified. If the
       <code>imageURL</code> is specified and no image facet exists
       a <code>com.sun.webui.jsf.component.ImageComponent</code> is created
       and rendered. If an <code>image</code> facet is specified then the 
       component specified by the facet is rendered.</li>
   <li>an optional label, if the <code>label</code>
       attribute or a <code>label</code> facet is specified. If the
       <code>label</code> attribute is specified and no label facet exists
       a <code>com.sun.webui.jsf.component.Label</code> is created and rendered
       If a <code>label</code> facet is specified then 
       the component specified by the facet is rendered.</li>
 </ul>
 <p>
 The id attributes for HTML elements and components are constructed as follows,
 where <em>cid</em> is the <code>clientId</code> of the component
 being rendered.
 </p>
 <ul>
   <li> <em>cid</em><b>_span</b> for the &lt;span&gt; element</li>
   <li> <em>cid</em> for the &lt;input&gt; element</li>
   <li> <em>cid</em><b>_image</b> for the image component if created.</li>
   <li> <em>cid</em><b>_label</b> for the label component if created.</li>
 </ul>
 <h3>Client Side Javascript Functions </h3>
 <ul>
   <li><em>webui.suntheme.checkbox.setChecked(elementId, checked)</em>: Set the 
        checked property for a checkbox with the given element id,
        <em>elementId</em>.
        If <em>checked</em> is true, the checkbox is checked.
        If <em>checked</em> is false, the checkbox is unchecked.</li>
 </ul>
 <p></p>
      <h3>Theme Identifiers</h3>
 <p>
      <lo>
      <li>Cb for the INPUT element</li>
      <li>CbDis for the INPUT element for disabled checkbox</li>
      <li>CbLbl for a LABEL element of a checkbox</li>
      <li>CbLblDis for a LABEL element of a disabled checkbox</li>
      <li>CbImg for an IMG element of a checkbox</li>
      <li>CbImgDis for an IMG element of a disabled checkbox</li>
      </lo>
 </p>
 -->
]]></description>
    </tag>

    <tag>
        <name>checkboxGroup</name>

        <description><![CDATA[
 <p>
      Use the <code>webuijsf:checkboxGroup</code> tag to display two or more
      check boxes in a grid layout in the rendered HTML page. The
      <code>webuijsf:checkboxGroup</code> tag attributes that you
      specify determine how the check boxes are displayed. 
 </p>
 <p>
      If the <code>label</code> attribute is specified a
      <code>com.sun.webui.jsf.component.Label</code> component
      is rendered before the first checkbox and
      identifies the checkbox group. The label component's
      <code>for</code> attribute is 
      set to the <code>id</code> attribute of the first checkbox in
      the rendered HTML page.
 </p>
 <p>
      The check boxes are laid out in rows and columns in an HTML 
      &lt;table&gt; element. The number of rows is defined by the length 
      of the items array. The number of columns is defined by the columns
      attribute. The default layout is a single vertical column.
 </p>
 <p>
 </p>
 <p>
      The <code>items</code> attribute must be a value binding expression.
      The value binding expression assigned to the <code>items</code>
      property evaluates to an <code>Object</code> array of 
      <code>com.sun.webui.jsf.model.Option</code> instances. Each
      instance represents one checkbox. The <code>value</code> property
      of an <code>Option</code> instance represents the value of a
      selected checkbox.
      If the <code>items</code> array is empty nothing is rendered.
 </p>
 <p>  
      Zero or more check boxes may be selected.
      The <code>selected</code> attribute must also be a value binding
      expression that is evaluated to read and write an <code>Object</code>
      array. When an array is read from the value binding expression,
      it identifies the selected checkboxes. Each element in the array
      is an <code>Object</code> value. Each <code>Object</code> value must
      be equal to the value property of at least one <code>Option</code>
      instance specified in the array obtained from the value binding
      expression assigned to the <code>items</code> attribute.
 </p>
 <p>
      The write method of the <code>selected</code> attribute's value
      binding expression is called during the <code>UPDATE_MODEL_PHASE</code>
      of the JSF lifecyle. If one or more checkboxes are selected
      an <code>Object</code> array is passed as an argument to the
      write method. This array contains the <code>Object</code>
      values of the selected checkboxes.
 </p>
      <h3>HTML Elements and Layout</h3>
 <p>
      A <code>webuijsf:checkboxGroup</code> renders one
      <code>com.sun.webui.jsf.component.Checkbox</code> component for
      each element in the <code>items</code> array.
      See <a href="checkbox.html" target="tagFrame">webuijsf:checkbox</a> for
      details on the HTML elements and components rendered for a 
      checkbox.
 </p>
 <p>
      The value of the <code>name</code> attribute of each 
      <code>Checkbox</code> component rendered is assigned the
      <code>clientId</code> of the <code>CheckboxGroup<code>
      component instance associated with this tag. The <code>id</code>
      attribute of each <code>Checkbox</code> component rendered 
      is formed as follows, where <em>cbgrpid</em> is the id of the
      <code>CheckboxGroup</code> instance and <em>N</em> is the nth
      checkbox.
 </p>
      <ul>
      <li> <em>cbgrpid_N</em></li>
      </ul>
 <p>
      See <a href="checkbox.html" target="tagFrame">webuijsf:checkbox</a> for
      details on how the id properties of the components that make up the 
      checkbox are defined.
 </p>
      <h3>Client Side Javascript Functions</h3>
 <p>
      None.
 </p>
      <h3>Example</h3>
      <b>Example 1: Create a checkbox group</b>
 <p>
      <code>
      &nbsp;&lt;webuijsf:checkboxGroup items="#{rbcbGrp.selections}"</br>
      &nbsp;&nbsp;&nbsp;&nbsp;label="#{rbcbGrp.cbGrpLabel}"</br>
      &nbsp;&nbsp;&nbsp;&nbsp;toolTip="cbgrp-tooltip"</br>
      &nbsp;&nbsp;&nbsp;&nbsp;disabled="false"</br>
      &nbsp;&nbsp;&nbsp;&nbsp;tabIndex="4"</br>
      &nbsp;&nbsp;&nbsp;&nbsp;selected="#{rbcbGrp.cbvalue}"&gt;</br>
      &nbsp;&lt;/webuijsf:checkboxGroup&gt;</br>
      </code>
 </p>
 <p>
      This example creates a checkbox group with an identifying
      label for the group before the first checkbox. The 
      data for the checkboxes is obtained from the value binding
      expression <code>#{rbcbGrp.selections}</code>. <code>rbcbGrp</code>
      is an application defined managed bean and provides the values for
      other attributes such as <code>selected</code> to receive the
      value of the selected checkboxes in the group.
 </p>
      <h3>Theme Identifiers</h3>
 <p>
      <ul>
      <li>CbGrp for the TABLE element.</li>
      <li>CbGrpCpt for the TD element containing the group label</li>
      <li>CbGrpLbl for the LABEL element used as the CAPTION</li>
      <li>CbGrpLblDis for the LABEL used as the CAPTION if the group is disabled</li>
      <li>CbGrpRwEv for even TR elements</li>
      <li>CbGrpRwOd for odd TR elements</li>
      <li>CbGrpClEv for even TD elements</li>
      <li>CbGrpClOd for odd TD elements</li>
      <li>Cb for the INPUT element</li>
      <li>CbDis for the INPUT element for disabled check box </li>
      <li>CbLbl for a LABEL element of a check box</li>
      <li>CbLblDis for a LABEL element of a disabled check box</li>
      <li>CbImg for an IMG element of a check box</li>
      <li>CbImgDis for an IMG element of a disabled check box</li>
      <li>CbGrp - for the <em>span</em> element that encloses the
        entire set of elements rendered for the <code>checkboxGroup</code>.
      </li>
      </ul>
 </p>
      -->
]]></description>
    </tag>

    <tag>
        <name>commonTask</name>

        <description><![CDATA[
 <p>
 Use the <code>webuijsf:commonTask</code> tag to create a single
 task within a common tasks section or common tasks group. </p>
 <p>
 Tasks can be used to invoke simple actions that can be performed in a
 single dialog, or to start a wizard to aid in performing a complex action, 
 or to quickly navigate to a
 particular area of the application. The tasks can be grouped into
 categories of related tasks.</p>
 <p>The common tasks section is created with the following tags:
 </p>
 <ul>
 <li>
 <p><code>webuijsf:commonTasksSection</code>
 tag is used to define the structure of the common task area, <br>
 and is a container for <code>webuijsf:commonTasksGroup</code>
 tags. </p>
 </li>
 <li>
 <p><code>webuijsf:commonTasksGroup</code> tag is used to define
 the groups of tasks, <br>
 and is a container for <code>webuijsf:commonTask</code>
 tags.</p>
 </li>
 <li>
 <p><code>webuijsf:commonTask</code> tag is used to define each task.</p>
 </li>
 </ul>
  <p>
 The <code>webuijsf:commonTasksGroup </code>is <em>not</em> required
 as a container for <code>webuijsf:commonTask</code> tags. Tasks can be
 ungrouped by placing the <code>webuijsf:commonTask</code> tags
 directly in the <code>webuijsf:commonTasksSection</code> tag.</p>
 <p>
 See the documentation for the <a href="commonTasksSection.html"><code>webuijsf:commonTasksSection</code></a>
 and <a href="commonTasksGroup.html"><code>webuijsf:commonTasksGroup</code></a>
 tags for more information about those tags.</p>
 <h3>HTML Elements and Layout</h3>
 <p>The commonTask component renders XHTML <code>&lt;span&gt;</code> and <code>&lt;a&gt;</code>
 elements within table rows rendered by the commonTasksSection
 component. Each task is a link that can be used to redirect users
 to a page where they can perform a particular task. </p>
 <p>The following diagram shows the relative locations of the common
 task section's areas for which you can define content, and the
 attributes or facets that can be used for each area. The diagram
 shows the default two-column layout. A single column or multiple column
 layout would contain similar content areas.
 </p>
 <p>The areas that are specified with <code>webuijsf:commonTask</code>
 tags are highlighted in blue. The grayed out areas
 are controlled with <code>webuijsf:commonTasksSection</code> and 
 <code>webuijsf:commonTasksGroup</code> tags, but are shown here for context.
 </p>
 <table
 style="width: 100%; text-align: left; background-color: rgb(232, 232, 232);"
 border="1" cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td colspan="3" rowspan="1"
 style="vertical-align: top; width: 40%; background-color: rgb(232, 232, 232);"><span
 style="color: rgb(153, 153, 153);">Common Tasks Section Title (<code>title</code>
   attribute)</span><br>
 </td>
 </tr>
 <tr>
 <td colspan="3" rowspan="1"
 style="vertical-align: top; width: 40%;"><span
 style="color: rgb(153, 153, 153);">Help text (<code>helpText</code> attribute 
  or <code>help</code> facet)</span><br></td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; width: 40%; background-color: rgb(232, 232, 232);"><span
 style="color: rgb(153, 153, 153);">Common Task Group 1 Title (<code>title</code> attribute)</td>
 <td colspan="1" rowspan="2"
 style="width: 5%; vertical-align: top;"><br>
 </td>
 <td
 style="vertical-align: top; width: 40%; background-color: rgb(232, 232, 232);"><span
 style="color: rgb(153, 153, 153);">Common Task Group 2 Title (<code>title</code> attribute)</span> 
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 40%;">
 <table
 style="width: 100%; text-align: left; background-color: rgb(210, 224, 235);"
 border="1" cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;">Image<br>
 (<code>icon</code> or <br>
 <code>imageUrl</code> attribute)
 <br>
 <br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);"><span
 style="color: rgb(0, 0, 0);">Common Task 1 Text <br>(<code>text</code> attribute or<br>
 <code>taskAction</code> facet)</span><br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);"><span
 style="color: rgb(0, 0, 0);">Info button <br>
 <code>(infoText</code> or <code>infoTitle</code> attribute <br>
 or <code>infoPanel</code> facet)</span><br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;">Image<br>
 (<code>icon</code> or <br>
 <code>imageUrl</code> attribute)
 </td>
 <td style="vertical-align: top; color: rgb(0, 0, 0);">Common Task
 2 Text <br>(<code>text</code> attribute or<br>
 <code>taskAction</code> facet)</span><br> </td>
 <td style="vertical-align: top; color: rgb(0, 0, 0);">Info
 button<br>
 <code>(infoText</code> <span style="color: rgb(0, 0, 0);">or
 <code>infoTitle </code></span>attribute <br>
 or <code>infoPanel </code>facet) </td>
 </tr>
 <tr>
 <td colspan="3" rowspan="1" style="vertical-align: top;"><small><span
 style="font-style: italic;">Areas below are displayed when the info
 button is clicked.</span></small><br>
 </td>
 </tr>
 <tr>
 <td colspan="3" rowspan="1" style="vertical-align: top;">Information
 panel title (<code>infoTitle</code> attribute)<br>
 <br>
 Information text (<code>infoText</code> attribute <br>
 or <code>infoPanel</code> facet)<br>
 </td>
 </tr>
 <tr>
 </tr>
 <tr>
 <td colspan="3" rowspan="1" style="vertical-align: top;">Link
 to another page (<code>infoLinkText</code> and <code>infoLinkUrl</code>
 attributes, or <code>infoLink</code> facet)<br>
 </td>
 </tr>
 </tbody>
 </table>
 <br>
 </td>
 <td style="vertical-align: top; width: 40%;">
 <table
 style="width: 100%; text-align: left; background-color: rgb(210, 224, 235);"
 border="1" cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;">Image<br>
 (<code>icon</code> or <br>
 <code>imageUrl</code> attribute
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);"><span
 style="color: rgb(0, 0, 0);">Common Task 1 Text <br>(<code>text</code> attribute or<br>
 <code>taskAction</code> facet)</span><br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);"><span
 style="color: rgb(0, 0, 0);">Info button <br>
 <code>(infoText</code> or <code>infoTitle</code> attribute <br>
 or <code>infoPanel</code> facet)</span><br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;">Image<br>
 (<code>icon</code> or <br>
 <code>imageUrl</code> attribute)
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);"><span
 style="color: rgb(0, 0, 0);">Common Task 2 Text <br>(<code>text</code> attribute or<br>
 <code>taskAction</code> facet)</span><br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);"><span
 style="color: rgb(0, 0, 0);">Info button <br>
 <code>(infoText</code> or <code>infoTitle</code> attribute <br>
 or <code>infoPanel</code> facet)</span><br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;">Image<br>
 (<code>icon</code> or <br>
 <code>imageUrl</code> attribute)
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);"><span
 style="color: rgb(0, 0, 0);">Common Task 3 Text <br>(<code>text</code> attribute or<br>
 <code>taskAction</code> facet)</span><br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);"><span
 style="color: rgb(0, 0, 0);">Info button <br>
 <code>(infoText</code> or <code>infoTitle</code> attribute <br>
 or <code>infoPanel</code> facet)</span><br>
 </td>
 </tr>
 </tbody>
 </table>
 </td>
 </tr>
 </tbody>
 </table>
 <br>
 <br>
 <h3>Configuring the <code>webuijsf:commonTask</code> tag </h3>
 <p>For the basic configuration of the <code>webuijsf:commonTask</code>
 tag, you can provide the task text with the <code>text</code>
 attribute, and specify the page that must be navigated to by using the
 <code>actionExpression</code> attribute or by using one of the 
 client side JavaScript attributes such as <code>onClick</code>.  
 A link that displays the specified <code>text</code> value 
 is created to invoke the action. 
 <p>
 You can configure the <code>webuijsf:commonTask</code> tag so
 that the task includes an information icon after the task text. 
 When the user clicks the icon, 
 an information panel opens below the task.
 To cause the information icon to be rendered, you should set one or both 
 of the <code>infoText</code> and <code>infoTitle</code>
 attributes. Use <code>infoText</code> to specify the text to display in the information
 panel, and <code>infoTitle</code>
 to supply a title for the information panel.  You
 can include a link within the
 information panel by specifying the <code>infoLinkText</code> and <code>infoLinkUrl</code>
 attributes. The link is displayed at the bottom of the information
 panel. </p>
 <p>You can also use facets to create the task and the information panel
 with other components. See the <a href="commonTask-edit.html#facets">Facets</a> section for more
 information.</p>
 <p>You can display a graphic image in front of the task by using the <code>icon</code>
 attribute to specify a theme image key. The key <code>COMMON_TASK_OVERVIEW</code>
 will generate an image that can be used to mark tasks that are for
 overview information about the task. You can also use the <code>imageUrl</code>
 attribute to specify the URL path to an image. 
 </p>
 <h3><a name="facets">Facets</a></h3>
 <p> The <code>webuijsf:commonTask</code> tag supports the following
 facets:
 </p>
 <table style="width: 100%; text-align: left;" border="1" cellpadding="2"
 cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;"><code>taskAction</code><br>
 </td>
 <td style="vertical-align: top;">Used to define a custom component to be 
 displayed for the task.  The component that you specify in this facet 
 should invoke an action for the task. See <a href="#examples">Examples</a>
 to see how to use the facet.</td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>infoLink</code><br>
 </td>
 <td style="vertical-align: top;">Used to define a custom component to
 be displayed in the information panel, to replace the link that is
 created with the <code>infoLinkText</code> and <code>infoLinkUrl</code>
 attributes.<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>infoPanel</code><br>
 </td>
 <td style="vertical-align: top;">Used to create the content of
 the information panel, to replace the content that is created with the <code>infoText</code>
 and <code>infoTitle</code> attributes.  When you use this facet,
 the info button is rendered just as it is for the <code>infoText</code>
 and <code>infoTitle</code> attributes. You cannot specify your own
 info button.  Note that you must handle the formatting of the
 output that appears in the infomation panel. For example, you might use
 <code>webuijsf:panelGroup</code> and CSS syles, to control
 spacing. See <a href="#examples">Examples</a> to see how to use the facet.</td>
 </tr>
 </tbody>
 </table>
 <h3><a name="examples"> Examples</a></h3>
 <h4>Example 1: Creating tasks with tag attributes</h4>
 <code>&lt;webuijsf:commonTasksSection id="tasks1" title =
 "#{tasks.tskTtl}"&gt; <br>
 &nbsp;&nbsp; &lt;webuijsf:commonTaskGroup id="Taskgroup1"
 title="#{tasks.grpTtl}" &gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTask id="task1"
 text="#{tasks.tskTxt1}" actionExpression="task1" /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTask id="task2"
 text="#{tasks.tskTxt2}" actionExpression="task2"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTask id="task3" 
 text="#(tasks.tskTxt3)" onClick="popup();return false;"/&gt;<br>
 &nbsp; &nbsp; &lt;/webuijsf:commonTaskGroup&gt;<br>
 &lt;/webuijsf:commonTasksSection&gt;</code><br>
 <br>
 <h4>Example 2: Creating a task with the <code>taskAction</code>
 facet</h4>
 <code>&lt;webuijsf:commonTasksSection id="tasks1" title =
 "#{tasks.tskTtl}"&gt; <br>
 &nbsp; &lt;webuijsf:commonTaskGroup id="Taskgroup1"
 title="#{tasks.grpTtl}" &gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTask id="task1" &gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;f:facet name="taskAction" &gt; <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:hyperlink
 id="taskLink" text="#{tasks.facetLink}"
 actionExpression="linkAction"/&gt; <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:commonTask&gt;&nbsp; <br>
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTask id="task2"
 text="#{tasks.tskTxt2}" actionExpression="task2" /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTask id="task3" 
 text="#(tasks.tskTxt3)" onClick="popup();return false;"/&gt;<br>
 &nbsp; &lt;/webuijsf:commonTaskGroup&gt;<br>
 &lt;/webuijsf:commonTasksSection&gt;<br>
 </code> <br>
 <h4>Example 3: Displaying a task's toggled info panel by using tag
 attributes</h4>
 <code> &lt;webuijsf:commonTasksSection id="tasks1" title =
 "#{tasks.tskTtl}"&gt;<br>
 &nbsp;&nbsp; &lt;webuijsf:commonTaskGroup id="Taskgroup1"
 title="#{tasks.grpTtl}" &gt;<br>
 &nbsp;&nbsp; &nbsp; &nbsp; &lt;webuijsf:commonTask id="task1"
 text="#{tasks.tskTxt1}" actionExpression="task1" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 infoTitle = "#{tasks.tskTtl1}" infoText="#{task.tskTxt1}" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 infoLinkText="#{tasks.lnkTxt}" infoAction="task1Help"/&gt;<br>
 &nbsp; &nbsp; &nbsp;&nbsp; &lt;webuijsf:commonTask id="task2"
 text="#{tasks.tskTxt2}" actionExpression="task2" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 infoTitle = "#{tasks.tskTtl2}" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 infoLinkText="#{tasks.lnkTxt2}" infoAction="task2Help"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 infoText="#{tasks.tskTxt2}"/&gt;<br>
 &nbsp;&nbsp; &lt;/webuijsf:commonTaskGroup&gt;<br>
 &lt;/webuijsf:commonTasksSection&gt;</code> <br>
 <h4>Example 4: Using the <code>infoPanel</code> facet to display
 toggled info panel</h4>
 <p><code>&lt;webuijsf:commonTasksSection id="tasks1" title =
 "#{tasks.tskTtl}"&gt;<br>
 &nbsp;&nbsp; &lt;webuijsf:commonTaskGroup id="Taskgroup1"
 title="#{tasks.grpTtl}" &gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTask id="task1"
 text="#{tasks.tskTxt1}" actionExpression="task1" /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;f:facet
 name="infoPanel"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:panelGroup id="panelGrp1"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:staticText id="staticText1" text="#{tasks.tskInf}"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:image id="image2" url="/images/dot.gif"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:panelGroup&gt;<br>
 &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &lt;/f:facet&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:commonTask&gt;&nbsp; <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTask id="task2"
 text="#{tasks.tskTxt2}"<br>
 &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
 &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; actionExpression="task2" infoTitle =
 "#{tasks.lnkTtl2}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 infoText="#{tasks.tskTxt2}"/&gt;<br>
 &nbsp; &lt;/webuijsf:commonTaskGroup&gt;<br>
 &lt;/webuijsf:commonTasksSection&gt; </code><br>
 </p>
 <h4>Example 5: Using the infoLink facet to add a link to info panel</h4>
 <code>&lt;webuijsf:commonTasksSection id="tasks1" title ="#{tasks.tskTtl}"&gt;<br>
 &nbsp; &lt;webuijsf:commonTaskGroup id="Taskgroup1"
 title="#{tasks.grpTtl}" &gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTask id="task1"
 text="#{tasks.tskTxt1}" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 actionExpression="task1" infoTitle = "#{task.tskTtl1}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 infoText="#{task.tskTxt1}" infoLinkText="#{task.lnkTxt}" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 infoAction="task1Help" /&gt;<br>
 &nbsp; &nbsp;&nbsp; &lt;webuijsf:commonTask id="task2"
 text="#{tasks.tskTxt2}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 actionExpression="task2" infoTitle = "#{task.tskTtl2}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 infoText="#{task.tskTxt2}"&gt;<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &lt;f:facet
 name="infoLink"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:hyperlink id="link" text="#{task.PnlLnk}"
 url="http://www.google.com"/&gt;&nbsp; <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/f:facet&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:commonTask&gt;<br>
 &nbsp; &lt;/webuijsf:commonTaskGroup&gt;<br>
 &lt;/webuijsf:commonTasksSection&gt;</code><br>
]]></description>
    </tag>

    <tag>
        <name>commonTasksGroup</name>

        <description><![CDATA[
 <p>
 Use the <code>webuijsf:commonTasksGroup</code> tag to create a
 group of related tasks within a common tasks section. The common
 tasks  * group displays the contained tasks together in the common tasks
 section, under an appropriate title that you specify. </p>
 <p>
 The common tasks section is created with the following tags:</p>
 <ul>
 <li>
 <p><code>webuijsf:commonTasksSection</code>
 tag is  used to define the structure of the common task area, <br>
 and is a container for <code>webuijsf:commonTasksGroup</code>
 tags. </p>
 </li>
 <li>
 <p><code>webuijsf:commonTasksGroup</code> tag is used to define
 the groups of tasks, <br>
 and is a container for <code>webuijsf:commonTask</code>
 tags.</p>
 </li>
 <li>
 <p><code>webuijsf:commonTask</code> tag is used to define each task.</p>
 </li>
 </ul>
 <p>
 The <code>webuijsf:commonTasksGroup </code>is <em>not</em> required
 as a container for <code>webuijsf:commonTask</code> tags. Tasks can be
 grouped or ungrouped within the common tasks section.
 </p>
 <p>
 See the documentation for the <a href="commonTasksSection.html"><code>webuijsf:commonTasksSection</code></a>
 and <a href="commonTask.html"><code>webuijsf:commonTask</code></a>
 tags for more information about those tags.</p>
 <p>
 <h3>HTML Elements and Layout</h3>
 <p>
 The commonTasksGroup component renders XHTML <code>&lt;div&gt; </code>and
 <code>&lt;span&gt; </code>elements. The
 following diagram shows the relative location of the component's areas
 for which you can define content, and the attributes or facets that can
 be used for each area. The diagram shows the default two-column layout. A
 single column or  multiple column layout would contain similar content areas. </p>
 <p>
 The areas that are specified with the <code>webuijsf:commonTasksGroup</code>
 tag are highlighted in blue. The grayed out areas
 are controlled with 
 <code>webuijsf:commonTasksSection</code> and <code>webuijsf:commonTask</code>
 tags, but are shown here for context.</p>
 <br />
 <table
 style="width: 100%; text-align: left; background-color: rgb(232, 232, 232);"
 border="1" cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td colspan="3" rowspan="1"
 style="vertical-align: top; width: 40%; background-color: rgb(232, 232, 232);"><span
 style="color: rgb(153, 153, 153);">Common Tasks Section Title (</span><code
 style="color: rgb(153, 153, 153);">title</code><span
 style="color: rgb(153, 153, 153);"> attribute)</span><br>
 </td>
 </tr>
 <tr>
 <td colspan="3" rowspan="1"
 style="vertical-align: top; width: 40%;"><span
 style="color: rgb(153, 153, 153);">Help text (<code>helpText</code>
 attribute or <code>help</code> facet) </span><br>
 <br>
 </td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; width: 40%; background-color: rgb(210, 224, 235);">Common Task
 Group 1 Title (<code>title</code> attribute) </td>
 <td colspan="1" rowspan="2"
 style="width: 5%; vertical-align: top;"><br>
 </td>
 <td
 style="vertical-align: top; width: 40%; background-color: rgb(210, 224, 235);">Common Task
 Group 2 Title (<code>title</code> attribute) </td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 40%;">
 <table style="width: 100%; text-align: left;" border="1"
 cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Image<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Common Task
 1 Text<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Info
 <br>
 button<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Image<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Common Task
 2 Text<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Info<br>
 button<br>
 </td>
 </tr>
 </tbody>
 </table>
 <br>
 </td>
 <td style="vertical-align: top; width: 40%;">
 <table style="width: 100%; text-align: left;" border="1"
 cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Image<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Common Task
 1 Text<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Info
 <br>
 button<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Image<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Common Task
 2 Text<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Info<br>
 button<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Image<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Common Task
 3 Text<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Info<br>
 button<br>
 </td>
 </tr>
 </tbody>
 </table>
 </td>
 </tr>
 </tbody>
 </table>
 <br>
 <br>
 <h3><a name="usage"></a>Configuring the <code>webuijsf:commonTasksGroup</code>
 tag</h3>
 <p>You can specify a title for the task group by using the <code>title</code>
 attribute. </p>
 <h3><a name="#facets">Facets</a></h3>
 None.
 <h3> <a name="#examples">Examples</a></h3>
 <h4>Example1: Grouping tasks using a <code>webuijsf:commonTasksGroup</code>
 component</h4>
 <code>&lt;webuijsf:commonTasksSection id="tasks1" title =
 "#{tasks.tskTtl}"&gt; <br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTaskGroup id="Taskgroup1"
 title="#{tasks.grpTtl}"&gt;<br>
 &nbsp; &nbsp; &nbsp;&nbsp; &lt;webuijsf:commonTask id="task1"
 text="#{tasks.tskTxt1}" action="task1" /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTask id="task2"
 text="#{tasks.tskTxt2}" action="task2" /&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:commonTaskGroup&gt;<br>
 &lt;/webuijsf:commonTasksSection&gt;<br>
 <br>
 </code><br>
]]></description>
    </tag>

    <tag>
        <name>commonTasksSection</name>

        <description><![CDATA[
 <p>
 Use the <code>webuijsf:commonTasksSection</code> tag to 
 create a page or area of a page to present a number of tasks that 
 users might commonly perform in the web application. The tasks 
 typically are intended to make it easier for users to perform 
 actions that could also be done using various features of the application.
 <br>
 <p>
 Tasks can be used to invoke simple actions, or to start a wizard to
 aid in performing a complex action, or to quickly navigate to a 
 particular area of the application. The tasks can be grouped into
 categories of related tasks.<br>
</p>
The common tasks section is created with the following tags:<br>
<ul>
 <li>
 <p><code>webuijsf:commonTasksSection</code> tag is
 used to define the structure of the common task area, <br> 
 and is a container for <code>webuijsf:commonTasksGroup</code>
 tags and <code>webuijsf:commonTask</code> tags. </p>
   </li>
 <li><p><code>webuijsf:commonTasksGroup</code> tag is optionally used to
 define groups of tasks, and is a container for 
 <code>webuijsf:commonTask</code> tags. <br>
  </p>
  </li>
 <li>
<p><code>webuijsf:commonTask</code> tag is used to define each task.</p>
 </li>
 </ul>
 <p>See the documentation for the <a href="commonTasksGroup.html">
 <code>webuijsf:commonTasksGroup</code></a> 
 and <a href="commonTask.html"><code>webuijsf:commonTask</code></a>
 tags for more information about those tags.
 <br>
 </p>
 <h3>HTML Elements and Layout</h3>
 <p>The commonTasksSection component renders XHTML <code>&lt;div&gt; </code>
 and <code>&lt;table&gt; </code>elements. The component will accept any
 number of task groups and tasks, and distribute them on the page so that 
 they are visually balanced into columns of roughly equal size. <br>
 </p>
 <p>The following diagram shows the relative location of the component's areas
 for which you can define content, and the attributes or facets that can
 be used for each area. The diagram shows the default two-column layout. A
 single column or multiple column layout would contain similar content areas.
 </p>
 <p>The areas that are specified with the <code>webuijsf:commonTasksSection</code>
 tag&nbsp; attributes are highlighted in blue. The grayed out areas are 
 controlled with <code>webuijsf:commonTasksGroup</code> and 
 <code>webuijsf:commonTask</code> tags, but are shown here for context.<br>
 <br>
 <table style="width: 100%; text-align: left; background-color: rgb(232, 232, 232);"
 border="1" cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td colspan="3" rowspan="1"
 style="vertical-align: top; width: 40%; background-color: rgb(210, 224, 235);">
 <span style="color: rgb(0, 0, 0);">Common Tasks Section Title 
 (<code>title</code> attribute)</span><br>
 </td>
 </tr>
 <tr>
 <td colspan="3" rowspan="1"
 style="vertical-align: top; width: 40%; background-color: rgb(210, 224, 235);">
 <span style="color: rgb(0, 0, 0);">Help text (</span><code
 style="color: rgb(0, 0, 0);">helpText</code><span
 style="color: rgb(0, 0, 0);"> attribute or </span><code
 style="color: rgb(0, 0, 0);">help</code><span
 style="color: rgb(153, 153, 153);"><span style="color: rgb(0, 0, 0);">
 facet)</span><br>
 </span></td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 40%; background-color: rgb(232, 232, 232);">
 <span style="color: rgb(153, 153, 153);">Common Task Group 1 Title</span><code
 style="color: rgb(153, 153, 153);"></code><span
 style="color: rgb(153, 153, 153);"></span> </td>
 <td colspan="1" rowspan="2"
 style="width: 5%; vertical-align: top;"><br>
 </td>
 <td
 style="vertical-align: top; width: 40%; background-color: rgb(232, 232, 232);">
 <span style="color: rgb(153, 153, 153);">Common Task Group 2 Title (</span><code
 style="color: rgb(153, 153, 153);">title</code><span
 style="color: rgb(153, 153, 153);"> attribute)</span> </td>
 </tr>
 <tr>
 <td style="vertical-align: top; width: 40%;">
 <table style="width: 100%; text-align: left;" border="1"
 cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Image<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Common Task 1 Text<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Info
 <br>
 button<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Image<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Common Task 2 Text<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Info<br>
 button<br>
 </td>
 </tr>
 </tbody>
 </table>
 <br>
 </td>
 <td style="vertical-align: top; width: 40%;">
 <table style="width: 100%; text-align: left;" border="1"
 cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Image<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Common Task 1 Text<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Info
 <br>
 button<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Image<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Common Task 2 Text<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Info<br>
 button<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Common Task 3 Text<br>
 </td>
 <td style="vertical-align: top; color: rgb(153, 153, 153);">Info<br>
 button<br>
 </td>
 </tr>
 </tbody>
 </table> 
 </td>
 </tr>
 </tbody>
 </table>
<br>
 <h3><a name="usage"></a>Configuring the <code>webuijsf:commonTasksSection</code>
 tag</h3>
 <p>
 You can configure the title, help text, and number of columns displayed
 in the common tasks section.</p>
 <p><span style="font-weight: bold;">Title:</span> The <code>webuijsf:commonTasksSection</code>
 jsp tag provides the <code>title</code>
 attribute, which you can use to specify the text to display in the
 Common Task Section title. If you do not specify a title, the
 title "Common Tasks" is rendered by default.
 </p>
 <p><span style="font-weight: bold;">Help text:</span> The help text
 that is displayed under the title can be specified with the <code>helpText</code>
 attribute, or the <code>help</code> facet. See the <a
 href="#facets">Facets</a> section for more information about the
 facet. When you use the <code>helpText</code>
 attribute, the specified help text is displayed in a smaller font below
 the title. If you do not specify the help text, the default help
 text is displayed: "To access information about a task select the "i"
 info button."  
 </p>
 <p><span style="font-weight: bold;">Number of Columns:</span> The
 common tasks section displays tasks grouped in two columns by default,
 when there are no task groups, or multiple task groups. If there is one
 task group, a single column layout is used. You can customize
 the number of columns on the common tasks section by setting the <code>columns</code>
 attribute to the number of columns you want to display. For example, if
 you specify <code>columns="3"</code>, the common tasks groups will be
 displayed in three columns.</p>
  <h4>Setting the Page Background Color</h4>
 <p>In a JSP page where you use the <code>webuijsf:commonTasksSection</code>
 tag, you should set the style class to commonTaskbgColor for the body
 tag. For example:
 </p>
 <pre>&nbsp;&lt;webuijsf:body styleClass="#{themeStyles.CTS_BACKGROUND}" &gt;</pre>
 <p>The <code>commonTaskbgColor</code> style class sets the page's
 background color to the same gradient color used in the
 commonTasksSection component. If this color is not used, you might see
 a white space after the common tasks section.</p>
 <h3><a name="facets">Facets</a></h3>
 You can use the commonTasksSection component's <code>help</code> facet
 to specify a different component to use to display the help text. The
 help is rendered below the title by the component that you specify. See
 the <a href="#examples">Examples</a> section for an example that uses
 the <code>help</code> facet.&nbsp;
 <h3><a name="#examples">Examples</a></h3>
 <h4>Example 1: Specifying a custom title</h4>
 <code>&lt;webuijsf:commonTasksSection
 id="tasks1" title = "#{tasks.tskTtl}"&gt; <br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTaskGroup id="Taskgroup1"
 title="#{tasks.grpTtl}"&gt;<br>
 &nbsp; &nbsp; &nbsp;&nbsp; &lt;webuijsf:commonTask id="task1"
 text="#{tasks.tskTxt1}" actio</code><code>nExpression</code><code>="task1"
 /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTask id="task2"
 text="#{tasks.tskTxt2}" actio</code><code>nExpression</code><code>="task2"
 /&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:commonTaskGroup&gt;<br>
 &lt;/webuijsf:commonTasksSection&gt;</code><br>
 <br>
 <h4>Example 2: Overriding the default inline help with the help
 facet</h4>
 <code>&nbsp;&lt;webuijsf:commonTasksSection id="tasks1" title =
 "#{tasks.tskTtl}"&gt; <br>
 &nbsp;&nbsp;&nbsp; &lt;f:facet name="help" &gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:helpInline
 id="commontaskshelp" text="#{tasks.hlpTxt}"/&gt;&nbsp; <br>
 &nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;&nbsp; <br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTaskGroup id="Taskgroup1"
 title="#{tasks.grpTtl}"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTask id="task1"
 text="#{tasks.tskTxt1}" actio</code><code>nExpression</code><code>="task1"
 /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTask id="task2"
 text="#{tasks.tskTxt2}" actio</code><code>nExpression</code><code>="task2"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:commonTaskGroup&gt;<br>
 &nbsp;&lt;/webuijsf:commonTasksSection&gt;</code><br>
 <br>
 <h4>Example 3: Specifying three columns</h4>
 <code>&lt;webuijsf:commonTasksSection id="tasks1" title =
 "#{tasks.tskTtl}" columns="3"&gt; <br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTaskGroup id="Taskgroup1"
 title="#{tasks.grpTtl}"&gt;<br>
 &nbsp; &nbsp; &nbsp;&nbsp; &lt;webuijsf:commonTask id="task1"
 text="#{tasks.tskTxt1}" actionExpression="task1" /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:commonTask id="task2"
 text="#{tasks.tskTxt2}" actio</code><code>nExpression</code><code>="task2"
 /&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:commonTaskGroup&gt;<br>
 &lt;/webuijsf:commonTasksSection&gt;</code><br>
 <br>
The Common Tasks Section component. This encapsulates a number of common task group
 components.
]]></description>
    </tag>

    <tag>
        <name>contentPageTitle</name>

        <description><![CDATA[ <p>Use the <code>webuijsf:contentPageTitle</code>
 tag to display an <code>&lt;h1&gt;</code> heading as a page title, and the
 following optional page elements:</p>
 <ul>
   <li>help text</li>
   <li>page buttons</li>
   <li>page actions</li>
   <li>page view controls</li>
   <li>separator image</li>
 </ul>
 <p>The title text and help text can be specified by using the 
 <code>webuijsf:contentPageTitle</code> tag's attributes, and also by using facets. 
 The page buttons, page actions, and page view controls can only be specified with
 facets. The facets are described in the <a href="#Facets">Facets</a> section.</p>
 <p>The separator image is displayed automatically when you use page buttons that 
 are displayed on the bottom.  You can set the separator attribute to false to 
 prevent the separator from being rendered.</p>
 <h3>HTML Elements and Layout</h3>
 <p>The contentPageTitle component can be used to create just a title for a
 page, or to provide a title and structure to the content area of the
 web application page. The content area is the portion where the
 main content of the page is displayed, and the user can optionally
 interact with the information. </p>
 <p>
 If your application page includes a masthead and breadcrumbs, 
 the <code>webuijsf:contentPageTitle</code> 
 tag should be used after the <a href="masthead.html"><code>webuijsf:masthead</code></a>
 and <a href="breadcrumbs.html"><code>webuijsf:breadcrumbs</code></a> tags.
 If you want to use the contentPageTitle component's other features,
 such as page buttons and actions, you should 
 place the rest of the page content within the <code>webuijsf:contentPageTitle</code>
 tag. You can use the supported facets to place the controls in the page
 along with your content. If you simply want to create a title,
 place the page content outside the <code>webuijsf:contentPageTitle</code>
 tag.</p>
 <p>The <code>webuijsf:contentPageTitle</code>
 tag must be placed in a form if you are using the page controls.</p>
 <p>The following diagram shows the location of the page elements and the names 
 of the facets you can use to specify the content for each area.</p>
 <table border="1" width="100%">
   <tr>
     <td width="50%">Page Title Text (or optional <code>pageTitle</code> facet)</td>
     <td width="50%"><p align="right">Optional <code>pageButtonsTop</code> facet</td>
   </tr>
   <tr>
     <td width="100%" colspan="2">Optional help text or <code>pageHelp</code> facet</td>
   </tr>
   <tr>
     <td width="50%">Optional <code>pageActions</code> facet</td>
     <td width="50%"><p align="right">Optional <code>pageViews</code> facet</td>
   </tr>
   <tr>
     <td width="100%" colspan="2"><p align="center">&nbsp;</p>
     <p align="center">... JSF Page Content ..</p>
     <p align="center">&nbsp;</td>
   </tr>
   <tr>
     <td width="100%" colspan="2"><p align="center">Optional Page Separator or <code>pageSeparator</code>
     facet</td>
   </tr>
   <tr>
     <td width="50%">&nbsp;</td>
     <td width="50%">Optional <code>pageButtonsBottom</code> facet</td>
   </tr>
 </table>
 <p>&nbsp;</p>
 <h3><a name="Facets"></a>Facets</h3>
 <p>
 The <code>webuijsf:contentPageTitle</code> tag supports the facets in the following 
 table.</p> 
 <table style="text-align: left; width: 100%;" border="1"
  cellpadding="2" cellspacing="2">
   <tbody>
     <tr>
       <td style="vertical-align: top;"><code>pageTitle<br>
       </code></td>
       <td style="vertical-align: top;">Specifies component
 tag to use for the title of the content page of the web application. This facet
 overrides the title attribute.<br>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>pageButtonsTop<br>
       </code></td>
       <td style="vertical-align: top;"><p>Specifies the
 buttons to use for the page buttons at the top right of the page. By default 
 no buttons are rendered, so you must use this facet to display top page buttons.
 To display two or more buttons, enclose the <code>webuijsf:button</code> tags within a 
 <a href="panelGroup.html"><code>webuijsf:panelGroup</code></a> tag.</p>
       </td>
     </tr> <tr>
       <td style="vertical-align: top;"><code>pageButtonsBottom<br>
       </code></td>
       <td style="vertical-align: top;"><p>Specifies the buttons to use for
 the page buttons at the bottom right of the page. By default no buttons are
 rendered, so you must use this facet to display bottom page buttons.
 To display two or more buttons, enclose the <code>webuijsf:button</code> tags within a 
 <a href="panelGroup.html"><code>webuijsf:panelGroup</code></a> tag.</p>
       </td>
     </tr>
      <tr>
       <td style="vertical-align: top;"><code>pageHelp</code></td>
       <td style="vertical-align: top;">Specifies a component tag to use
 for brief help text that is displayed under the page title. This facet
 overrides the helptext attribute.<br>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>pageActions</code></td>
       <td style="vertical-align: top;">Specifies component
 tags to use for any components that can be used to launch actions. Tags that
 might be used to launch actions include <code><a href="button.html">webuijsf:button</a></code>
 and <code><a href="dropDown.html">webuijsf:dropDown</a></code>. 
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>pageViews<br>
       </code></td>
       <td style="vertical-align: top;">Specifies a component tag to use to
 allow the user to change the view of the page. The <code>webuijsf:dropDown</code>
 tag can be used to provide a list of views.<br>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>pageSeparator</code></td>
       <td style="vertical-align: top;">Specifies a component tag to use for the 
       separator image, such as the <code>webuijsf:image</code> tag. 
       Display of the separator is controlled by the separator attribute.<br>
       </td>
     </tr>
   </tbody>
 </table>
 <h3>Theme Identifiers</h3>
 TBA
 <h3>Client Side Javascript Functions</h3>
 <p>None.<p>
 <h3>Examples</h3>
 <h4>Example 1:  Using facets for optional contentPageTitle elements</h4>
 <pre>&lt;webuijsf:contentPageTitle title=&quot;Masthead and Page Title Example&quot; helpText=&quot;Help text would go here&quot;&gt;
   &lt;f:facet name=&quot;pageButtonsTop&quot;&gt;
     &lt;webuijsf:panelGroup id=&quot;pageButtonsGroupTop&quot;&gt; 
       &lt;webuijsf:button label=&quot;Save&quot; action=&quot;#{MastheadBean.saveClicked}&quot; /&gt; 
       &lt;webuijsf:button label=&quot;Reset&quot; secondary=&quot;true&quot; action=&quot;#{MastheadBean.resetClicked}&quot; /&gt;
     &lt;/webuijsf:panelGroup&gt; 
   &lt;/f:facet&gt; 
   &lt;f:facet name=&quot;pageButtonsBottom&quot;&gt;
     &lt;webuijsf:panelGroup id=&quot;pageButtonsGroupBottom&quot;&gt; 
       &lt;webuijsf:button label=&quot;Save&quot; action=&quot;#{MastheadBean.saveClicked}&quot; /&gt; 
       &lt;webuijsf:button label=&quot;Reset&quot; secondary=&quot;true&quot; action=&quot;#{MastheadBean.resetClicked}&quot; /&gt;
     &lt;/webuijsf:panelGroup&gt; 
   &lt;/f:facet&gt; 
   &lt;f:facet name=&quot;pageActions&quot;&gt;
     &lt;webuijsf:panelGroup id=&quot;pageActionsGroup&quot;&gt;
       &lt;webuijsf:button label=&quot;Action 1&quot; action=&quot;#{MastheadBean.action1Clicked}&quot; /&gt;
       &lt;webuijsf:button label=&quot;Action 2&quot; action=&quot;#{MastheadBean.action2Clicked}&quot; /&gt;
       &lt;webuijsf:button label=&quot;Action 3&quot; action=&quot;#{MastheadBean.action3Clicked}&quot; /&gt;
     &lt;/webuijsf:panelGroup&gt;
   &lt;/f:facet&gt; 
   &lt;f:facet name=&quot;pageViews&quot;&gt;
     &lt;webuijsf:dropDown label=&quot;View:&quot; items=&quot;#{MastheadBean.views}&quot; /&gt;
   &lt;/f:facet&gt; 
       ... JSF page content ... 
 &lt;/webuijsf:contentPageTitle&gt;</pre>
]]></description>
    </tag>

    <tag>
        <name>dropDown</name>

        <description><![CDATA[
 <p>Use the <code>webuijsf:dropDown</code>
 tag to display a drop down menu to allow users to select one or more
 items from a list. The drop down menu occupies one line of
 the page, and displays one list item. The rest of the list items are
 displayed when the user opens the menu.</p>
 <p>The <code>webuijsf:dropDown</code> tag can be configured to immediately submit the 
 form when the user makes a selection. By default, the drop down menu is used 
 only for selecting items, and does not submit the form. </p>
 <h3>HTML Elements and Layout</h3>
 <p>The dropDown component renders an XHTML <code>&lt;select&gt;</code> 
 element with an optional <code>&lt;label&gt;</code> element. The 
 <code>&lt;option&gt;</code> elements within the <code>&lt;select&gt;</code>
 element are derived from the <code>webuijsf:dropDown</code> tag's <code>items</code>
 attribute.</p>
 <h3>Configuring the <code>webuijsf:dropdown</code> tag</h3>
 <p>Use the <code>items</code> 
 attribute to specify the options to be displayed in the drop down
 menu. The value must be a JavaServer Faces EL expression that identifies an array, 
 a <code>java.util.Collection</code> or a <code>java.util.Map</code> of 
 <code>com.sun.webui.jsf.model.Option</code>.</p>
 <p>The first time the component is rendered, the option that corresponds to the
 value of the <code>selected</code> model object property is marked as selected, 
 using the <code>equals</code> method on the model object. On subsequent displays 
 of the page, the previously selected option is
 redisplayed as the selection. If you want the menu to always show the
 default selection, set the <code>forgetValue</code>
 attribute to true.
 </p>
 <p>To optionally specify a label for the component, use the <code>label</code>
 attribute, or specify a <code>label</code> facet.<br>
 </p>
 <h4>Configuring a Jump Menu</h4>
 <p>A drop down menu can be configured as a jump menu. 
 Jump menus immediately perform some action, such as
 opening a window or navigating to another page, when the user selects
 an item. This action is accomplished by submitting the form immediately
 when the user changes the selection.  By default, the 
 dropDown menu is not a jump menu. The submission of the form does not
 occur until the user activates another component such as a button to submit the form.</p>
 <p>To configure the <code>webuijsf:dropDown</code> tag to render a jump menu, set the 
 <code>submitForm</code> attribute to true. If the jump menu is to be used to 
 navigate to another location, you should also use the <code>navigateToValue</code> 
 attribute and include outcome strings in the drop down menu's list of options.
 In addition, you should set the <code>forgetValue</code> attribute to true to cause the
 dropDown's selected value to be reset when the page is redisplayed. This 
 enables the dropDown to always display the same option initially. </p>
 <p>
 If the jump menu is to perform an action other than navigation, you should
 use the <code>actionListener</code> attribute to bind to a method to handle the action.</p>
 <p>The <code>immediate</code> attribute is useful in a jump menu when you do not want to 
 submit any data entered into the form when a selection is made in the jump menu.</p>
 <h4>Using a Title in the Drop Down Menu</h4>
 <p>You can display a non-selectable title as the first item in a drop down menu. 
 The title might be used to provide a brief instruction for the user, such as
 "Select a page". </p>
 <p>
 To create a title in a drop down menu, when you define your drop down
 menu items in an Option[], you must specify the first Option as type
 OptionTitle along with the string to display. The title is rendered as
 the specified string with dashes before and after the text, to
 differentiate the title from the selectable options.</p>
 <p>
 For example, in this sample backing bean Option, the OptionTitle option is 
 bolded.</p>
 <pre>public BackingFileDropDown() {
                 pageOptions = new Option[4];<span style="font-weight: bold;">
                 pageOptions[0] = new OptionTitle("Select a Page" ); </span> pageOptions[1] = new Option("indexPage", "Main Page" );
                 pageOptions[2] = new Option("printerPage", "Printer Status");
                 pageOptions[3] = new Option("faxPage", "Fax Machines"); 
           }
 </pre>
 <p>In addition, you should
 set the <code>webuijsf:dropDown</code> tag's <code>forgetValue</code>
 attribute to true, to ensure that the title is always displayed in the drop down
 menu when the page is rendered.</p>
 <h4>Grouping Options in the Drop Down Menu</h4>
 <p>The XHTML <code>&lt;select&gt;</code> element can contain an 
 <code>&lt;optgroup&gt;</code> element to define a group of
 related items in a drop down menu. The <code>&lt;optgroup&gt;</code> has a 
 label, and the options within the group are indented in the displayed menu. 
 You can configure the list of items created with the <code>webuijsf:dropDown</code>
 tag to be rendered with <code>&lt;optgroup&gt;</code> elements by setting up your
 backing bean appropriately. A backing bean object that populates the
 drop down menu with grouped options might look as follows.</p>
 <pre>
 public BackingFileDropDown2() {
         actionOptions = new Option[5];
         actionOptions[0] = new OptionTitle("More Actions" );
         actionOptions[1] = new Option("Action1", "Action 1" );
         actionOptions[2] = new Option("Action2", "Action 2");
         actionOptions[2].setDisabled(true);
         actionOptions[3] = new Option("Action3", "Action 3");<br> 
         OptionGroup group = new OptionGroup();
         group.setLabel("ActionGroup");
         Option[] groupedOptions = new Option[3];
         groupedOptions[0] = new Option("Action4", "Action 4");
         groupedOptions[1] = new Option("Action5", "Action 5");
         groupedOptions[2] = new Option("Action6", "Action 6");<
         groupedOptions[2].setDisabled(true);
         group.setOptions(groupedOptions);
         actionOptions[4] = group; 
     }
 </pre>
 <p>The drop down menu that
 is rendered with this property will appear as follows: </p>
 <form  id="menuform1" method="post"
  enctype="application/x-www-form-urlencoded">
   <select class="MnuJmp_sun4" id="menuform1:action_list"
  size="1"
  onchange="webui.suntheme.jumpDropDown.changed('menuform1:action');  return false;">
   <option class="MnuJmpOpt_sun4" value="">&mdash;
 More Actions &mdash;</option>
   <option class="MnuJmpOpt_sun4" value="Action1">Action 1</option>
   <option class="MnuJmpOptDis_sun4" value="Action2"
  disabled="disabled">Action
 2</option>
   <option class="MnuJmpOpt_sun4" value="Action3">Action 3</option>
   <option class="MnuJmpOptSep_sun4" disabled="disabled">------------------------------------------</option>
   <optgroup label="ActionGroup" class="MnuJmpOptGrp_sun4">
   <option class="MnuJmpOpt_sun4" value="Action4">Action 4</option>
   <option class="MnuJmpOpt_sun4" value="Action5">Action 5</option>
   <option class="MnuJmpOptDis_sun4" value="Action6"
  disabled="disabled">Action
 6</option>
   </optgroup>
   </select>
 </form>
 <p>The important points to note in the sample backing bean are:</p>
 <ul>
   <li>
     <p>The OptionGroup <code>group</code> has a <code>setLabel</code>
        method that sets the label of the <code>&lt;optgroup&gt;
     </code>to "ActionGroup".</p>
   </li>
   <li>
     <p>A separator (a series of dashes) is rendered above the optgroup label. 
     By default, the separator is rendered above each optgroup in a drop down menu. 
     The separators can be removed by setting the <code>webuijsf:dropDown</code> tag's 
     <code>separators</code> attribute to false.&nbsp; </p>
   </li>
   <li>
     <p>The <code>group</code>
 is defined as the last item in the <code>actionOptions</code>
 Option instance. The <code>setOptions</code> method sets the
 options of the <code>group</code> to the <code>groupedOptions</code>
 object values.</p>
   </li>
   <li>
     <p>The <code>setDisabled</code> method can be used to disable any of the 
     options in the drop down menu.</p>
   </li>
 </ul>
 <h3>Facets</h3>
 <p>The webuijsf:dropDown tag supports a <code>label</code> facet. Use this facet to 
 specify a custom component for the label. This facet overrides the 
 <code>label</code> attribute.</p>
 <h3>Client-side JavaScript Functions</h3>
 <p>In the functions below, <code>&lt;id&gt;</code> should be the
 generated id of the HTML <code>&lt;select&gt;</code>
 element that is rendered by the dropDown component
 <br>
 <table style="text-align: left; width: 100%;" border="1"
  cellpadding="2" cellspacing="2">
   <tbody>
     <tr>
       <td><code>webui.suntheme.dropDown.setDisabled(&lt;id&gt;,
 &lt;disabled&gt;)</code></td>
       <td>Use this function to enable/disable the drop-down
 menu. < Set <code>&lt;disabled&gt;</code>
 to true to disable the component, or false to enable it.</td>
     </tr>
     <tr>
       <td style="vertical-align: top; text-align: left;"><code>webui.suntheme.dropDown.changed(&lt;id&gt;)</code></td>
       <td>This function is
 automatically invoked by the drop-down menu's <code>onchange</code>
 handler.</td>
     </tr>
     <tr>
       <td style="vertical-align: top; text-align: left;"><code>webui.suntheme.dropDown.getSelectElement(&lt;id&gt;)</code></td>
       <td>Use this function to access the HTML <code>&lt;select&gt;</code>
 element that is rendered by the dropDown component.<br>
       </td>
     </tr>
     <tr>
       <td><code>webui.suntheme.dropDown.getSelectedValue(&lt;id&gt;)</code></td>
       <td>Use this&nbsp;function to get the value of the
 first&nbsp;selected option on the dropDown. If no option is
 selected, this&nbsp; function returns null. </td>
     </tr>
     <tr>
       <td><code>webui.suntheme.dropDown.getSelectedLabel(&lt;id&gt;)</code></td>
       <td>Use this function to get the label of the
 first selected option on the
 dropDown. If no option is selected, this function returns
 null.</td>
     </tr>
   </tbody>
 </table>
 <h3>Examples</h3>
 <h4>Example 1: Drop down menu using backing beans</h4>
 <p>This example uses several backing beans. The options to display in the
 drop down menu are provided in the <code>items</code> attribute, which is set to an EL
 expression that resolves to an <code>airports</code> array in
 the <code>dataBean</code>. The tag
 generates a drop down menu with a label, which is specified with the
 <code>label</code> attribute, and the label text is
 obtained from the <code>chooseDepartureAirport</code>
 property of a <code>msgs</code> bean. The tooltip text is
 provided in a similar way. The <code>selected</code>
 attribute specifies the option to show as selected in the menu, with the value
 stored in the <code>leaveAirport</code> property of the <code>flightSearch</code>
 backing bean.
 <pre>
     &lt;webuijsf:dropDown selected="#{flightSearch.leaveAirport}" 
                  items="#{dataBean.airports}" 
                  id="leaveAirport" 
                  tooltip="#{msgs.chooseAirport}"
                  label="#{msgs.chooseDepartureAirport}" /&gt;
 </pre>
 <p>The <code>dataBean</code> backing bean would include the following definition 
 for the "airports" items:</p>
 <pre>
     private Option[] airports = null;
      // Creates a new instance of backing bean //
     public DataBean() {
         airports = new Option[11];
         airports[0] = new Option("SFO", "San Francisco");
         airports[1] = new Option("OAK", "Oakland");
         airports[2] = new Option("SAN", "San Diego");
         airports[3] = new Option("BOS", "Boston");
         airports[4] = new Option("ARN", "Stockholm");
         airports[5] = new Option("MNL", "Manila");
         airports[6] = new Option("CDG", "Paris");
         airports[7] = new Option("PDX", "Portland");
         airports[8] = new Option("LAX", "Los Angeles");
         airports[9] = new Option("NRT", "Tokyo");
         airports[10] = new Option("TBD", "Future Airport");
         airports[10].setDisabled(true);
     }
     public Option[] getAirports() {
         return airports;
     }
 </pre>
 <h4>Example 2: Drop down menu with label facet</h4>
 <p>This example is the same as Example 1 except that it uses the <code>label</code> facet, 
 which contains a <code>webuijsf:label</code> tag. </p>
 <pre>
     &lt;webuijsf:dropDown selected="#{flightSearch.leaveAirport}" 
                  items="#{dataBean.airports}" 
                  id="leaveAirport" 
                  tooltip="#{msgs.chooseAirport}" &gt;
         &lt;f:facet name="label"&gt;       
              &lt;webuijsf:label text="#{msgs.chooseDepartureAirport}" for="menuform1:leaveAirport"/&gt;
         &lt;/f:facet&gt;
     &lt;/webuijsf:dropDown&gt;
 </pre>
 <h4>Example 3: Jump Drop Down Menu</h4>
 <p>
 This example shows a
 drop down menu that submits the form as soon as the user makes a selection. The
 action of this dropDown component does not move to another page (no action or
 navigation rule has been configured). When the form is submitted, the selected
 value is updated. The value of the DropDown after
 the submit is displayed by the staticText component.</p>
 <pre> &lt;webuijsf:dropDown items="#{dataBean.airports}"
                      submitForm="true"
                      required="true"
                      id="airport"
                      selected="#{dataBean.airport}"&gt;
               &lt;f:facet name="label"&gt;
                   &lt;webuijsf:label text="Set airport:" for="menuform1:airport"/&gt;
               &lt;/f:facet&gt;  
        &lt;/webuijsf:dropDown&gt;
        &lt;p&gt;
        &lt;webuijsf:label text="Current airport: "&gt;
          &lt;webuijsf:staticText text="#{dataBean.airport}" id="blah" /&gt;
        &lt;/webuijsf:label&gt;</pre>
 <h4>Example 4: Jump Drop Down Menu used for Navigation</h4>
 <p>This example shows a drop down menu that allows the user to jump to the page 
 indicated by the selected item. The component is configured with navigateToValue="true", 
 so the action value returned by the component is the value of the selected
 item. The selected value should be an outcome string that is declared in a 
 navigation rule in the <code>faces-config.xml</code> file.</p> 
 <pre>&lt;webuijsf:dropDown submitForm="true" 
                   navigateToValue="true"
                   items="#{DropDownBean.pageOptions}"
                   id="airport"
                   label="Choose your page:"/&gt;       
 </pre> 
 The DropDownBean defines the menu items as shown below.
 <pre>                             
  public BackingFileDropDown3() {        pageOptions = new Option[4];
         pageOptions[0] = new OptionTitle("Select a Page" );             
         pageOptions[1] = new Option("indexPage", "Test App Index" );
         pageOptions[2] = new Option("hyperlinkPage", "HyperLink Test Page");  
         pageOptions[3] = new Option("tablePage", "Table Test Page");  
     }       </pre>
]]></description>
    </tag>

    <tag>
        <name>editableList</name>

        <description><![CDATA[
   <p>Use the webuijsf:editableList tag to display a component that allows users to 
      create and modify an array of strings.
    <h3>HTML Elements and Layout</h3>
    <p>The editableList component consists of a text input field with an Add 
    button, and a list with a Remove button.  To add items to the list, the 
    user types text strings in the input field and clicks Add. To remove 
    items from the list, the user selects items and clicks Remove.  
    An optional Search button can be implemented with a facet to allow the user to 
    search for items to add to the list. </p>
    <p>
    The rendered HTML page uses the <code>&lt;input&gt; </code> and 
    <code>&lt;select&gt;</code> XHTML elements within <code>&lt;table&gt;,
 &lt;div&gt;,</code> and <code>&lt;span&gt;</code> elements to display
 the editable list.</p>
     <h3>Configuring the <code>webuijsf:editableList</code> tag</h3>
     <p>
     The content of the list must be maintained in a managed bean, 
     so you must use the list attribute to bind the component to a model. 
     The value of the list attribute must be an EL expression that corresponds 
     to a managed bean or a property of a managed bean, and it must evaluate 
     to an array of <code>java.lang.String</code>.</p>
     <p>To set the label of the text field, use the
     <code>fieldLabel</code> attribute. To set the label of the
     list box, use the <code>listLabel</code> attribute. To validate
     new items as they are entered, use the <code>fieldValidatorExpression</code> attribute to specify
     a validator method. To validate the contents of the list once the user has finished
     adding and removing items, use the <code>listValidatorExpression</code> attribute to specify
     a validator method.</p> 
     <p>By default, the list box is rendered below the input text field. The 
     <code>listOnTop</code> attribute can be set to true to render the list above
     the input text field. You can also enable users to select more than one 
     item at a time by setting the <code>multiple</code> attribute to true.</p>
     <h3>Facets</h3>  
    <p>The <code>webuijsf:editableList</code> tag supports the 
     facets in the following table. These facets enable you
 to customize the layout of the component.</p>
 <table style="text-align: left; width: 75%;" border="1"
  cellpadding="2" cellspacing="2">
   <tbody>
     <tr>
       <td style="vertical-align: top;"><code>fieldLabel</code></td>
       <td style="vertical-align: top;">Specify a custom
 component for the text field label. <br>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>listLabel</code></td>
       <td style="vertical-align: top;">Specify a custom
 component for the label next to the list box.<br>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>search<br>
       </code></td>
       <td style="vertical-align: top;">Specify a custom
 component for the Search button. The component is rendered on the same row as the
 text field and the Add button, after the Add button. The button should be used to
 provide a way for users to identify an appropriate value to be passed back and displayed
 in the text field.
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>readOnly<br>
       </code></td>
       <td style="vertical-align: top;">Specify a custom
 component for displaying a read-only version of the component</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>header<br>
       </code></td>
       <td style="vertical-align: top;">Specify a header to
 be rendered in a table row above the component.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>footer<br>
       </code></td>
       <td style="vertical-align: top;">Specify a header to
 be rendered in a table row below the component.</td>
     </tr>
   </tbody>
 </table>
   <h3>Client-side JavaScript Functions</h3>
    <p>None.</p> 
     <h3>Examples</h3>
     <h4>Example 1: An editable list that is sorted and input is validated</h4>
     <p>This example uses a backing bean called <code>ListBean</code> with a property 
     <code>list</code> that represents a list of items. The labels for the input field and list 
     are obtained from a backing bean called <code>msgs</code>. The list items are 
     automatically sorted, and the items and the list are validated with methods 
     from the <code>ListBean</code>.</p>
 <pre>
   &lt;webuijsf:editableList id="compid"
                    list="#{ListBean.list}" 
                    fieldLabel="#{msgs.textfield_label}"
                    listLabel="#{msgs.list_label}"
                    sorted="true" 
                    fieldValidatorExpression="#{ListBean.validateNewItem}"
                    listValidatorExpression="#{ListBean.validateList}"/&gt;
 </pre> 
  <h4>Example 2: An editable list with a search button</h4>
     <p>This example uses the search facet to render a Search button. The button
     executes a JavaScript function (which is defined by the developer). The list 
     allows multiple selections, and is rendered with the list on top. </p>
  <pre>
   &lt;webuijsf:editableList id="list2"
                    list="#{ListBean.list}" 
                    fieldLabel="#{msgs.textfield_label}"
                    listLabel="#{msgs.list_label}"
                    listOnTop="true" 
                    multiple="true"
                    toolTip="List of your items"/&gt;
                    &lt;f:facet name="search"&gt;
                       &lt;webuijsf:button primary="true"&nbsp; text="Search" onClick="addEntity();"/&gt;
                    &lt;/f:facet&gt;
             &lt;/webuijsf:editableList&gt;
 </pre> 
]]></description>
    </tag>

    <tag>
        <name>fileChooser</name>

        <description><![CDATA[
 <p>
     Use the <code>webuijsf:fileChooser</code> tag to display a component that shows files 
     and folders in a local file system hierachy, and allows the web application 
     user to select files and folders.</p>
     <p>
     The list of displayed files is determined by the filesystem access rules 
     that are in place in the given environment.</p>
     <h4> The filechooser model </h4>
     <p>This tag can also be used to navigate and select resources other
     than files. One has to implement the 
     <code>com.sun.webui.jsf.model.ResourceModel</code>
     for that purpose. A default implementation of this interface for 
     File ojects in the local filesystem has been provided. The implementation
     class is <code>com.sun.webui.jsf.model.FileChooserModel</code>.</p>
     <p>The ResourceModel supplies an array of 
     <code>com.sun.webui.jsf.model.ResourecItem</code> objects that are
     consumed by the filechooser for displaying the list of selectable files.
     If the component is being used for resources other than files an 
     implementation of this interface should also be supplied.
     In order to make the component behave as a folderchooser, where only
     folders can be selected, invoke the <code>setFolderChooser(true)</code>
     method on the model instance in your backing bean.
     -->
     <h3>HTML Elements and Layout</h3>
     <p>The rendered fileChooser component is an XHTML &lt;table&gt; element that contains
     several text fields, a drop down, a listbox, and buttons. 
     The layout is similar to the following:   </p>
     <br>
 <table style="text-align: left; width: 100%;" border="1"
  cellpadding="2" cellspacing="2">
   <tbody>
     <tr style="font-family: Helvetica,Arial,sans-serif;">
       <td colspan="4" rowspan="1"><span
  style="font-weight: bold;">Browse Server</span></td>
     </tr>
     <tr style="font-family: Helvetica,Arial,sans-serif;">
       <td colspan="4" rowspan="1">&nbsp;</td>
     </tr>
     <tr>
       <td style="font-family: Helvetica,Arial,sans-serif;"
  colspan="4" rowspan="1"><span
  style="font-weight: bold; color: rgb(102, 102, 102);">Server
 Name:</span> &nbsp;SomeServer &nbsp;<small><span
  style="font-style: italic;">(static text)</span></small></td>
     </tr>
     <tr>
       <td style="font-family: Helvetica,Arial,sans-serif;"><span
  style="font-weight: bold; color: rgb(102, 102, 102);">Look
 In:</span></td>
       <td style="font-family: Helvetica,Arial,sans-serif;"
  colspan="2" rowspan="1">/some/directory &nbsp;<small><span
  style="font-style: italic;">(text field)</span></small></td>
       <td style="font-family: Helvetica,Arial,sans-serif;">&nbsp;</td>
     </tr>
     <tr>
       <td style="font-family: Helvetica,Arial,sans-serif;"><span
  style="font-weight: bold; color: rgb(102, 102, 102);">File
 Filter:</span></td>
       <td style="font-family: Helvetica,Arial,sans-serif;">*
 &nbsp; &nbsp;&nbsp;<small><span
  style="font-style: italic;">(text field)</span></small></td>
       <td colspan="2" rowspan="1"
  style="font-family: Helvetica,Arial,sans-serif;">&nbsp;</td>
     </tr>
     <tr>
       <td style="font-family: Helvetica,Arial,sans-serif;">&nbsp;</td>
       <td style="font-family: Helvetica,Arial,sans-serif;"><small>To
 apply a new field value, press Enter in that field</small></td>
       <td colspan="2" rowspan="1"
  style="font-family: Helvetica,Arial,sans-serif;">&nbsp;</td>
     </tr>
     <tr>
       <td style="font-family: Helvetica,Arial,sans-serif;">&nbsp;</td>
       <td style="font-family: Helvetica,Arial,sans-serif;">&nbsp;</td>
       <td style="font-family: Helvetica,Arial,sans-serif;"><span
  style="font-weight: bold; color: rgb(102, 102, 102);">Sort
 By:</span></td>
       <td
  style="font-family: Helvetica,Arial,sans-serif; vertical-align: top;"><small><span
  style="font-style: italic;">(dropDown)</span></small></td>
     </tr>
     <tr style="font-family: Helvetica,Arial,sans-serif;">
       <td rowspan="1" colspan="4">List of
 files/folders <span style="font-style: italic;">&nbsp;(list
 box)</span><br>
       <br><br>
       <br>
       <br>
       </td>
     </tr>
     <tr>
       <td style="font-family: Helvetica,Arial,sans-serif;">&nbsp;</td>
       <td style="font-family: Helvetica,Arial,sans-serif;">&nbsp;</td>
       <td style="font-family: Helvetica,Arial,sans-serif;"><small>Up
 One Level<br>
       <span style="font-style: italic;">(button)</span></small></td>
       <td style="font-family: Helvetica,Arial,sans-serif;"><small>Open
 Folder<br>
       <span style="font-style: italic;">(button)</span></small></td>
     </tr>
     <tr>
       <td style="font-family: Helvetica,Arial,sans-serif;"><span
  style="font-weight: bold; color: rgb(102, 102, 102);">Selected
 File:</span></td>
       <td style="font-family: Helvetica,Arial,sans-serif;">some_filename
 &nbsp;<small> <span style="font-style: italic;">(text
 field)</span></small></td>
       <td style="font-family: Helvetica,Arial,sans-serif;">&nbsp;</td>
       <td style="font-family: Helvetica,Arial,sans-serif;">&nbsp;</td>
     </tr>
   </tbody>
 </table>
 <hr>    
 <p>The fileChooser component can be used to render a file chooser or a folder 
 chooser. A file chooser displays files and folders, and allows you to select 
 files and open folders, but not to select folders. A folder chooser also 
 displays files and folders, but the files are displayed as disabled and cannot 
 be selected. A folder chooser allows only folders to be selected.  
 With both types of choosers, you can open folders by selecting a folder 
 and clicking the Open Folder button, or by double-clicking the folder name.</p>
     <h3>Configuring the webuijsf:fileChooser tag</h3>
     <p>Use the <code>model</code>attribute to associate the model
     with the component. By default the FileChooser model described
     above will be used.</p>
     -->
 <p>
 The fileChooser component displays files in the local filesystem only. 
 The directory whose files and folders should be displayed is specified with a 
 <code>webuijsf:fileChooser</code> tag's <code>lookin</code> attribute. The list of displayed files 
 is determined by the filesystem access rules that are in effect in the given 
 environment.</p>
 <p>
 By default, the component is
 rendered as a file chooser. To specify a folder chooser, set
 the <code>webuijsf:fileChooser</code> tag's <code>folderChooser</code> attribute to
 true. The folder chooser displays the labels Folder Filter and Selected Folders 
 instead of the file chooser's File Filter and Selected Files.</p>
     <p>Use the <code>multiple</code> attribute to specify whether 
     multiple resources (files or folders) can be selected. 
     By default the <code>multiple</code> attribute is set to false.</p>
 <p>The web app user can sort the list of 
 files and folders shown in the file chooser by selecting a sort option
 from the "Sort By" dropdown menu. By default, the list is sorted 
 alphabetically. To specify which sort is used when the
 component is initially rendered, use the <code>sortField</code> attribute. 
 Valid <code>sortField</code> attribute values are:</p>
 <ul>
   <li>"alphabetic" to sort alphabetically <br></li>
   <li>"size" to sort by file size<br></li>
   <li>"date" to sort by last modified date <br></li>
 </ul>
 <p>By default, the initial sort order is ascending: A-Z, or smallest file size 
 first, or oldest file first. Set the <code>descending</code> attribute to true 
 to specify a descending sort order. </p>
     <p>The input to the fileChooser component is the model object. The
     output of this component is the list of selected files or folders.
     This is the value of the component. The backing bean associated with
     <code>selected</code> attribute will be set with the value of the 
     component after each submit.
     -->
     <p>The input to the fileChooser is the value of the <code>lookin</code> 
     attribute. This attribute sets the initial value of the "Look In" text field 
     which determines the initial contents of the chooser's list.</p>
     <p>The output of the fileChooser component is the list of selected files or 
     folders. This is the value of the component. The managed bean associated with
     the <code>selected</code> attribute is updated with the value when
     the <code>setChooseButton</code> JavaScript
     function causes the form to be submitted or the form is submitted in
     a non "immediate" manner. See the sections 
     "Client-side JavaScript functions" and "Form Submit Behavior" for more details.
     </p>
    <p>The <code>webuijsf:fileChooser</code>
 tag supports several facets that you can use to replace the default
 content for some areas of the component. The facets are listed in the <a
  href="#facets">Facets</a> section.</p>
     <h3><a name="Submit"></a>Form Submit Behavior</h3>
     <p>
     The fileChooser's form submit behavior conforms to the JSF lifecycle, with 
     respect to the fileChooser's value (assigned to the <code>selected</code> 
     attribute), and 
     the values of the fileChooser facets.  This means that the fileChooser's 
     value and its facets' values are only updated if the form is submitted with 
     the intent of updating the application's model values.</p>
     <p>
     In other words, the fileChooser elements that submit the form do so in an 
     "immediate" JSF fashion, so that the submitted values
     of the fileChooser and facets are validated, but the values are not updated. 
     Only the local values are set.</p>
     <p>
     The fileChooser's <code>selected</code> value and the value of the facet 
     components are updated only when the following actions occur on a page 
     that uses the fileChooser component:</p>
     <ul>
     <li>A list box file entry is double clicked. (The value is updated only when 
     the fileChooser component is in "file chooser" mode, where the 
     folderChooser attribute is false.)</li>
     <li>The Return key is pressed in the Selected File field.</li>
     <li>The HTML element specified for the <code>setChooserButton</code> function 
     is clicked or otherwise submits the page.</li>
     <li>The form is submitted by an HTML element that is on the same page as
     the file chooser, and the submit is not "immediate".</li>
     </ul>
     <h3><a name="facets"></a>Facets</h3>
     <p>The fileChooser component supports the following facets. </p>
      <p>
     <em>Note</em> Specifying facets to replace the default components
     rendered by the file chooser for facet roles, is an 
     advanced use of this tag. This is especially true for the TextField
     and Button facets such as lookinField, selectedField, filterField,
     upButton, and openButton. The component specified for
     a given facet role must take on the responsibilities expected
     by the fileChooser. Not satisifying those responsibilities can cause
     the fileChooser to function incorrectly.<p>
     <table style="text-align: left; color: rgb(0, 0, 0); width: 100%;"
  border="1" cellpadding="2" cellspacing="2">
   <tbody>
     <tr>
       <td style="vertical-align: top;"><code>fileChooserLabel<br>
       </code><br>
       </td>
       <td style="vertical-align: top;">Specify
 a custom label to replace the File Chooser&nbsp;component label. By
 default the label is a&nbsp;localized value meaning "Browse Server"
 in English.</td>
     </tr>
     <tr>
       <td><code>serverLabel</code></td>
       <td>Specify a custom component to replace
 the&nbsp;Server Name label.&nbsp;</td>
     </tr>
     <tr>
       <td><code>serverNameText</code></td>
       <td>Specify a custom component to replace the Server Name
 static text.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>lookinField</code></td>
       <td style="vertical-align: top;">
       <p>Specify a custom
 component for the Look In text field. The id attribute of the facet
 component should be set to
 the <code>webuijsf:fileChooser</code> tag's id attribute with <code>_lookinField</code>
 appended to the id. For example, if
 the <code>webuijsf:fileChooser</code> id is <code>fc1</code>,
 the facet
 component's id should be <code>fc1_lookinField</code>. </p>
       <p>You should&nbsp;use the function <code>
 enterKeyPressed(this)</code> as the value of
 the <code>onKeyPress</code> attribute of the facet
 component. See <a href="#JS">Client-side
 JavaScript functions&nbsp;</a> for details.<br>
       </p>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>lookinLabel</code></td>
       <td style="vertical-align: top;">Specify a custom
 label for the
 Look In field of the component.<br>
       <code></code></td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>filterField</code></td>
       <td style="vertical-align: top;">
       <p>Specify a custom
 component to replace the File Filter or Folder Filter text
 field. The id attribute of the facet's component should
 be set to the <code>webuijsf:fileChooser</code> tag's id
 attribute, with <code>_filterField</code> appended to the
 id. For
 example, if
 the <code>webuijsf:fileChooser</code> id is <code>fc1</code>,
 the facet
 component's id should be <code>fc1_filterField</code>.<br>
       </p>
       <p>You should use the function <code>
 enterKeyPressed(this)</code> as the value of
 the <code>onKeyPress</code> attribute of the facet
 component. See <a href="#JS">Client-side
 JavaScript
 functions</a> for details.</p>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>filterLabel</code></td>
       <td style="vertical-align: top;">Specify
 a custom label for the&nbsp;File Filter or&nbsp;Folder Filter
 text field of the
 component.&nbsp; </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>enterPressHelp</code></td>
       <td> Specify a custom inline help message to describe the
 effect of pressing the Enter key after entering data in the "Look In"
 and "Filter On" fields. By default the following inline help message is
 displayed: <br>
 "To apply a new field value, press Enter in that field."</td>
     </tr>
     <tr>
       <td><code>multiSelectHelp</code> </td>
       <td>Specify a custom inline help message about choosing
 multiple files. By default the following inline help message is
 displayed:<br>
 "To select multiple items, use Shift-click or Control-click."</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>selectedField</code></td>
       <td style="vertical-align: top;">
       <p>Specifies a custom
 component&nbsp;to replace the Selected Files or Selected Folders
 field. The id
 attribute of the facet component should be set to the <code>webuijsf:fileChooser</code>
 tag's id attribute, with <code>_selectedField</code>
 appended to the id. For
 example, if
 the <code>webuijsf:fileChooser</code> id is <code>fc1</code>,
 the facet
 component's id should be <code>fc1_selectedField</code>.<br>
       </p>
       <p>You should&nbsp;use the function <code>
 enterKeyPressed(this)&nbsp;</code><span
  style="font-family: monospace;"></span>as the value of
 the <code>onKeyPress</code> attribute of the facet
 component. See <a href="#JS">Client-side
 JavaScript
 functions&nbsp;</a> for details.</p>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>selectedLabel</code></td>
       <td style="vertical-align: top;"><p>Specify
 a custom label for the Selected Files or Selected Folders
 field of the component. <br>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>upButton</code></td>
       <td style="vertical-align: top;"><p>Specifies a custom
 component to replace the&nbsp;Up One Level button. When clicked,
 this button causes the list of
 files from a level above the currently displayed directory to be
 displayed. The id attribute of the custom
 component should be set to the <code>webuijsf:fileChooser</code>
 tag's id
 attribute with <code>_upButton</code> appended to the id.
 For
 example, if
 the <code>webuijsf:fileChooser</code> id is <code>fc1</code>,
 the facet
 component's id should be <code>fc1_upButton</code>.<br>
 If
 you want to use the
 JavaScript function associated with the default button's onClick event
 use
 the&nbsp;<code>moveUpButtonClicked()</code>
 function with the custom component's <code>onClick</code>
 attribute. See <a href="#JS">Client-side
 JavaScript
 functions </a>below
 for details.<br>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>openButton</code></td>
       <td style="vertical-align: top;"><p>Specifies a custom
 component to replace the Open Folder button. When clicked, this button
 causes the currently
 selected folder's contents to be
 displayed. The id attribute of the custom
 component should be set to the <code>webuijsf:fileChooser</code>
 tag's id
 attribute with <code>_openButton</code> appended to the
 id. For example, if
 the <code>webuijsf:fileChooser</code> id is <code>fc1</code>,
 the custom component's id should be <code>fc1_openButton</code>.<br>
       <p>If you want to use the
 JavaScript function associated with the default button's onClick event
 use the&nbsp; <code>openFolderClicked()</code> function
 with the custom component's <code>onClick</code>
 attribute. See <a href="#JS">Client-side
 JavaScript functions</a> below for details.</p>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>sortMenu</code></td>
       <td style="vertical-align: top;"><p>Specifies a custom
 component to replace the Sort By drop down menu&nbsp;of the
 component. <br>
       </td>
     </tr>
   </tbody>
 </table>
     <h3><a name="JS"></a>Client-side JavaScript Functions</h3>
 <p>When the component is rendered, a DOM object corresponding to the
 component is created. To manipulate the component on the client side,
 you may invoke functions on the DOM object. With reference to the DOM
 id, to obtain a list of selected option elements, invoke 
 <code>document.getElementById(id).getSelectedOptions()</code>.
 </p>
 <table style="text-align: left; width: 100%;" border="1"
  cellpadding="2" cellspacing="2">
   <tbody>
     <tr>
       <td style="vertical-align: top;"><code>openFolderClicked()</code></td>
       <td style="vertical-align: top;">Displays the list
 of files and/or folders in the currently selected folder.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>handleOnChange()</code></td>
       <td style="vertical-align: top;">Handles all
 activities when the
 onChange event occurs for the listbox that&nbsp;lists&nbsp;the
 files and
 folders.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>handleDblClick()</code></td>
       <td style="vertical-align: top;">Invoked when the
 user double clicks on a file or folder in the list.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>enterKeyPressed(userAction)</code></td>
       <td style="vertical-align: top;">Invoked when the
 user changes the value of any of the text fields in the
 file chooser and hits the Enter key.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>setChooseButton()</code></td>
       <td style="vertical-align: top;"><em></em>Use
 this&nbsp;function to assign a DOM element id of the element that
 submits the form to&nbsp;update the file chooser's selections. The
 state of this element will be controlled by the state of the file
 chooser. For example if there are no selections, the element will be
 disabled. <br>
       <em>Note: </em>Any&nbsp; action in the file
 chooser that submits the form with the intent of updating the file
 chooser value, will call the "click" function of this element.</td>
     </tr>
     <tr>
       <td><code>getCurrentDirectory()</code></td>
       <td>Convenience function to get the current directory
 without going to the server.</td>
     </tr>
     <tr>
       <td><code>getOptionElements()</code></td>
       <td>Convenience function to get the list of option elements.</td>
     </tr>
     <tr>
       <td><code>getSelectedOptions()</code></td>
       <td>Convenience function to get the list of selected option
 elements.</td>
     </tr>
   </tbody>
 </table>
     <h3>Examples</h3>
     <h4>Example 1: Simple FileChooser </h4>
     <p>This example shows a simple fileChooser. The page includes a 
     separate button that is used with the fileChooser's <code>setChooseButton</code> 
     function.
      &lt;webuijsf:fileChooser
       	id="_fc1" model="#{fileList.model}"
 	selected="#{fileList.fileSelected}"	
 	sortField="size" descending="false"
 	multiple="false"&gt;
      &lt;f:facet name="selectedField"&gt;
        &lt;webuijsf:textField id="_fc1_selectedField"/&gt;
      &lt;/f:facet&gt;
      &lt;/webuijsf:fileChooser &gt;
     &lt;webuijsf:fileChooser server="#{fileList.server}"
 		 model="#{fileList.model}"
                  selected="#{fileList.files}"
                  sortfield="alphabetic"
                  descending="true"
                  toolTip="#{fileList.tooltip}" /&gt;
     -->
 <pre>
     &lt;webuijsf:fileChooser id="filechooser"
 		 lookin="#{fileList.lookin}"
                  selected="#{fileList.selected}"
                  sortField="alphabetic"
                  descending="true" /&gt;
     &lt;webuijsf:button id="fileChooseButton"
 	 primary="true" 
          text="Choose File"
 	 actionListener="#{fileList.chooseFile}"/&gt;
     &lt;/webuijsf:markup&gt;
     &lt;script type="text/javascript"&gt;
         document.getElementById(form1:filechooser).setChooseButton('form1:fileChooseButton');
     &lt;/script&gt;
 </pre>
 <h4>Backing Bean for fileList Managed Bean</h4>
 <p>
 The example uses the following backing bean.</p>
 <pre>
 import java.io.File;
 import javax.faces.event.ActionEvent;
 // Mapped to managed bean "fileList" in faces-config.xml
 // This managed bean is session scoped.
 //
 public class FileList {
     public static final String WINDOWS_OS = "WINDOW";
     private File lookin = null;
     // Creates a new instance of FileList
     public FileList() {
         String osName = System.getProperty("os.name").toUpperCase();
         if (osName.startsWith(WINDOWS_OS)) {
             lookin = new File("c:\\\\windows");
         } else {
             lookin = new File("/usr");
         }
     }
     public File getLookin() {
 	return lookin;
     {
     private File selected;
     public File getSelected() {
         return fileSelected;  }
     public void setSelected(File selected) {
 	this.selected = selected;
     }
     public void chooseFile(ActionEvent event) {
 	// do something useful with the selected files
 	// when the "Choose File" button is clicked.
     }
 }
  </pre>
]]></description>
    </tag>

    <tag>
        <name>footer</name>

        <description></description>
    </tag>

    <tag>
        <name>form</name>

        <description><![CDATA[
 <p>Use the <code>webuijsf:form</code> tag 
 to create an HTML <code>&lt;form&gt;</code> element. The form can be submitted 
 via a button or hyperlink control (in which case an <code>ActionEvent</code> 
 will be generated on the server), or via client side scripting.</p> 
 <p>The <code>virtualFormsConfig</code> attribute can be used to configure 
 virtual forms. 
  A <i>virtual form</i> defines a group of input components 
 (&quot;participants&quot;) and submission components (&quot;submitters&quot;) 
 on a page, such that when the user interacts with one of the submitters, the participants 
 are processed exclusively while the remaining inputs on the page are ignored.  
  An <i>input component</i> is any 
  component that implements <code>EditableValueHolder</code>. A 
  <i>submission component</i> 
  is any component that causes the web page to be submitted (such as a button, 
  hyperlink, or any input component that submits the page via the 
  <code>webui.suntheme.common.timeoutSubmitForm</code> scripting function). 
 <i>Processing </i>an input means converting and validating it, firing 
 any value change events associated with the input, and mapping the input onto 
 its binding target (if the component is bound). Virtual forms provide an 
 alternative to the <code>immediate</code> property. 
 They are more powerful than <code>immediate</code> because they let you 
 specify  multiple groups of inputs to be selectively processed (that is, you 
 can specify  multiple virtual forms on a page). They are also easier to use 
 than  <code>immediate</code> because they do not alter 
 the JavaServer Faces lifecycle.</p>
 <br> 
 <h3>HTML Elements and Layout</h3> 
 The rendered HTML page contains an 
 HTML <code>&lt;form&gt;</code> tag and its associated 
 attributes. The rendered 
 form includes a hidden field for use in 
 determining which form submitted the page.</p><br> 
 <h3>Client Side Javascript Functions</h3> 
 None. 
 <br> 
 <h3>Examples</h3> 
 <h4>Example 1: Using a Form<br> 
 </h4> 
 <code>&lt;webuijsf:page&gt;<br> 
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:html&gt;<br> 
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;webuijsf:head id="head" 
 title="Hyperlink Test Page" /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:body&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
 &lt;webuijsf:form id="form1"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:hyperlink&nbsp;
 id="hyperlinkSubmitsPage"&nbsp; <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 label="#{HyperlinkBean.label}" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 action="#{HyperlinkBean.determineWhatToDoFunction}" /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:form&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &lt;/webuijsf:body&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:html&gt;<br>
 &lt;/webuijsf:page&gt;</code><br>
 <h4>Example 2: A Page with Three Virtual Forms<br>
 </h4>
 <code>&lt;webuijsf:page&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:html&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;webuijsf:head id="head" 
 title="Shipping and Billing Information" /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:body&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
 &lt;webuijsf:form id="form1" virtualFormsConfig="shipping | shippingAddressTextField 
 | updateShippingButton , creditCard | creditCardDropDown | creditCardDropDown , 
 billing | billingAddressTextfield creditCardDropDown | updateBillingButton"&gt; 
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; 
 &lt;webuijsf:label for="shippingAddressTextField" id="shippingAddressLabel" 
 style="left: 48px; top: 48px; position: absolute" text="Shipping Address:"/&gt; 
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; 
 &lt;webuijsf:textField id="shippingAddressTextField" required="true" 
 style="left: 48px; top: 72px; position: absolute"/&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; 
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; 
 &lt;webuijsf:button id="updateShippingButton" style="left: 48px; top: 120px; 
 position: absolute" text="Update Shipping Address"/&gt;
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; 
 &lt;webuijsf:label id="creditCardLabel" for="creditCardDropDown" 
 style="left: 48px; top: 192px; position: absolute" 
 text="Credit Card to Use:"/&gt;
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; 
 &lt;webuijsf:dropDown id="creditCardDropDown" 
 items="#{SessionBean1.creditCards}" style="left: 48px; top: 216px; 
 position: absolute"/&gt;
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; 
 &lt;webuijsf:label id="billingAddressLabel" for="billingAddressTextfield" 
 style="left: 48px; top: 264px; position: absolute" 
 text="Credit Card Billing Address:"/&gt;
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; 
 &lt;webuijsf:textField id="billingAddressTextfield" required="true" 
 style="left: 48px; top: 288px; position: absolute"/&gt;
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; 
 &lt;webuijsf:button id="updateBillingButton" style="left: 48px; top: 336px; 
 position: absolute" text="Update Billing Address"/&gt;
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; 
 &lt;webuijsf:button id="updateAllButton" style="left: 48px; top: 432px; position: 
 absolute" text="Update All Information"/&gt;
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:form&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &lt;/webuijsf:body&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:html&gt;<br>
 &lt;/webuijsf:page&gt;</code><br>
]]></description>
    </tag>

    <tag>
        <name>frame</name>

        <description><![CDATA[
 <p>
 Use the <code>webuijsf:frame</code> tag inside a
 webuijsf:frameSet tag to denote a new XHTML frame. <br>
 HTML Elements and Layout</h3>
 <p>If you use a <code>webuijsf:frame</code> and <code>webuijsf:frameSet</code>
 tags you should set the webuijsf:page tag's frame attribute to "true".<br></p>
 This tag renders an xhtml compliant &lt;frame&gt; tag.&nbsp; <br>
 <h3>Client Side Javascript Functions</h3>
 None.<br>
 <h3>Example</h3>
 <b>Example 1: Using the webuijsf:frame tag
 appropriately in a JSP page:<br><br></b><code>&lt;?xml version="1.0"
 encoding="UTF-8"?&gt;<br>&lt;jsp:root version="1.2" xmlns:f="http://java.sun.com/jsf/core"
 xmlns:h="http://java.sun.com/jsf/html"
 xmlns:jsp="http://java.sun.com/JSP/Page"
 xmlns:webuijsf="http://www.sun.com/web/webuijsf"&gt;<br>&nbsp;&nbsp;&nbsp; &lt;jsp:directive.page
 contentType="text/html;charset=ISO-8859-1"
 pageEncoding="UTF-8"/&gt;&lt;f:view&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:page frame="true"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:html&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:head title="blah" /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:frameSet rows="10%,*" cols="10%,*" style="color:blue"
 styleClass="blue" toolTip="blah"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:frame toolTip="blah" url="../faces/hyperlink/hyperlink.jsp"
 frameBorder="true" noResize="false"/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:frame toolTip="blah1" url="../faces/hyperlink/nextpage.jsp"
 frameBorder="true" noResize="false"/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:frame toolTip="blah2" url="http://www.google.com"
 frameBorder="true" noResize="false"/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:frame toolTip="blah3" url="http://www.yahoo.com"
 frameBorder="true" noResize="false"/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/webuijsf:frameSet&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/webuijsf:html&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:page&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/f:view&gt;<br>&lt;/jsp:root&gt;<br></code><b style="color: rgb(0, 0, 0);"><span
 style="font-family: monospace;"></span></b>
]]></description>
    </tag>

    <tag>
        <name>frameSet</name>

        <description><![CDATA[
 <p>Use
 the <code>webuijsf:frameSet</code>
 tag to define a new set of frames in the rendered HTML page. <br>
 When using <code>webuijsf:frameSet</code>
 and <code>webuijsf:frame</code>
 tags in
 your application, you must also set the <code>webuijsf:page</code>
 tag's
 frame attribute to "true".<br> <br>
 <h3>HTML
 Elements and Layout</h3> The
 rendered HTML page contains
 an XHTML-compliant <code>&lt;frameset&gt;</code>
 element.  <br><br>
 <h3>Theme
 Identifiers</h3>None<br>
 <h3>Client
 Side Javascript Functions</h3> None.&nbsp; <br>
 <br>
 <h3>Examples</h3>
 <h4>Example 1: Creating a
 frameset of two rows and two columns<br></h4>
 <code>&lt;?xml
 version="1.0"
 encoding="UTF-8"?&gt;<br>&lt;jsp:root version="1.2" xmlns:f="http://java.sun.com/jsf/core"
 xmlns:h="http://java.sun.com/jsf/html"
 xmlns:jsp="http://java.sun.com/JSP/Page"
 xmlns:ui="http://www.sun.com/web/ui"&gt;<br>&nbsp;&nbsp;&nbsp; &lt;jsp:directive.page
 contentType="text/html;charset=ISO-8859-1"
 pageEncoding="UTF-8"/&gt;&lt;f:view&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:page frame="true"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:html&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:head title="blah" /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:frameSet rows="10%,*" cols="10%,*" style="color:blue"
 styleClass="blue" toolTip="blah"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:frame toolTip="blah" url="../faces/hyperlink/hyperlink.jsp"
 frameBorder="true" noResize="false"/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:frame toolTip="blah1" url="../faces/hyperlink/nextpage.jsp"
 frameBorder="true" noResize="false"/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:frame toolTip="blah2" url="http://www.google.com"
 frameBorder="true" noResize="false"/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:frame toolTip="blah3" url="http://www.yahoo.com"
 frameBorder="true" noResize="false"/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/webuijsf:frameSet&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/webuijsf:html&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/webuijsf:page&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/f:view&gt;<br>&lt;/jsp:root&gt;</code>
]]></description>
    </tag>

    <tag>
        <name>head</name>

        <description><![CDATA[
 <p>
 Use the <code>webuijsf:head</code> tag to provide information about the
 document, to be used in the <code>&lt;head&gt;</code> element of the
 rendered HTML page.&nbsp; The <code>webuijsf:head</code><span>
 tag must be placed immediately after
 the <code>webuijsf:html</code> tag, within the <code>webuijsf:page</code> tag.&nbsp; The following tags can be
 used as children of the <code>webuijsf:head</code> tag:</span><br><ul><li><a href="link.html"><code>webuijsf:link</code></a></li><li><a href="meta.html"><code>webuijsf:meta</code></a></li><li><code><a href="script.html">webuijsf:script</a></code></li></ul><h3>HTML Elements and Layout</h3><span style="text-decoration: line-through; color: rgb(0, 0, 0);"></span><p>The <code>&lt;head&gt;</code>
 element is rendered in the HTML page, and can include information that
 is valid for inclusion in the HTML <code>&lt;head&gt;</code> element.
 For example, if you use the <code>webuijsf:link</code> tag in the <code>webuijsf:head</code>
 tag, you can provide the URL to a style sheet. The style sheet
 link&nbsp; will be rendered as a <code>&lt;link&gt;</code> element in
 the <code>&lt;head&gt;</code> element of the HTML page.&nbsp; In
 addition this tag will output the appropriate stylesheets for the
 included components on the page.<br></p><span>The
 browser does not display the information in the <code>&lt;head&gt;</code>
 element to the user, with the exception of the title that is used in
 the browser's title bar.&nbsp;&nbsp; </span><h3>Client Side Javascript Functions</h3><span>None. </span>
 <h3>Example</h3><b>Example 1: Create a head tag </b><br>
 <code><br>&lt;webuijsf:page&gt;<br>&nbsp;&nbsp;&nbsp; &lt;webuijsf:html&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </code><code>
 &lt;webuijsf:head
 title="Name of the
 page..title is required"&gt;<br></code><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;
 &lt;webuijsf:link url="/relativepath/x.css" /&gt;</code><code><br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:script url="/relativepath/x.js" /&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </code><code>
 &lt;/webuijsf:head&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </code><code>
 &lt;webuijsf:body&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </code><code>
 ....your
 page content....<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </code><code>&lt;/webuijsf:body&gt;<br>&nbsp;&nbsp;&nbsp; </code><code>&lt;/webuijsf:html&gt;</code><code>&lt;/webuijsf:page&gt;</code><span>
 &nbsp;</span>
]]></description>
    </tag>

    <tag>
        <name>helpInline</name>

        <description><![CDATA[
 <p>
 Use the <code>&lt;webuijsf:helpInline&gt;</code> tag to display inline help in the 
 rendered HTML page. The tag supports two types of inline help: 
 page help and field help. Page help is displayed in a medium size font and is 
 intended for information about the page or section as a whole.  
 Field help is displayed in a smaller font and is intended for information about 
 individual fields in the page.</p>
 <p>
 You can make links to additional help that is displayed in a secondary browser
 window by embedding the <a href="helpWindow.html"><code>webuijsf:helpWindow</code></a>
 tag in the <code>webuijsf:helpInline</code> tag's text.</p>
 <h3>HTML Elements and Layout</h3>
 <p>
 The rendered HTML page displays the body content of the
 <code>&lt;webuijsf:helpInline&gt;</code> tag inside of an XHTML compliant
 <code>&lt;div&gt;</code> element. An appropriate style class will be set for
 the <code>&lt;div&gt;</code> element based upon the helpInline type (page or 
 field).
 <h3>Client Side Javascript Functions</h3>
 None.
 <h3 >Examples</h3>
 <h4>Example 1: Inline page help</h4>
 <p>
 This example shows how to use the webuijsf:helpInline tag to create page level inline
 help. The type attribute is not specified because the default type is page.</p>
 <code>&lt;webuijsf:helpInline id="pageHelp" text="This is page inline help." /&gt;</code>
 <h4>Example 2: Inline field help</h4>
 <p>
 This example sets the type attribute to specify field help.</p>
 <code>&lt;webuijsf:helpInline id="fieldHelp" type="field" text="This is field inline help." /&gt;</code>
 <h4>Example 3: Add a HelpWindow link in inline help</h4>
 <p>This example shows how to create a hyperlink within the inline help
 text of an application page to open the help window. This approach is used to 
 provide more detailed help on a topic.</p>
 <code>&lt;webuijsf:helpInline id="pageHelp1" type="page" <br>
 &nbsp;&nbsp;&nbsp; text="Page inline help can be enhanced by a link to <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; provide more information using webuijsf:helpWindow tag."&gt;<br>
 &nbsp;&nbsp;&nbsp;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:helpWindow windowTitle="Window Title Param"<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 pageTitle="Page Title Param" <br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 mastheadImageUrl="/images/webconsole.png"<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 mastheadImageDescription="Sun Java Web Console
 Logo"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 <br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 helpFile="accessibility.html"<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; toolTip="Help
 for This Page (Opens a New Window)"<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 linkIcon="true" linkText="Click for more about Accessibility." /&gt;<br>
 &lt;/webuijsf:helpInline&gt;<br>
 </code>
]]></description>
    </tag>

    <tag>
        <name>helpWindow</name>

        <description><![CDATA[
 <p>
 Use the <code>&lt;webuijsf:helpWindow&gt;</code> tag to display a link to a help
 window. When a user clicks the link, a popup window opens to display an
 online JavaHelp 2.0 system.  See <a href="http://java.sun.com/products/javahelp">
 http://java.sun.com/products/javahelp</a> for more information about 
 JavaHelp 2.0 online help.</p>
 <h3>HTML Elements and Layout</h3>
 <p>
 The helpWindow component renders an XHTML <code>&lt;a&gt;</code> hyperlink element
 that references the main help window JSP page. The link uses an <code>onclick</code> 
 attribute to execute JavaScript that opens a popup window to display a 
 JavaHelp browser window.</p>
 <p>
 The help window is displayed with a masthead that is similar to the masthead 
 used in application pages. The mastheadImageUrl and mastheadImageDescription attributes 
 can be used to provide content for the masthead. Below the masthead is a 
 banner in which the optional pageTitle attribute value can be displayed to 
 provide a title for the help file. The Close button is displayed in the page 
 title banner.</p>
 <p>
 The help window includes two panes. The left pane is a navigation page with 
 tabs for Contents, Index, and Search. The right frame shows the help content 
 pages.  The following is a rough diagram of the help window.</p>
 <table style="text-align: left; width: 100%;" border="1"
  cellpadding="2" cellspacing="2">
   <tbody>
     <tr>
       <td style="vertical-align: top;" rowspan="1"
  colspan="2">Masthead<br>
       <br>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;" rowspan="1"  colspan="2">Page title banner
       <table
  style="width: 70px; text-align: left; margin-left: auto; margin-right: 0px;"
  border="1" cellpadding="2" cellspacing="2">
         <tbody>
           <tr>
             <td style="text-align: center; vertical-align: middle;">Close</td>
           </tr>
         </tbody>
       </table>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;">JavaHelp Navigation tabs
 (Contents, Index, Search)<br>
       </td>
       <td style="vertical-align: top;">JavaHelp Toolbar
 icons (back,
 forward, print)&nbsp;&nbsp; <br>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;">Navigation pane<br>
       </td>
       <td style="vertical-align: top;">Content Pane<br>
       <br>
       Help content goes here.
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       <br>
       </td>
     </tr>
   </tbody>
 </table>
 <h3>Configuring the <code>&lt;webuijsf:helpWindow&gt;</code> tag</h3>
 <p>
 The <code>&lt;webuijsf:helpWindow&gt;</code> tag relies on a backing bean
 and a set of JSP pages that are provided with the Sun Java Web UI
 Components. You must supply a JavaHelp 2.0 help set to be displayed
 by the helpWindow component.</p>
 <p>
 You must complete the following configuration steps to use the 
 <code>&lt;webuijsf:helpWindow&gt;</code> tag.</p>
 <ol>
 <li>
     <p>Add a managed bean declaration for the JavaHelpBean backing bean.</p>
   </li>
   <p>The <code>&lt;webuijsf:helpWindow&gt;</code>
 tag retrieves data from a
 managed bean called <code>JavaHelpBean</code>. You must add a 
 <code>&lt;managed-bean&gt;</code>
 declaration for the <code>JavaHelpBean </code>to your web
 application's <code>faces-config.xml</code>
 file&nbsp; so that the helpWindow component can access the bean at run
 time. Add the XML code shown below to your application's <code>faces-config.xml</code>
 file: </p>
 <p>
 <code>&lt;managed-bean&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;description&gt;The backing bean for the Java
 Help component&lt;/description&gt;<br>
 &nbsp;&nbsp;&nbsp;
 &lt;managed-bean-name&gt;JavaHelpBean&lt;/managed-bean-name&gt;<br>
 &nbsp;&nbsp;&nbsp;
 &lt;managed-bean-class&gt;com.sun.webui.jsf.bean.HelpBackingBean&lt;/managed-bean-class&gt;<br>
 &nbsp;&nbsp;&nbsp;
 &lt;managed-bean-scope&gt;request&lt;/managed-bean-scope&gt;<br>
 &lt;/managed-bean&gt;</code>
 </p>
 <p>
 Note that this managed bean should have <code>request </code>scope.</p>
 <li><p>
 Deploy the helpWindow component's Java Server Pages.</p>
 </li>
 <p>The <code>&lt;webuijsf:helpWindow&gt;</code> tag requires several JSP pages
 that are included with the component SDK in webui/jsp/help. The JSP pages are 
 used to create the help popup window. The helpWindow component expects these 
 JSP pages to be deployed to the absolute directory 
 <code>/com_sun_webui_jsf/help</code> in your web application. </p>
 <p>
 If a prefix mapping (such as <code>/faces</code>) must be
 prepended to the default component JSP path of <code>/com_sun_webui_jsf/help</code>,
 specify the prefix with the <code>&lt;webuijsf:helpWindow&gt;</code> tag's 
 <code>jspPathPrefix</code> attribute. Then add a <code>&lt;managed-property&gt;</code> 
 entry to the <code>&lt;managed-bean&gt;</code> declaration for <code>JavaHelpBean</code> 
 in your <code>faces-config.xml</code> file.</p>
 <p>
 For example, if the actual mapping for the help JSP at run time is 
 <code>/faces/com_sun_webui_jsf/help</code>, add the <code>managed-property</code> 
 as shown below:<br>
 <p>
 <code><br>
 &lt;managed-bean&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;description&gt;The backing bean for the Java
 Help component&lt;/description&gt;<br>
 &nbsp;&nbsp;&nbsp;
 &lt;managed-bean-name&gt;JavaHelpBean&lt;/managed-bean-name&gt;<br>
 &nbsp;&nbsp;&nbsp;
 &lt;managed-bean-class&gt;com.sun.webui.jsf.bean.HelpBackingBean&lt;/managed-bean-class&gt;<br>
 &nbsp;&nbsp;&nbsp;
 &lt;managed-bean-scope&gt;request&lt;/managed-bean-scope&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;managed-property&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;property-name&gt;jspPath&lt;/property-name&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;value&gt;/faces&lt;/value&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/managed-property&gt;<br>
 &lt;/managed-bean&gt;<br>
 </code></p>
 <p>
 Note: If you deploy the helpWindow component's JSPs to a directory that is not 
 covered by the FacesServlet mapping for your application, you must include an 
 additional FacesServlet mapping to the help JSP directory in your application's 
 <code>web.xml</code> file. 
 <li>
 <p>Deploy the JavaHelp-compliant help set.</p>
 </li>
 <p>
 You must provide a JavaHelp-compliant help 
 set that can be used to populate the
 display of the <code>&lt;webuijsf:helpWindow&gt;</code>
 tag's online help system. The help set is expected to be located in the
 relative directory <code>/html/</code><small><span
  style="font-style: italic;">currentLocale</span></small><code>/help</code>
 where <small><span style="font-style: italic;">currentLocale</span></small>
 represents the abbreviation for a supported run time locale (such as <code>en</code>
 for English locale users). </p>
 <p>
 If a prefix mapping is required, you should specify the prefix with
 the&nbsp; <code>&lt;managed-property&gt;</code>
 entry for the <code>helpSetPath</code>property to the 
 <code>&lt;managed-bean&gt;</code> declaration
 for <code>JavaHelpBean</code> in your <code>faces-config.xml</code> file.</p>
 <p>
 For example, if your help files are located in the absolute
 directory of <code>/yourApp/helpfiles/html/en/help</code>,
 add the <code>&lt;managed-property&gt;</code>
 element in the <code>faces-config.xml</code>
 file as shown in the following example.</p>
 <p>
 <code>
 &lt;managed-bean&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;description&gt;The backing bean for the 
 JavaHelp component&lt;/description&gt;<br>
 &nbsp;&nbsp;&nbsp;
 &lt;managed-bean-name&gt;JavaHelpBean&lt;/managed-bean-name&gt;<br>
 &nbsp;&nbsp;&nbsp;
 &lt;managed-bean-class&gt;com.sun.webui.jsf.bean.HelpBackingBean&lt;/managed-bean-class&gt;<br>
 &nbsp;&nbsp;&nbsp;
 &lt;managed-bean-scope&gt;request&lt;/managed-bean-scope&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;managed-property&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;property-name&gt;helpSetPath&lt;/property-name&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;value&gt;/helpfiles&lt;/value&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/managed-property&gt;<br>
 &lt;/managed-bean&gt;</code>
 </p>
 </ol>
 <h3>Facets</h3>
 <p>None.</p>
 <h3>Theme Identifiers</h3>
 <p>The helpWindow component uses the following theme image identifiers for
 the buttons and icons in the help window.</p>
 <pre>
 HELP_BACK
 HELP_BACK_HEIGHT
 HELP_BACK_WIDTH
 HELP_BACK_DISABLED
 HELP_BACK_DISABLED_HEIGHT
 HELP_BACK_DISABLED_WIDTH
 HELP_FORWARD
 HELP_FORWARD_HEIGHT
 HELP_FORWARD_WIDTH
 HELP_FORWARD_DISABLED
 HELP_FORWARD_DISABLED_HEIGHT
 HELP_FORWARD_DISABLED_WIDTH
 HELP_PRINT
 HELP_PRINT_HEIGHT
 HELP_PRINT_WIDTH
 HELP_PRINT_DISABLED
 HELP_PRINT_DISABLED_HEIGHT
 HELP_PRINT_DISABLED_WIDTH
 HELP_BTNNAV_GRADIENT
 HELP_BTNNAV_GRADIENT_HEIGHT
 </pre>
 <h3>Client Side Javascript Functions</h3>
 <p>None.</p>
 <h3>Examples</h3>
 <h4>Example 1: Add a HelpWindow link to the masthead</h4>
 <p>
 This example shows how to use the <code>webuijsf:helpWindow</code> tag in the
 <code>webuijsf:masthead</code> tag's <code>helplink</code> facet. These tags add
 the Help hyperlink to the top right side of the masthead of the application
 page. </p>
 <code>&lt;webuijsf:masthead id="Masthead"
 productImageURL="../images/productimage.jpg"<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; productImageDescription="Java Web
 Console"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;f:facet name="helpLink"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;webuijsf:helpWindow
 windowTitle="Help Window" pageTitle="Help"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; jspPathPrefix="/faces"<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; mastheadImageUrl="/images/webconsole.png"<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; helpFile="sunwebconsole.html"&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 <br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; mastheadImageDescription="Sun Java Web Console Logo"<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; toolTip="Help for This Page (Opens a New Window)"/&gt;<br>
 &nbsp;&nbsp;&nbsp;
 &lt;/f:facet&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 <br>
 &lt;/webuijsf:masthead&gt;</code>
 <h4>Example 2: Add a HelpWindow link as part of inline help</h4>
 <p>This example shows how to create a hyperlink within the inline help
 text of an application page to open the help window. This approach is used to 
 provide more detailed help on a topic.</p>
 <code>&lt;webuijsf:helpInline id="pageHelp1" type="page" <br>
 &nbsp;&nbsp;&nbsp; text="Page inline help can be enhanced by a link to <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; provide more information using webuijsf:helpWindow tag."&gt;<br>
 &nbsp;&nbsp;&nbsp;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:helpWindow windowTitle="Window Title Param"<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 pageTitle="Page Title Param" <br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 mastheadImageUrl="/images/webconsole.png"<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 mastheadImageDescription="Sun Java Web Console
 Logo"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 <br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 helpFile="accessibility.html"<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; toolTip="Help
 for This Page (Opens a New Window)"<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 linkIcon="true" linkText="Click for more about Accessibility." /&gt;<br>
 &lt;/webuijsf:helpInline&gt;<br>
 </code>
]]></description>
    </tag>

    <tag>
        <name>hiddenField</name>

        <description><![CDATA[
 <p>
 Use the <code>webuijsf:hiddenField</code> tag to create a hidden field,
     which is present in the HTML, but not displayed to the user.
     Hidden fields are useful for saving state information.  
 <h3>HTML Elements and Layout</h3> 
 <p>The hiddenField component renders an XHTML <code>&lt;input
     type="hidden"&gt;</code> element. </p> 
     <h3>Configuring the <code>webuijsf:hiddenField</code> Tag</h3>
 <p>Use the <code>value</code> attribute to associate
 the component with a model object that represents the current value,
 by setting the attribute's value to a JavaServer Faces EL expression
     that corresponds to a property of a backing bean.</p>
     <h3>Facets</h3>
     <p>This component has no facets.</p> 
     <h3>Theme Identifiers</h3>
     <p>This component does not use any style classes from the theme.</p> 
     <h3>Client-side JavaScript functions</h3>
     <p>In all the functions below, <code>&lt;id&gt;</code> should be
     the generated id of the HiddenField component. 
     <table cellpadding="2" cellspacing="2" border="1" 
            style="text-align: left; width: 100%;">
     <tbody>
     <tr>
     <td style="vertical-align">
     <code>field_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>
     </td>
     <td style="vertical-align: top">
     Enable/disable the field. Set <code>&lt;disabled&gt;</code>
     to true to disable the component, or false to enable it.
     </td>
     </tr>
     <tr>
     <td style="vertical-align: top">
     <code>field_setValue(&lt;id&gt;, &lt;newValue&gt;)</code>
     </td>
     <td style="vertical-align: top">
     Set the value of the field to <code>&lt;newValue&gt;</code>.
     </td>
     </tr>
     <tr>
       <td style="vertical-align: top">
     <code>field_getValue(&lt;id&gt;)</code>
   </td>
     <td style="vertical-align: top">Get the value of the field.</td>
     </tr>
     <tr>
       <td style="vertical-align: top">
     <code>field_getInputElement(&lt;id&gt;)</code></td>
     <td style="vertical-align: top">
     Get hold of a reference to the input element rendered by this
     component.
     </td>
     </tr>
   </tbody>
 </table>
     <h3>Examples</h3>
 <p>This example uses a backing bean <code>FieldTest</code> with a
 property <code>counter</code>. The property is an <code>int</code> but
     it is not necessary to specify a converter since the default
     JavaServer Faces converter will be used. The value of the hidden
     field may be updated through a JavaScript.  The tag generates an
     HTML input element.</p>
 <pre>
 &lt;webuijsf:hiddenField id="counter" value="#{FieldTest.counter}"/&gt;
 </pre>
]]></description>
    </tag>

    <tag>
        <name>html</name>

        <description><![CDATA[
 <p>Use the <code>webuijsf:html</code>
 tag to create an <code>&lt;html&gt;</code>
 element in the rendered
 HTML page. The <code>webuijsf:html</code><span
  style="color: rgb(0, 0, 0);"> tag must be used as a
 child of the <code>webuijsf:page</code>
 tag, following </span><code
  style="color: rgb(0, 0, 0);"></code><span
  style="color: rgb(0, 0, 0);">immediately after the <code>webuijsf:page</code>
 tag.&nbsp; This tag is required for pages that are not in a portal
 enviroment and not subviews.<br></span><br
  style="color: rgb(0, 0, 0);"><span
  style="font-weight: bold; color: rgb(0, 0, 0);"></span><h3 style="color: rgb(0, 0, 0);">HTML
 Elements and Layout</h3><span
  style="text-decoration: line-through; color: rgb(0, 0, 0);"></span><span
  style="color: rgb(0, 0, 0);">The rendered HTML page
 includes an </span><code
  style="color: rgb(0, 0, 0);">&lt;html&gt;</code><span
  style="color: rgb(0, 0, 0);">
 tag that uses attributes indicated by the attributes you specify with
 the </span><code
  style="color: rgb(0, 0, 0);">webuijsf:html</code><span
  style="color: rgb(0, 0, 0);"> tag in the JSP page. </span><br
  style="color: rgb(0, 0, 0);"><br style="color: rgb(0, 0, 0);"><h3 style="color: rgb(0, 0, 0);">Theme
 Identifiers</h3><span style="color: rgb(0, 0, 0);">None.</span><br
  style="color: rgb(0, 0, 0);"><h3 style="color: rgb(0, 0, 0);">Client
 Side Javascript Functions</h3><span style="color: rgb(0, 0, 0);">None.</span><h3 style="color: rgb(0, 0, 0);">Examples</h3><h4 style="color: rgb(0, 0, 0);">Example
 1: Using a <code>webuijsf:html</code>
 tag<br></h4><code style="color: rgb(0, 0, 0);">&lt;webuijsf:page&gt;<br>&nbsp;&nbsp;&nbsp; &lt;webuijsf:html&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;webuijsf:head id="blah"
 title="hyperlink test page" /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:form id="form1"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:hyperlink&nbsp;
 id="hyperlinkSubmitsPage"&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 label="#{HyperlinkBean.label}" <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 action="#{HyperlinkBean.determineWhatToDoFunction}" /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/webuijsf:form&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;/webuijsf:body&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/webuijsf:html&gt;<br>&lt;/webuijsf:page&gt;</code><br
  style="color: rgb(0, 0, 0);"><span style="color: rgb(0, 0, 0);"><br></span><span
  style="color: rgb(0, 0, 0);"></span><code
  style="color: rgb(0, 0, 0);"><br></code>
]]></description>
    </tag>

    <tag>
        <name>hyperlink</name>

        <description><![CDATA[
 <p>
 Use the <code>webuijsf:hyperlink</code> tag to display a HTML hyperlink to a URL, or a
 link that submits a form.  If the url attribute is used, the link is a normal hyperlink
 that sends the browser to a new location.If the <code>actionExpression</code> attribute is used,
 the form is submitted. The hyperlink component's onClick event handler  executes the
<code> webui.suntheme.hyperlink.submit</code> javascript function to
submit the form when the link is clicked. The clicked hyperlink's client id is
passed on as a (name,value) pair in the request parameter, represented as
(<hyperlink_client_id>_submittedField, <hyperlink_client_id>)
to enable the server to identify which hyperlink was clicked. </p>

<p>If the 'onClick' attribute is specified, then that javascript is executed
first before the <code>webui.suntheme.hyperlink.submit</code> function gets executed.
.</p> 

 <p>The <code>webuijsf:imageHyperlink</code> component can be also be used to submit forms.</p>
 <h3>HTML Elements and Layout</h3>
 <p>
 The rendered HTML page displays an XHTML &lt;a&gt; element. If the link submits the 
 form the onclick will have some additional behavior that the user
 should be aware of. See the onClick attribute below.
 </p>
 <h3>Client-Side Javascript Functions</h3>
 <p>None.
 </p>
 <h3><a name="Examples">Examples</a></h3>
 <h4>Example 1: Create a hyperlink that submits the form</h4>
 <code>&lt;webuijsf:hyperlink
 id="hyperlinktest1"
 text="#{HyperlinkBean.text}" actionExpression="#{HyperlinkBean.success}"
 /&gt;
 </code>
 <p>Note: id can be used as a unique identifier if the hyperlink is programatically
 addressed. </p>
 <h4>Example 2: Create a hyperlink that goes to another page</h4>
 <p>This example sets the url attribute, which signifies that this link 
 <strong>will not</strong> submit to the server and will be a straight hyperlink.
 </p>
 <code>&lt;webuijsf:hyperlink
 id="hyperlinktest2"
 text="#{HyperlinkBean.text}" url="http://www.google.com" /&gt;
 </code>
 <br>
 <h4>Example 3: Using the body of a hyperlink to render text</h4>
 <p>This example shows how to use other components as children of the hyperlink tag.
 </p>
 <code>&lt;webuijsf:hyperlink id="hyperlinktest3" url="http://www.sun.com"&gt; <br>
 &nbsp;&nbsp;&nbsp;&lt;webuijsf:image url="myyahoo.gif" /&gt;<br>
 &nbsp;&nbsp;&nbsp;&lt;webuijsf:staticText text="more text" /&gt;<br>
 &lt;/webuijsf:hyperlink&gt;
 </code>
 <br>
 <h4>Example 4: Using f:params to add additional request parameters when the
 hyperlink action is invoked</h4>
 <p>
 When this link is clicked, the page will be submitted and the
 request parameter map will have two additional items in it: testingParam1
 and testingParam2, with their associated values.</p>
 <code>&lt;webuijsf:hyperlink&nbsp;
 id="hyperlinktest1"&nbsp; text="#{HyperlinkBean.label}"
 actionExpression="#{HyperlinkBean.success}" &gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;f:param name="testingParam1"
 value="success!"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;f:param name="testingParam2"
 value="failure!"/&gt;<br>
 &lt;/webuijsf:hyperlink&gt;<br>
 <br>
 </code>
]]></description>
    </tag>

    <tag>
        <name>iframe</name>

        <description><![CDATA[
 <p>Use
 the <code>webuijsf:iframe</code>
 tag&nbsp;
 to create an inline frame in the rendered HTML page. The <code>webuijsf:iframe</code>
 tag inserts a frame in which another web page can be displayed inside
 the web application page. <br></span><br
  style="color: rgb(0, 0, 0);"><h3 style="color: rgb(0, 0, 0);">HTML
 Elements and Layout</h3><span
  style="text-decoration: line-through; color: rgb(0, 0, 0);"></span><span style="color: rgb(0, 0, 0);">The
 iframe component is
 rendered as an </span><code
  style="color: rgb(0, 0, 0);">&lt;iframe&gt;</code><span
  style="color: rgb(0, 0, 0);"> XHTML
 element.&nbsp; The <code>webuijsf:iframe</code>
 tag can be configured by using the tag's attributes, which map to the <code>&lt;iframe&gt;</code>
 properties and are similarly named. <br></span><h3 style="color: rgb(0, 0, 0);">Theme
 Identifiers</h3><span style="color: rgb(0, 0, 0);">None.</span><h3 style="color: rgb(0, 0, 0);">Client
 Side Javascript Functions</h3><span style="color: rgb(0, 0, 0);">None.</span><br
  style="color: rgb(0, 0, 0);"><h3 style="color: rgb(0, 0, 0);">Example</h3><b style="color: rgb(0, 0, 0);">Example
 1: Using the webuijsf:iframe
 tag
 appropriately in a JSP page:<br></b><b
  style="color: rgb(0, 0, 0);"><br></b><code
  style="color: rgb(0, 0, 0);">&lt;?xml
 version="1.0"
 encoding="UTF-8"?&gt;<br>&lt;jsp:root version="1.2" xmlns:f="http://java.sun.com/jsf/core"
 xmlns:h="http://java.sun.com/jsf/html"
 xmlns:jsp="http://java.sun.com/JSP/Page"
 xmlns:webuijsf="http://www.sun.com/web/webuijsf"&gt;<br>&nbsp;&nbsp;&nbsp; &lt;jsp:directive.page
 contentType="text/html;charset=ISO-8859-1"
 pageEncoding="UTF-8"/&gt;&lt;f:view&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:page frame="true"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:html&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:head title="blah" /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:body&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText id="text1" text="Below is a
 frame within this page without a frameset" /&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:markup tag="br" singleton="true"
 /&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:iframe url="http://google.com" /&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&lt;/webuijsf:body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/webuijsf:html&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/webuijsf:page&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/f:view&gt;<br>&lt;/jsp:root&gt;</code>
]]></description>
    </tag>

    <tag>
        <name>image</name>

        <description><![CDATA[
 <p>
 Use the <code>webuijsf:image</code>
 tag to display an inline image in the rendered
 HTML page. The <code>url</code> attribute is used to specify the URL to the image
 file that
 is to be displayed.
 <p>
 The <code>webuijsf:image</code>
 tag can be used to display a theme-specific image in the
 rendered HTML page. The <code>icon</code> attribute used in the <code>webuijsf:image</code>tag is
 a key value that is mapped to a URL in theme properties file. The key
 is used
 to look up the appropriate image source and related attributes from the
 current
 theme. By specifying a key, you avoid the need to specify predefined
 constants
 such as height and width. The image can also be seamlessly changed when
 a
 different theme is selected.<br><br>
 <b>Note:</b><br>
 - Currently the list of
 icons that you can use is not publicly
 supported, but the icon names are specified in the<code>/com/sun/webui/jsf/suntheme/SunTheme.properties</code>
 file. The names are
 listed as resource keys of the format <code>image.ICON_NAME</code>.
 Use only
 the part of the key that follows image. For example, if the key is<code>image.ALARM_CRITICAL_SMALL</code>,
 you should specify<code>ALARM_CRITICAL_SMALL</code>
 as the value of the icon attribute of the<code>webuijsf:icon</code>
 tag. A list of supported icon values will be published in
 the near future.<br>
 <br> - 
 If you use an image that is a PNG type, this component will output the correct 
 format for an &lt;img&gt; tag to display a PNG correctly in Internet Explorer.  In order to use 
 this feature you must set the height and width properties of the image. If you do not specify 
 a height or width property, a generic default value will be used for each unspecified property. 
 The default height and width may produce an unsatisfactory image in IE.
 <h3>HTML Elements and Layout</h3>
 The rendered HTML page displays an XHTML compliant <code>&lt;img&gt;</code>
 element with any applicable element attributes. The attributes can be
 specified
 through the <code>&lt;webuijsf:image&gt;</code>
 tag attributes.<h3>Client Side Javascript
 Functions</h3>
 None.<br><h3>Examples</h3><h4>Example 1: Create an image</h4><code>&lt;webuijsf:image id="image1"
 url="../images/dot.gif" /&gt;<br><br></code>This will generate the
 following markup: <br>&nbsp;&nbsp; <br><code>&lt;img
 src="../images/dot.gif" alt="" /&gt;</code><br><br><h4>Example 2: Create a theme
 specific image<br></h4><code>&lt;webuijsf:image id="image2"
 icon="</code><code>ALARM_CRITICAL_SMALL</code><code>"
 /&gt;</code>
]]></description>
    </tag>

    <tag>
        <name>imageHyperlink</name>

        <description><![CDATA[
 <p>Use the <code>webuijsf:imageHyperlink</code><span
  style="color: rgb(0, 0, 0);">
 tag to display a clickable image in the rendered HTML page. The image
 is surrounded by an HTML hyperlink, allowing the image to function as a
 hyperlink.&nbsp; This tag is based on a <code>webuijsf:hyperlink</code>
 tag and functions the same way.&nbsp; The main difference is this
 tag will format an image with a surrounding hyperlink.&nbsp; See
 the <code>webuijsf:hyperlink</code>
 tag for more examples on using a hyperlink.</span></span><br>
 <br>
 The
 <span style="color: rgb(51, 51, 255);"><code
  style="color: rgb(0, 0, 0);">webuijsf:imageHyperlink</code><span
  style="color: rgb(0, 0, 0);"></span></span>
 component
 can be also be used to submit forms. If the action attribute is used,
 the form is submitted. If the
 url attribute is used, the link is a normal hyperlink that sends the
 browser to a new location.<br>
 <br>
 <span style="color: rgb(0, 0, 0);">The
 <code>webuijsf:imageHyperlink</code>
 can display a clickable icon image from the current theme in the
 rendered HTML page using the "icon" attribute. The <code></code>tag
 allows you to use an
 icon (a small image) from the current theme. Currently the list of
 icons that you can use is not publicly supported, but the icon names
 are specified in the <code>/com/sun/webui/jsf/suntheme/SunTheme.properties</code>
 file. The names are listed as resource keys of the format <code>image.ICON_NAME.</code>
 Use only the part of the key that follows <code>image.
 </code>For
 example, if the key is <code>image.ALARM_CRITICAL_SMALL</code>,
 you
 should use <code>ALARM_CRITICAL_SMALL
 </code>as the specified
 icon name in the <code>webuijsf:</code></span><span
  style="color: rgb(0, 0, 0);"><code>imageHyperlink</code>
 </span><span
  style="color: rgb(0, 0, 0);"><code></code>tag.
 In the near future a
 supported list will be published.&nbsp; </span><br>
 <span style="color: rgb(0, 0, 0);">
 <h3 style="color: rgb(0, 0, 0);">HTML
 Elements and Layout</h3>
 <span style="color: rgb(0, 0, 0);"></span>
 <p><span
  style="color: rgb(0, 0, 0);">The rendered HTML page
 contains
 an XHTML <code>&lt;a&gt;</code>
 element with an <code>&lt;img&gt;</code>
 element inside. <code></code>
 Image attributes that are specified
 with the <code>webuijsf:imageHyperlink</code>
 tag are used as attributes in
 the <code>&lt;img&gt;</code>&nbsp;
 element.</span><br>
 </p>
 <h3 style="color: rgb(0, 0, 0);">Theme
 Identifiers</h3>
 <span style="color: rgb(0, 0, 0);">None</span><br>
 <h3>Client Side Javascript
 Functions<span
  style="color: rgb(255, 153, 0);"></span><br>
 </h3>
 <p>None. <span
  style="color: rgb(255, 153, 0);"></span></p>
 <h3>Examples&nbsp;<span
  style="color: rgb(255, 153, 0);"></span></h3>
 <span style="color: rgb(255, 153, 0);"></span>
 <h4>Example 1: Create an <span
  style="text-decoration: line-through;"></span><span
  style="color: rgb(0, 0, 0);">imageHyperlink</span>
 with yahoo gif<br>
 </h4>
 <span style="color: rgb(255, 153, 0);"></span><code>&lt;webuijsf:imageHyperlink
 id="imagehyperlinktest1" imageURL="./myyahoo.gif"
 action="#{HyperlinkBean.getRequiredHelp}" /&gt;</code></span><span
  style="color: rgb(0, 0, 0);"><br>
 </span>
 <h4 style="color: rgb(0, 0, 0);">Example
 2: Create an IconHyperlink using the required
 indicator icon<br>
 </h4>
 <span style="color: rgb(0, 0, 0);">
 </span><code
  style="color: rgb(0, 0, 0);">&lt;webuijsf:iconHyperlink
 id="iconhyperlinktest1" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 icon="LABEL_REQUIRED_ICON"
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 action="#{HyperlinkBean.getRequiredHelp}" /&gt;
 </code><span
  style="color: rgb(0, 0, 0);"><br>
 </span>
 <p>Auto-generated component class.
 Do <strong>NOT</strong> modify; all changes
 <strong>will</strong> be lost!</p>
]]></description>
    </tag>

    <tag>
        <name>jobStatus</name>

        <description><![CDATA[
 <p>Use the <code>webuijsf:jobStatus</code> tag to display the number of jobs 
 currently running or a link to detailed information about the number of jobs
 currently running. This tag is typically specified as part of the 
 <code>webuijsf:masthead</code> tag's <code>statusArea</code> facet.</p>
 The <code>webuijsf:jobStatus</code> tag produces job information
 identical to the <code>webuijsf:masthead</code> tag's <code>jobCount</code> attribute.
 </p>
 <p>See the <a href="masthead.html"><code>webuijsf:masthead</code>
 documentation</a> for more information about the <code>statusArea</code> facet.</p>
 <p>
 The <code>statusArea</code> facet overrides the masthead's status area attributes. 
 The <code>webuijsf:jobStatus</code> tag enables you to include the job count in the status area, along with your custom
 components. The <a href="notificationPhrase.html"><code>webuijsf:notificationPhrase</code></a>,
 <a href="timeStamp.html"><code>webuijsf:timeStamp</code></a>, and <a
 href="alarmStatus.html"><code>webuijsf:alarmStatus</code></a>
 tags enable you to include the other standard status area components as
 well. </p>
 <p>Note that when you use the <code>webuijsf:masthead</code> attributes, spacing between the
 components is handled automatically. When you use the <code>webuijsf:alarmStatus</code>, 
 <code>webuijsf:jobStatus</code>, <code>webuijsf:timeStamp</code>, and <code>
  webuijsf:notificationPhrase</code> tags in the <code>statusArea</code> facet, you may 
 have to add code to handle the
 spacing between the components, as demonstrated in the example below.
 <h3>HTML Elements and Layout</h3>
 The rendered HTML page includes an <code>&lt;img&gt;</code> element for 
 the status icon, adjacent to an 
 <code>&lt;a&gt;</code>
 hyperlink containing the job status text label, and number of jobs
 running.</p>
 <h3>Configuring the <code>webuijsf:jobStatus</code> tag</h3>
 The default text label is
 "Jobs running: ", but you can specify your own text label with the <code>text</code>
 attribute. Specify the number of jobs with the <code>numJobs</code> attribute. Use 
 other attibutes, such
 as <code>url</code>,
 <code>action</code>, or <code>actionListener</code> to provide
 detailed information about the number of jobs
 currently running.</p>
 <p>The <code>immediate</code> attribute should be set to true when this component 
 is used in the masthead.</p>
 <h3>Theme Identifiers</h3>
 <p>The theme provides the following icon identifier, which is used for the job status image.</p>
 <p><code>MASTHEAD_STATUS_ICON</code></p>
 <h3>Client Side Javascript Functions</h3>
 <p>None.</p>
 <h3>Examples</h3>
 <h4>Example 1: Display job status information as part of the masthead statusArea facet</h4>
 <p>This example uses <code>webuijsf:panelGroup</code>
 to enclose the tags for the status items. The components
 are also enclosed in <code>f:verbatim</code>
 tags that specify <code>&lt;div&gt;</code>
 elements with a class selector that applies the correct spacing around
 the component in the masthead. </p>
 <pre><code>&lt;webuijsf:masthead id="Masthead" productImageURL="../images/webconsole.png"
         productImageDescription="Java Web Console" userInfo="user_name" 
         serverInfo="server_name"&gt;
     &lt;f:facet name="statusArea"&gt;
       &lt;webuijsf:panelGroup id="statusPanel" separator=""&gt;
         &lt;webuijsf:markup tag="div" styleClass="#{themeStyles.MASTHEAD_STATUS_DIV}"&gt;
         &lt;webuijsf:notificationPhrase text="Important info goes here" /&gt;
         &lt;webuijsf:image icon="DOT" border="0" width="20" height="1" /&gt;
         &lt;webuijsf:jobStatus immediate="true" numJobs="1" /&gt;
         &lt;/webuijsf:markup&gt;
         &lt;webuijsf:markup tag="div" styleClass="#{themeStyles.MASTHEAD_TIME_DIV}"&gt;
         &lt;webuijsf:timeStamp /&gt;
         &lt;/webuijsf:markup&gt;
         &lt;webuijsf:markup tag="div" styleClass="#{themeStyles.MASTHEAD_ALARM_DIV}"&gt;
         &lt;webuijsf:alarmStatus immediate="true" numDownAlarms="0" numCriticalAlarms="1" numMajorAlarms="2" numMinorAlarms="3" /&gt;
         &lt;/webuijsf:markup&gt;
       &lt;/webuijsf:panelGroup&gt;
     &lt;/f:facet&gt;
 &lt;/webuijsf:masthead&gt;
 </code></pre>
]]></description>
    </tag>

    <tag>
        <name>label</name>

        <description><![CDATA[
 <p>Use the <code>webuijsf:label</code>
     tag to display a label for a component. To specify which component
     the label belongs to you may either:</p><ul><li>Place the labelled component in the body of <code>webuijsf:label</code>; or </li><li>Set the value of the <code>for</code> attribute of <code>webuijsf:label</code> to the id of the
     labelled component.</li></ul><p>If the tags are adjacent on the page, the first option should be
     preferred as it is simpler to configure the tag this way.</p><p>Note that many components in this library have <code>label</code><code>labelLevel</code> attributes (and sometimes<code>labelOnTop</code>) which can be used instead of <code>webuijsf:label</code>. The main reason
     to use <code>webuijsf:label</code> is if you need to specify the
     appearance of the label beyond what these attributes permit. </p><h3>HTML Elements and Layout</h3><p>
 The <code>webuijsf:label</code> tag results in a HTML <code>label</code>
     or <code>span</code> element. A span element is rendered if no
     labelled component could be found. </p><p> If the tag has a body, the body must consists of tags
     corresponding to JSF components only. The corresponding JSF
     components become children of the <code>Label</code> component. 
     All the child components are rendered after the <code>label</code>
     element.</p>
 <p>If the tag has a body but no <code>for</code> attribute, a<code>label</code> is printed, and its 
 <code>for</code> attribute
     is set to the element ID of the first child component which is an <code>EditableValueHolder.</code>
 <h3>Theme Identifiers</h3><h3>Client Side Javascript Functions</h3>
 <p>None.</p>
 <h3>Examples</h3>
 <h4>Example 1: <code>webuijsf:label</code> with <code>for</code> attribute</h4>
 <pre>&lt;webuijsf:label id="label1" text="Label 1:" for="field1" labelLevel="2"/&gt;
 &lt;webuijsf:field id="field1" text="#{Bean.value}" type="text" trim="true"/&gt;</pre>
 <h4>Example 2: <code>webuijsf:label</code> with labelled component in tag body</h4>
 <pre>&lt;webuijsf:label id="label2" text="Label 2:" labelLevel="2"/&gt;
 &lt;webuijsf:field id="field2" text="#{Bean.value}" type="text" 
                     trim="true"/&gt;&lt;/webuijsf:label&gt; </pre>
 <h4>Example 3: Using the label attribute instead of <code>webuijsf:label</code></h4>
 <pre>&lt;webuijsf:field id="field3" text="#{Bean.value}" type="text" 
                 trim="true" label="Label 3:" labelLevel="2"/&gt;</pre>
]]></description>
    </tag>

    <tag>
        <name>legend</name>

        <description><![CDATA[
 <p>
 Use the <code>webuijsf:legend</code>
 tag to display a legend, typically at the top of a page.
 <br>
 The <code>webuijsf:legend</code> tag has one facet:<br>
 &nbsp;&nbsp;&nbsp;<code>legendImage</code> - this allows the developer to place their own image and/or text in the legend.<br>
 <h3>HTML Elements and Layout</h3>
 A legend consists of an icon/image followed by explanatory text describing the icon/image.
 <h3>Client Side Javascript Functions</h3>
 None.
 <h3>Examples</h3>
 <b>Example 1: An example showing the default (indicates required field) legend:</b> <br>
 <code>
 &lt;webuijsf:legend id="legend1" /&gt;
 </code>
 <br><br>
 <b>Example 2: An example showing a custom icon, text, styles:</b> <br>
 <pre>
 <code>&lt;webuijsf:legend id="legend2" text="Critical Alarms" 
 &nbsp;&nbsp;&nbsp;&nbsp;style="position: absolute; left:100px; color:red; font-weight:bold"/&gt;
 &nbsp;&nbsp;&lt;f:facet name="legendImage"&gt;
 &nbsp;&nbsp;&nbsp;&nbsp;webuijsf:image id="alarmimage" icon="ALARM_CRITICAL_SMALL" alt="Critical Alarm"/&gt;
 &nbsp;&nbsp;&lt;/f:facet&gt;
 &lt;/webuijsf:legend&gt;
 </code>
 </pre>
 <br>
]]></description>
    </tag>

    <tag>
        <name>link</name>

        <description><![CDATA[
 <p>Use the <code>webuijsf:link</code><span
  style="color: rgb(0, 0, 0);"> tag to insert header
 references to
 other documents related to this HTML page. The <code>webuijsf:link</code>
 tag must be used inside the <code>webuijsf:head</code>
 tag, and can be used
 multiple times for references to multiple documents. A common use for
 the <code>webuijsf:link</code>
 tag is to link to an external stylesheet, but
 it can also be used to provide information about the document's
 relationship to other documents.&nbsp; There are a
 number of useful defaults making it simpler to specify an HTML link
 using this tag.</span>
 <h3>HTML Elements and Layout</h3><span style="color: rgb(0, 0, 0);">The
 rendered HTML page contains </span><code
  style="color: rgb(0, 0, 0);">&lt;link&gt;</code><span
  style="color: rgb(0, 0, 0);"> element, along with any
 attributes
 specified through the <code>webuijsf:link</code>
 tag attributes.&nbsp; </span><h3 style="color: rgb(0, 0, 0);">Theme
 Identifiers</h3><span style="color: rgb(0, 0, 0);">None.</span><h3 style="color: rgb(0, 0, 0);">Client
 Side Javascript Functions</h3><span style="color: rgb(0, 0, 0);">None.</span><h3 style="color: rgb(0, 0, 0);">Example</h3><b style="color: rgb(0, 0, 0);">Example
 1: Create a context relative link to a stylesheet</b><br
  style="color: rgb(0, 0, 0);"><br style="color: rgb(0, 0, 0);"><code style="color: rgb(0, 0, 0);">&lt;webuijsf:page&gt;<br>&nbsp;&nbsp;&nbsp; &lt;webuijsf:html&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;webuijsf:head id="blah"
 title="hyperlink test page"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span
  style="font-weight: bold;">&lt;webuijsf:link
 url="/context-relative-path/tomyfile/stylesheet.css"&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/webuijsf:head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&lt;/webuijsf:body&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/webuijsf:html&gt;<br>&lt;/webuijsf:page&gt;</code>
]]></description>
    </tag>

    <tag>
        <name>listbox</name>

        <description><![CDATA[
 <p>
   Use the <code>webuijsf:listbox</code> tag to display in the rendered HTML page a box  
   that allows users to select one or more items from a list. The list box shows 
   more than one list option at a time.  Use the <code>webuijsf:dropDown</code> 
   tag if you want to display one line and open the list when the user selects it.
   </p>
   <h3>HTML Elements and Layout</h3>
   <p>The listbox component is rendered as an XHTML <code>&lt;select&gt;</code>
     element. The <code>&lt;option&gt;</code> elements within the 
     <code>&lt;select&gt;</code> element are derived
     from the <code>webuijsf:listbox</code> tag's <code>items</code> attribute.</p>
     <h3>Configuring the <code>webuijsf:listbox</code> tag</h3>
     <p>Use the <code>items</code> attribute to specify
 the options to be displayed in the listbox. The
 value of the items attribute must be a JavaServer Faces EL
 expression that identifies an array, a <code>java.util.Collection</code>
 or a <code>java.util.Map</code> of <code>com.sun.webui.jsf.Option</code>.</p>
 <p>Use the <code>multiple</code> attribute to
 specify that a user can select more than one item.
 By default <code>multiple</code> is set to false. If multiple 
 selections are allowed, the model object property that is
 specified in the <code>selected</code> attribute must be
 either an array of primitives, an array of objects, or a subclass of <code>java.util.List</code>.</p>
 <p>Use the <code>selected</code> attribute to associate the component
 with a model object that represents the current choice, by setting the
 value to a JavaServer Faces EL expression that corresponds to a property of a managed
 bean. The first time the component is rendered, the options that correspond to the
 value of the <code>selected</code> model object property are marked as selected,
 using the <code>equals</code> method on the model object. </p>
 <p>Use the <code>rows</code> attribute to specify
 the number of list items that can be seen at once, without scrolling.</p> 
 <p>The list items will be rendered using a monospace font if
 the <code>monospace</code> attribute is set to true.</p>
 <p>To optionally specify a label for the component, use the <code>label</code>
 attribute, or specify a <code>label</code> facet.</p>
 <h4>Grouping Options in the Listbox</h4>
 The XHTML <code>&lt;select&gt;</code> element can contain an 
 <code>&lt;optgroup&gt;</code> element to define a group 
 of related items in a listbox. The <code>&lt;optgroup&gt;</code> has a label, 
 and the options 
 within the group are indented in the displayed listbox. You can configure the 
 list of items created with the <code>webuijsf:listbox</code> tag to be rendered with 
 <code>&lt;optgroup&gt;</code> elements by setting up your backing bean to use a 
 <code>com.sun.webui.jsf.model.OptionGroup</code> model bean. A backing bean object that 
 populates the listbox from an array with grouped options might look as follows.  
 <pre>
 public BackingFileChoice() {
         airports = new Option[3];
         OptionGroup groupCA = new OptionGroup();
         groupCA.setLabel("California");
         caAirports = new Option[4];
         caAirports[0] = new Option("SFO", "San Francisco");
         caAirports[1] = new Option("OAK", "Oakland");
         caAirports[2] = new Option("SAN", "San Diego");
         caAirports[3] = new Option("LAX", "Los Angeles");
         groupCA.setOptions(caAirports);
         airports[0] = groupCA;
         OptionGroup groupNY = new OptionGroup();
         groupNY.setLabel("New York");
         nyAirports = new Option[4];
         nyAirports[0] = new Option("ALB", "Albany");
         nyAirports[1] = new Option("JFK", "New York, JFK");
         nyAirports[2] = new Option("LGA", "New York, LaGuardia");
         nyAirports[3] = new Option("BUF", "Buffalo");
         groupNY.setOptions(nyAirports);
         airports[1] = groupNY;
         OptionGroup group = new OptionGroup();
         group.setLabel("Other airports");
         otherAirports = new Option[3];
         otherAirports[0] = new Option("PDX", "Portland");   otherAirports[1] = new Option("NRT", "Tokyo");
         otherAirports[2] = new Option("TBD", "Future Airport");
         otherAirports[2].setDisabled(true);
         group.setOptions(otherAirports);
         airports[2] = group;
     }
 </pre>    
 <p>The listbox that is rendered with this backing bean will appear as follows:</p>
 <br>
 <form id="menuform1" method="post"
  enctype="application/x-www-form-urlencoded">
   <select class="Lst_sun4" id="listboxform:airport_list"
  size="14"
  onchange="webui.suntheme.listbox.changed('listboxform:airport');  return false;">
   <optgroup label="California" class="LstOptGrp_sun4">
   <option class="LstOpt_sun4" value="SFO">San Francisco</option>
   <option class="LstOpt_sun4" value="OAK">Oakland</option>
   <option class="LstOpt_sun4" value="SAN">San Diego</option>
   <option class="LstOpt_sun4" value="LAX">Los Angeles</option>
   </optgroup>
   <option class="LstOptSep_sun4" disabled="disabled">----------------------------</option>
   <optgroup label="New York" class="LstOptGrp_sun4">
   <option class="LstOpt_sun4" value="ALB">Albany</option>
   <option class="LstOpt_sun4" value="JFK">New York, JFK</option>
   <option class="LstOpt_sun4" value="LGA">New York,
 LaGuardia</option>
   <option class="LstOpt_sun4" value="BUF">Buffalo</option>
   </optgroup>
   <option class="LstOptSep_sun4" disabled="disabled">----------------------------</option>
   <optgroup label="Other airports" class="LstOptGrp_sun4">
   <option class="LstOpt_sun4" value="PDX">Portland</option>
   <option class="LstOpt_sun4" value="NRT">Tokyo</option>
   <option class="LstOptDis_sun4" value="TBD"
  disabled="disabled">Future
 Airport</option>
   </optgroup>
   </select>
 </form>
 The important points to note in the sample backing bean are:
 <ul>
   <li>
     <p>The OptionGroups each have a <code>setLabel</code>
 method that sets the label of the corresponding <code>&lt;optgroup&gt;</code>.</p>
   </li>
   <li>
     <p>A separator (a series of dashes) is rendered above the optgroup labels. 
     By default, the separator is rendered above each optgroup in a listbox. 
     The separators can be removed by setting the <code>webuijsf:listbox</code> tag's 
     <code>separators</code> attribute to false.</p>
   </li>
   <li>
     <p>The <code>setOptions</code> method sets the options of each subgroup to 
     the appropriate array values.</p>
   </li>
   <li>
     <p>The <code>setDisabled</code> method can be used to disable any of the 
     options in the listbox.</p>
   </li>
 </ul>
 <h3>Facets</h3>
 <p>The <code>label</code> facet is used to specify a custom
 component for the label. The <code>label</code> facet overrides
 the <code>label</code> attribute.</p>
 <h3>Theme Identifiers</h3>
 TBA
 <h3>Client-side JavaScript Functions</h3>
 <p>The listbox component provides the following facets:</p>
 <ul>
   <li>
     <p><code>webui.suntheme.listbox.setDisabled(&lt;id&gt;,
 &lt;disabled&gt;)</code>:
 Use this function to enable and disable the listbox. <code>&lt;id&gt;</code>
 must be the generated id of the component. Set <code>&lt;disabled&gt;</code>
 to true to disable the component, or false to enable it. </p>
   </li>
 </ul>
 <ul>
   <li>
     <p><code>webui.suntheme.listbox.changed(&lt;id&gt;)</code>:
 This function is
 automatically invoked by the listbox's <code>onchange</code>
 handler. <code>&lt;id&gt;</code> must be the generated id of the component.</p>
   </li>
 </ul>
     <h3>Examples</h3>
     <h4>Example 1: Listbox with single selection</h4>
 <pre>
     &lt;webuijsf:listbox selected="#{flightSearch.leaveAirport}" 
                  items="#{dataBean.airports}" 
                  rows="6"
                  id="leaveAirport" 
                  toolTip="#{msgs.chooseAirport}"
                  label="#{msgs.chooseDepartureAirport)" /&gt;
 </pre>
     <h4>Example 2: Listbox that uses a label facet</h4>
 <pre>                 
     &lt;webuijsf:listbox selected="#{flightSearch.leaveAirport}" 
                  items="#{dataBean.airports}" 
                  rows="6"
  	         id="leaveAirport" 
                  toolTip="#{msgs.chooseAirport}"
                  label="#{msgs.chooseDepartureAirport)" &gt;
         &lt;f:facet name="label"&gt;
             &lt;webuijsf:label id="aplabel" text="#{msgs.chooseDepartureAirport)" 
                        for="leaveAirport" labelLevel="2"/&gt;
         &lt;/f:facet&gt;
     &lt;/webuijsf:listbox&gt;
 </pre>
]]></description>
    </tag>

    <tag>
        <name>markup</name>

        <description><![CDATA[ <p
  style="color: rgb(0, 0, 0);"><span
  style="text-decoration: line-through;"></span>Use
 the <code>webuijsf:markup </code>tag
 to insert any type of XML markup
 in the rendered HTML page. The <code>webuijsf:markup</code>
 tag allows you to insert HTML
 elements into the JSP page where HTML is not permitted inside a JSF
 tag.&nbsp; <br></p><h3 style="color: rgb(0, 0, 0);">Configuring
 the markup tag <br></h3><p style="color: rgb(0, 0, 0);">Use
 the <code>tag</code>
 attribute to specify the type of
 HTML element to insert.&nbsp; For instance, to insert a <code>&lt;p&gt;</code>
 tag, set the attribute to <code>tag="p"</code>
 in the <code>webuijsf:markup</code>
 tag.&nbsp; Note that you do not
 include the angle brackets.</p><p style="color: rgb(0, 0, 0);">If
 the HTML element you are
 inserting is a singleton element, you must specify the <code>singleton</code>
 attribute.&nbsp; The singleton attribute causes the trailing<code>
 /&gt;</code>
 to be generated in the rendered HTML. For example, the&nbsp; <code>&lt;br&gt;</code>
 element is a singleton element, which must be rendered as <code>&lt;br
 /&gt; </code>to be XHTML
 compliant.</p><p style="color: rgb(0, 0, 0);">If
 you want to specify
 additional HTML attributes for the element you are inserting, use the <code>extraAttributes</code>
 attribute. <br></p><h3 style="color: rgb(0, 0, 0);">HTML
 Elements and Layout</h3><span style="color: rgb(0, 0, 0);">The
 rendered HTML page includes
 the HTML element that was specified in the </span><code
  style="color: rgb(0, 0, 0);">webuijsf:markup</code><span
  style="color: rgb(0, 0, 0);"> tag's </span><code
  style="color: rgb(0, 0, 0);">tag</code><span
  style="color: rgb(0, 0, 0);"> attribute, along with
 any HTML
 attributes that were included in the <code>extraAttributes</code>
 attribute.<br></span><h3 style="color: rgb(0, 0, 0);">Theme
 Identifiers<br></h3><p style="color: rgb(0, 0, 0);">None.</p><h3 style="color: rgb(0, 0, 0);">Client
 Side Javascript
 Functions&nbsp;</h3><span style="color: rgb(0, 0, 0);">None.</span><br
  style="color: rgb(0, 0, 0);"><h3 style="color: rgb(0, 0, 0);">Examples</h3><span style="color: rgb(0, 0, 0);"></span><h4 style="color: rgb(0, 0, 0);">Example
 1:&nbsp; Insert a
 singleton element <br></h4><pre style="color: rgb(0, 0, 0);"><code>&lt;webuijsf:markup tag="br" singleton="true" /&gt;</code><code><br></code></pre><p style="color: rgb(0, 0, 0);">This
 generates <code>&lt;br
 /&gt;</code>.</p><code style="color: rgb(0, 0, 0);"></code><h4 style="color: rgb(0, 0, 0);">Example
 2: Insert a <code>&lt;div&gt;</code>
 element with a style attribute <br></h4><code style="color: rgb(0, 0, 0);"></code><code
  style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;&lt;webuijsf:markup
 tag="div"
 style="color:blue" /&gt; <br></code><p style="color: rgb(0, 0, 0);">This
 generates <code>&lt;div
 style="color:blue" &gt;</code></p><code style="color: rgb(0, 0, 0);"></code><h4 style="color: rgb(0, 0, 0);">Example
 3: Insert a <code>&lt;h3&gt;</code>
 with HTML attributes<br></h4><pre style="color: rgb(0, 0, 0);"><code>&nbsp; &nbsp; </code><code>&lt;webuijsf:markup tag="h3" extraAttributes="onclick='alert(&amp;quot;foobar&amp;quot;);'" &gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText text="Example" /&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/webuijsf:markup&gt;</code></pre><code style="color: rgb(0, 0, 0);"></code><span
  style="color: rgb(0, 0, 0);">This generates a
 level 3 head titled Example that
 will display the alert with "foobar" in it when clicked.</span>
 <p>Auto-generated component class.
 Do <strong>NOT</strong> modify; all changes
 <strong>will</strong> be lost!</p>
]]></description>
    </tag>

    <tag>
        <name>mastFooter</name>

        <description><![CDATA[
<p> Use the <code>webuijsf:mastFooter</code> tag to display a a footer,
at the bottom of each rendered HTML page of the web
application. The footer signifies the end of the display for that page.
The footer should correspond to a masthead that is usually displayed at the
top of each rendererd HTML page. </p>

<h3>HTML Elements and Layout</h3>
<p>In the rendered HTML page, the mastFooter is created with <code>&lt;div&gt;</code>
elements. The footer consists of a corporate image which could be supplied by
using the <code>corporateImageURL</code> attribute or a <code>corporateImage</code>
facet:</p>
<ul>
<li>
<p> mastFooter code sample </p>
<ul>
<li>
<p>Simple use case: </p>
<code>&lt;webuijsf:footer id="myfoot"/&gt;</code>
</li>
<li>
<p>Using the corporateImage attribute:</p>
<code>&lt;webuijsf:mastFooter id="myFoot" 
    corporateImageURL="/path/to/image/foo.jpg" /&gt;
</code>
</li>
<li>
<p>Using the corporateImage Facet:</p>

<code>&lt;webuijsf:mastFooter id="myFoot"&gt;
    <br/>
      &lt;f:facet name="corporateImage"&gt;
      <br/>
          &lt;webuijsf:image src="/path/to/image/foo.jpg" height="hh" width="ww"/&gt;
      <br/>
      &lt;/f:facet&gt;
      <br/>
      &lt;/webuijsf:mastFooter&gt;
 </code>
</li>
    ]]></description>
    </tag>
    
    <tag>
        <name>masthead</name>

        <description><![CDATA[
<p> Use the <code>webuijsf:masthead</code> tag to display a masthead,
or page banner, at the top of each rendered HTML page of the web
application. The masthead can be used to display information about the
application, the current user and server, and include various links and
status information. If you use the image attributes of this tag and the
images are PNG file type, then you must set the height and width
attributes of this tag for them to display properly on Internet
Explorer. </p>
<p>The <code>webuijsf:masthead</code> tag must be used as a child of
the <code>webuijsf:form</code> tag.</p>
<p>The <a href="mastFooter.html"><code>webuijsf:mastFooter</code></a>
tag is intended to be used in pages that use the masthead, to provide a
matching footer that contains the corporate branding image.<br>
</p>
<h3>HTML Elements and Layout</h3>
<p>In the rendered HTML page, the masthead is created with <code>&lt;table&gt;</code>
elements. The masthead consists of the following areas:</p>
<ul>
  <li>
    <p>Utility Bar - The masthead's top row,&nbsp;which spans across
the width of the masthead. The utility bar contains links that you
specify with the <code>utilities</code> attribute or with various
facets. See the <a href="#utilityBar">Utility Bar section</a> for more
information.</p>
  </li>
  <li>
    <p>User Info - Displays the name of the user running the
application, which is specified with the <code>userInfo</code>
attribute. By default the label is <span style="font-weight: bold;">User</span>
but this can be changed with the <code>userInfoLabel</code> attribute.
The <code>userInfo</code> facet can be used to replace both user info
fields with other components.</p>
  </li>
  <li>
    <p>Server Info - Displays the name of the server where the
application is running, which is specified with the <code>serverInfo</code>
attribute. By default the label is&nbsp;<span style="font-weight: bold;">Server</span>,
but this can be changed with the <code>serverInfoLabel</code>
attribute. The <code>serverInfo</code> facet can be used to replace
both server info fields with other components.</p>
  </li>
</ul>
<ul>
  <li>
    <p>Product Info - Displays the graphic file for the product name,
which is specified with the <code>productImageURL</code> attribute.
The <code>productImageDescription</code> attribute is used to provide
text to be used as alt text for the image, and <code>productImageHeight</code>
and <code>productImageWidth</code> can be used to provide the
dimensions of the image when necessary.</p>
  </li>
  <li>
    <p>Status Area - Displays system messages, job information,
date/time, and alarm counts by default. These items are specified with
the attributes <code>notificationMsg</code>, <code>jobCount</code>, <code>dateTime</code>,
and <code>alarmCounts</code><code></code>. The status area content can
also be specified with various facets. See the <a href="#StatusArea">Status
Area section</a> for more information.</p>
  </li>
  <li>
    <p>Brand Image - Displays the graphic file for a brand for the
application. By default, this is an image that is specified in the
theme, but can be overridden with the <code>brandImageURL</code>
attribute. The <code>brandImageDescription</code> attribute is used to
provide text to be used as alt text for the image, and <code>brandImageHeight</code>
and <code>brandImageWidth</code> can be used to provide the dimensions
of the image when necessary.</p>
  </li>
</ul>
<p>The following diagram shows the locations of the masthead areas, and
the attributes and facets you can use to provide the content for each
area. </p>
<table style="background-color: rgb(210, 224, 235); width: 100%;"
 border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;" rowspan="1" colspan="4"><span
 style="font-weight: bold;">Utility Bar </span><code>&nbsp;</code><code>utilityBar</code>
facet
      <table style="text-align: left; width: 100%;" border="1"
 cellpadding="2" cellspacing="2">
        <tbody>
          <tr>
            <td style="text-align: left; vertical-align: top;"><code>consoleLink<br>
            </code>facet<code></code></td>
            <td style="text-align: left; vertical-align: top;"><code>versionLink<br>
            </code>facet</td>
            <td style="vertical-align: top;"><code>search</code> facet<br>
            </td>
            <td style="vertical-align: top; text-align: left;">&nbsp;Links
specified with <code>utilities</code> attribute&nbsp;</td>
            <td style="text-align: left; vertical-align: top;"><code>logoutLink<br>
            </code>facet</td>
            <td style="text-align: left; vertical-align: top;"><code>helpLink<br>
            </code>facet</td>
          </tr>
        </tbody>
      </table>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top; width: 25%;"><span
 style="font-weight: bold;">User Info</span> <br>
      <code>userInfo</code>, <code>userInfoLabel</code> attributes or <code>userInfo</code>
facet</td>
      <td style="vertical-align: top; width: 25%;"><span
 style="font-weight: bold;">Server Info</span> <br>
      <code>serverInfo</code>, <code>serverInfoLabel</code> attributes
or <code>serverInfo</code> facet</td>
      <td colspan="1" rowspan="2" style="vertical-align: top;"><span
 style="font-weight: bold;"></span>(empty)<br>
      </td>
      <td colspan="2" rowspan="2"
 style="vertical-align: top; width: 10%;"><span
 style="font-weight: bold;">Brand Image<br>
      </span><code>brandImageURL</code> and related attributes, or <code>brandImage</code>
facet<br>
      </td>
    </tr>
    <tr>
      <td colspan="2" style="vertical-align: top; text-align: left;"><span
 style="font-weight: bold;">Product Info</span> <code><br>
productImageURL</code> and related attributes, or&nbsp;<code>productInfo</code>
facet </td>
    </tr>
    <tr>
      <td style="vertical-align: top;" rowspan="1" colspan="4"><span
 style="font-weight: bold;">Status Area&nbsp; </span><code></code><code>statusArea</code>
facet
      <table style="text-align: left; width: 100%;" border="1"
 cellpadding="2" cellspacing="2">
        <tbody>
          <tr>
            <td style="vertical-align: top;"><code>notificationMsg </code><code></code>attribute<br>
            <code></code><code>notificationInfo </code><code></code>facet</td>
            <td style="text-align: left; vertical-align: top;"><code>jobCount
            </code>attribute<br>
            <code>jobsInfo </code>facet<code></code></td>
            <td style="text-align: left; vertical-align: top;"><code>dateTime
            </code><code></code>attribute<br>
            <code>dateTimeInfo </code>facet</td>
            <td style="vertical-align: top; text-align: left;">&nbsp;<code>alarmCounts</code>
attribute<br>
            <code>currentAlarmsInfo</code><code> </code>facet<code></code>&nbsp;</td>
          </tr>
        </tbody>
      </table>
      </td>
    </tr>
  </tbody>
</table>
<h3><a name="utilityBar"></a>Utility Bar</h3>
<p>The content of the Utility Bar can be specified with the following
individual facets: </p>
<ul>
  <li>
    <p><code>consoleLink -</code> by default displays an <span
 style="font-weight: bold;">Applications</span> button. This button can
be used to provide a link back to some "home" location, such as an
application launch page, or a main console page.</p>
  </li>
  <li>
    <p><code>versionLink - </code>by default displays a <span
 style="font-weight: bold;">Version</span> button, which can be used to
provide a popup window that displays information about the application
version. You can use the <a href="versionPage.html">webuijsf:versionPage</a>
tag to display version information in the JSP for the popup window.</p>
  </li>
   <li><code>search</code> - displays components that you specify to
provide search capability.&nbsp; You must provide the action method to
perform the search.&nbsp; The theme provides an icon with the key <code>MASTHEAD_SEARCH</code>
that can be used for a search button.&nbsp; See the <a href="#Examples">Examples</a>
for more details about using the <code>search</code> facet.<br>
  </li>
  <li>
    <p><code>logoutLink </code>- by default displays a <span
 style="font-weight: bold;">Logout </span>button, which can be used to
log the user out of the application.</p>
  </li>
  <li>
    <p><code>helpLink </code>- by default displays a <span
 style="font-weight: bold;">Help</span> button, which can be used to
open a popup window that displays help for the application. You can use
the <a href="helpWindow.html">webuijsf:helpWindow</a> tag as a child
of the <code>helpLink</code> facet to implement the help window.</p>
  </li>
</ul>
<p>The child components of the facets can override the labels of the
buttons by specifying their own text values. </p>
<p>These facets can be used along with the <code>utilities</code>
attribute, which specifies additional custom links to display in the
utility bar. The <code>utilities</code> attribute must be bound to an
array of Hyperlink&nbsp;components. If no style has been set on the
hyperlinks bound to the <code>utilities</code> attribute, the masthead
component applies styles that are used for the Logout and Help links.
The links that you specify with the <code>utilities</code> attribute
are displayed to the left of the <span style="font-weight: bold;">Logout</span>
and <span style="font-weight: bold;">Help</span> buttons. </p>
<h4>utilityBar Facet</h4>
<p>The Utility Bar content can also be specified with the <code>utilityBar</code>
facet, which overrides all other attributes and facets supported for
the Utility Bar area. If you want to specify more than one component in
the <code>utilityBar</code> facet, you must enclose the component tags
in a container such as the <code>webuijsf:panelGroup</code> tag.</p>
<h3><a name="StatusArea"></a>Status Area<br>
</h3>
<p>The Status Area can display the status items shown in the following
table. Each status item can be configured with an attribute of the <code>webuijsf:masthead</code>
tag, or a facet, or as a component in the <code>statusArea</code>
facet. The attributes provide the default display of the status items,
and adhere to UI guidelines. The individual facets allow you to
customize an individual status item, while using the attributes for
other status items to obtain the default display style. You can use the
<code>statusArea</code> facet to customize the entire status area, by
adding your own custom tags in the facet. See the <a
 href="#statusAreafacet">statusArea Facet</a> section for more
information. </p>
<table style="text-align: left; width: 100%; height: 147px;" border="1"
 cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <th>Status items</th>
      <th>Attributes</th>
      <th>Individual Facets</th>
      <th>Components in <code>statusArea</code> facet</th>
    </tr>
    <tr>
      <td style="vertical-align: top;">A notification message</td>
      <td style="vertical-align: top;"><code>notificationMsg</code></td>
      <td style="vertical-align: top;"><code>notificationInfo</code></td>
      <td style="vertical-align: top;"><a href="notificationPhrase.html"><code>webuijsf:notificationPhrase</code></a></td>
    </tr>
    <tr>
      <td style="vertical-align: top;">The number of jobs running</td>
      <td style="vertical-align: top;"><code>jobCount</code><br>
      <br>
      </td>
      <td style="vertical-align: top;"><code>jobsInfo</code></td>
      <td style="vertical-align: top;"><a href="jobStatus.html"><code>webuijsf:jobStatus</code></a></td>
    </tr>
    <tr>
      <td style="vertical-align: top;">The current date and time</td>
      <td style="vertical-align: top;"><code>dateTime</code><br>
      <br>
      </td>
      <td style="vertical-align: top;"><code>dateTimeInfo</code></td>
      <td style="vertical-align: top;"><a href="timeStamp.html"><code>webuijsf:timeStamp</code></a></td>
    </tr>
    <tr>
      <td style="vertical-align: top;">The current number of down,
critical, major and minor alarms</td>
      <td style="vertical-align: top;"><code>alarmCounts</code><br>
      <br>
      </td>
      <td style="vertical-align: top;"><code>currentAlarmsInfo</code></td>
      <td style="vertical-align: top;"><code><a href="alarmStatus.html">webuijsf:alarmStatus</a></code></td>
    </tr>
  </tbody>
</table>
<h4><a name="statusAreafacet"></a>statusArea Facet</h4>
The <code>statusArea</code> facet overrides all the attributes and
individual facets for the status items. In addition to your own tags,
you can use component tags in the <code>statusArea</code> facet to add
functionality that is similar to functionality provided by the
attributes. If you want to specify more than one component in the <code>statusArea</code>
facet, you must enclose the component tags inside a container such as
the <code>webuijsf:panelGroup</code> tag. You should also enclose the
components within <code>&lt;div&gt;</code> tags to specify a class
selector that properly sets the spacing around the components within
the masthead.&nbsp; For example:<br>
<br>
<ul>
  <li>
    <p><code>&lt;webuijsf:markup tag="div"
styleClass="#{themeStyles.MASTHEAD_STATUS_DIV}"&gt;</code>&nbsp; Sets
padding and alignment for status/progress
information in status area of masthead</p>
  </li>
  <li>
    <p><code>&lt;webuijsf:markup tag="div"
styleClass="#{themeStyles.MASTHEAD_TIME_DIV}"&gt;</code>&nbsp; Sets
padding and alignment for time stamp information
in status area of masthead</p>
  </li>
  <li>
    <p><code>&lt;webuijsf:markup tag="div"
styleClass="#{themeStyles.MASTHEAD_ALARM_DIV}"&gt;</code> Sets padding
and alignment for alarm information in
status area of
masthead&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    </p>
  </li>
</ul>
<p>See the <a href="#Examples">Examples</a> section for sample code
that uses the <code>statusArea</code> facet.</p>
<h3>Theme Identifiers</h3>
<span>See the Theme package javadoc for the constants that can be used to specify masthead theme elements.</span><br>
<h3>Client Side Javascript Functions</h3>
<p>None.<br>
</p>
<h3><a name="Examples"></a>Examples</h3>
<p>The examples use the <a href="#MastheadBean">MastheadBean</a>,
which is shown after the examples.</p>
<h4>Example 1:&nbsp; Create a masthead using individual facets for
links in the Utility Bar</h4>
This example uses the utility bar facets to add UI-guideline compliant
links to the top of the masthead.<br>
&nbsp;<span style="color: rgb(51, 51, 255);"> </span><code>&lt;webuijsf:page&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;webuijsf:html&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;webuijsf:head id="foo"
title="Foo Page" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:body&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&lt;webuijsf:form id="form1"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &lt;webuijsf:masthead id="Masthead"
productImageURL="../images/webconsole.png"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
productImageDescription="Java Web Console" productImageHeight="40" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
productImageWidth="165" userInfo="user_name" serverInfo="server_name" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
jobCount="0" dateTime="true" notificationMsg="Beer is
good"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
alarmCounts="#{MastheadBean.alarms}"&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;f:facet name="helpLink"&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink action="#{MastheadBean.helpClicked}" /&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;f:facet name="consoleLink"&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink action="#{MastheadBean.consoleClicked}" /&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;f:facet name="versionLink"&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink action="#{MastheadBean.versionClicked}" /&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;f:facet name="logoutLink"&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink action="#{MastheadBean.logoutClicked}" /&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&lt;/webuijsf:masthead&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&lt;/webuijsf:form&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &lt;/webuijsf:body&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/webuijsf:html&gt;<br>
&lt;/webuijsf:page&gt;<br>
<br>
</code>
<h4>Example 2: Create a masthead using the <code>statusArea&nbsp;</code>facet&nbsp;</h4>
<p>This example uses <code>webuijsf:panelGroup</code> to enclose the
tags for the status items. The components are also enclosed in <code>webuijsf:markup</code>
tags that specify <code>&lt;div&gt;</code> elements with a class
selector that applies the correct spacing around the component in the
masthead. </p>
<code>&lt;webuijsf:page&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;webuijsf:html&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;webuijsf:head id="foo"
title="Foo Page" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:body&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&lt;webuijsf:form id="form1"&gt;<br>
</code><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp;&lt;webuijsf:masthead id="Masthead"
productImageURL="../images/webconsole.png"<br>
</code><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code><code>&nbsp;&nbsp;&nbsp;
productImageDescription="Java Web Console" userInfo="user_name"<br>
</code><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code><code>&nbsp;&nbsp;&nbsp;
serverInfo="server_name"&gt;<br>
</code><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code><code>&nbsp;
&lt;f:facet name="statusArea"&gt;<br>
</code><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code><code>&nbsp;&nbsp;&nbsp;
&lt;webuijsf:panelGroup id="statusPanel" separator=""&gt;<br>
</code><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:markup tag="div"
styleClass="#{themeStyles.MASTHEAD_STATUS_DIV}"&gt;<br>
</code><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code><code>
&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:notificationPhrase
text="Important info goes here" /&gt;<br>
</code><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code><code>&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &lt;webuijsf:image icon="DOT" border="0"
width="20" height="1" /&gt;<br>
</code><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code><code>&nbsp;&nbsp;&nbsp;
&nbsp; &nbsp; &lt;webuijsf:jobStatus numJobs="1" /&gt;<br>
</code><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/webuijsf:markup&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:markup
tag="div" styleClass="#{themeStyles.MASTHEAD_TIME_DIV}"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:timeStamp /&gt;<br>
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/webuijsf:markup&gt;<br>
&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:markup tag="div"
styleClass="#{themeStyles.MASTHEAD_ALARM_DIV}"&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:alarmStatus numDownAlarms="0" numCriticalAlarms="1"
numMajorAlarms="2" numMinorAlarms="3" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/webuijsf:markup&gt;<br>
</code><code></code><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp;</code><code> &nbsp;&nbsp; &lt;/webuijsf:panelGroup&gt;<br>
</code><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code><code>&nbsp;
&lt;/f:facet&gt;<br>
</code><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code><code>&lt;/webuijsf:masthead&gt;
</code><br style="color: rgb(255, 153, 0);">
<code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &lt;/webuijsf:form&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &lt;/webuijsf:body&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/webuijsf:html&gt;<br>
&lt;/webuijsf:page&gt;<br>
<br>
</code>
<h4>Example 3: Create a masthead with custom links and search capability in the Utility Bar</h4>
<p>This example shows how to create custom links in the utility bar,
along with the links produced with the facets. This example also shows
how you might add search with the <code>search</code> facet, and use the 
<code>versionLink</code> facet to open a version
popup page.&nbsp; </p>
<code> &lt;webuijsf:page&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;webuijsf:html&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:head id=foo
title="Foo Page"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:body&gt;<br>
</code><code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &lt;webuijsf:form id="form1"&gt;</code><br>
<code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:masthead id="Masthead"
productImageURL="../images/webconsole.png"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
productImageDescription="Java Web Console" userInfo="user_name" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
serverInfo="server_name" jobCount="0" dateTime="true" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
notificationMsg="Beer is good" utilities="#{MastheadBean.links}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
alarmCounts="#{MastheadBean.alarms}"&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;f:facet name="helpLink"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink action="#{MastheadBean.helpClicked}" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/f:facet&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;f:facet name="consoleLink"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink action="#{MastheadBean.consoleClicked}" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/f:facet&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;f:facet name="search"&gt;<br>
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&lt;webuijsf:panelGroup &gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &lt;webuijsf:textField id="searchText"<br>
&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
text="#{MastheadBean.searchCriteria}"/&gt;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:button icon="MASTHEAD_SEARCH" id="searchButton"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
text="Search" style="vertical-align:bottom"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
actionExpression="#{MastheadBean.doSearch}" /&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;
&lt;/webuijsf:panelGroup&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/f:facet&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;f:facet name="versionLink"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink &nbsp;toolTip="Display Product Version. (Opens a
new window)"<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onClick="javascript: var
versionWin =
window.open('../faces/version/version.jsp','VersionWindow','scrollbars,resizable,width=650,height=500,top='+((screen.height
- (screen.height/1.618)) - (500/2))+',left='+((screen.width-650)/2) );
versionWin.focus()" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/f:facet&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;f:facet name="logoutLink"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink action="#{MastheadBean.logoutClicked}" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/f:facet&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;f:facet name="userInfo"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink text="user_name"
styleClass="#{themeStyles.MASTHEAD_USER_LINK}"
action="#{MastheadBean.userClicked}" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/f:facet&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;f:facet name="serverInfo"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink text="s"
styleClass="#{themeStyles.MASTHEAD_USER_LINK}"
action="#{MastheadBean.serverClicked}" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/f:facet&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/webuijsf:masthead&gt;&nbsp;&nbsp;&nbsp; <br>
</code><code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/webuijsf:form&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &lt;/webuijsf:body&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/webuijsf:html&gt;<br>
&lt;/webuijsf:page&gt;</code><br>
<h4><a name="MastheadBean"></a>MastheadBean used in the examples</h4>
<h4 style="font-weight: normal;"><code>import
com.sun.webui.jsf.component.Hyperlink;<br>
import com.sun.webui.jsf.component.DropDown;<br>
import com.sun.webui.jsf.model.Option;<br>
<br>
import javax.el.MethodExpression;<br>
<br>
import javax.faces.component.UIComponent;<br>
import javax.faces.context.FacesContext;<br>
import javax.faces.event.ActionEvent;<br>
import javax.faces.event.AbortProcessingException;<br>
<br>
import util.JSFUtilities;<br>
<br>
/**<br>
public class MastheadBean{&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; String message = "foobar";<br>
&nbsp;&nbsp;&nbsp; Hyperlink[] links = null;<br>
&nbsp;&nbsp;&nbsp; int[] alarms = new int[] {1, 2, 3, 4};<br>
&nbsp;&nbsp;&nbsp; String selectedItem = "view1";<br>
&nbsp;&nbsp;&nbsp; private Option[] views = null;<br>
&nbsp;&nbsp;&nbsp; String helpText = "This very, very, very, very,
very, very, very, very, " +<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "very, very, very, very,
very, very, very, very, very, very, very " +<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "very, very, long help text
sentence should line wrap.";<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; /** Creates a new instance of JumpBackingBean */<br>
&nbsp;&nbsp;&nbsp; public MastheadBean() {<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; links = new Hyperlink[2];<br>
<br>
&nbsp;&nbsp;&nbsp; FacesContext context =
FacesContext.getCurrentInstance();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; links[0] = new Hyperlink();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; links[0].setText("One");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//links[0].setUrl("#");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; JSFUtilities.setMethodExpression(links[0],
"actionExpression",<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
"#{MastheadBean.extraOneClicked}");<br>
<br>
&nbsp;&nbsp;&nbsp; // <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; links[1] = new Hyperlink();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; links[1].setText("Two");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//links[1].setUrl("#");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; JSFUtilities.setMethodExpression(links[1],
"actionExpression",<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
"#{MastheadBean.extraTwoClicked}");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; views = new Option[3];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; views[0] = new
Option("view1", "View 1");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; views[1] = new
Option("view2", "View 2");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; views[2] = new
Option("view3", "View 3");<br>
<br>
&nbsp;&nbsp;&nbsp; /*<br>
&nbsp;&nbsp;&nbsp; for (Option view : views) {<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
JSFUtilities.setMethodExpression(view, "actionExpression",<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; "#{MastheadBean.viewChanged}");<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; */<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String getSelectedItem() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return selectedItem;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public void setSelectedItem(String s) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectedItem = s;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String getHelpText() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return helpText;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public Option[] getViews() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return views;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String getMessage() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return message;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public void setMessage(String msg) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = msg;<br>
&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public Hyperlink[] getLinks() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return links;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public void setLinks(Hyperlink[] links) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.links = links;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public int[] getAlarms() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return alarms;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public void setAlarms(int[] alarms) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.alarms = alarms;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String extraOneClicked()
{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "Extra link one
was clicked";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String extraTwoClicked() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "Extra link two
was clicked";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String consoleClicked() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "Console link was
clicked";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String versionClicked() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "Version link was
clicked";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String logoutClicked() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "Logout link was
clicked";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String helpClicked() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "Help link was
clicked";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String userClicked() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "User link was
clicked";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String serverClicked() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "Server link was
clicked";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String saveClicked() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Save
clicked");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "Save page button
was clicked";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String resetClicked() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "Reset page button
was clicked";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String action1Clicked() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "Page action 1 was
clicked";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String action2Clicked() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "Page action 2 was
clicked";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String action3Clicked() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "Page action 3 was
clicked";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String viewChanged() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "View menu was
changed";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; private String searchCriteria = "*";<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String getSearchCriteria() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return searchCriteria;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public void setSearchCriteria(String s) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; searchCriteria = s;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public String doSearch() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("doSearch
called");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "Search was
clicked with criteria " + searchCriteria;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public void menuChanged(ActionEvent e) throws
AbortProcessingException {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIComponent c =
e.getComponent();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DropDown menu = (DropDown) c;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; message = "View menu was
changed to value " + menu.getValue();<br>
&nbsp;&nbsp;&nbsp; }<br>
}</code>
]]></description>
    </tag>

    <tag>
        <name>messageGroup</name>

        <description><![CDATA[
 <p>
 Use the <code>webuijsf:messageGroup</code> tag to display a list of messages that are 
 not associated with a specific component. The MessageGroup component displays
 error messages for all components on the page, and for the JSP page itself.
 Generally, the tag should be used at the top or bottom of the page.</p>
 <p>
 Note that the messages displayed with the <code>webuijsf:messageGroup</code>
 tag do not indicate which component the messages are associated with.
 Use the <a href="message.html"><code>webuijsf:message</code></a> tag to
 associate error messages with specific components.</p>
 <h3>HTML Elements and Layout</h3>
 <p>
 A message group consists of a list of messages. The messages are listed in the 
 order in which they are queued as the page is processed by the server. There is 
 no indication of which component has the error. You should use the <code>webuijsf:message</code> 
 tag to display error messages next to the affected components.</p>
 <h3>Configuring the <code>webuijsf:messageGroup</code> tag</h3>
 <p>
 Use the <code>showGlobalOnly</code>
 attribute to show only the messages that are not associated with a
 particular component. This attribute can be used to avoid redundant
 display of error messages which can occur if you also use the <code>webuijsf:message</code>
 tag in the same page. Use the <code>showSummary</code> and <code>showDetail</code>
 tag attributes to specify whether to include summary text and detailed
 text. </p>
 <p>Messages are defined in a resource bundle, which can include keys 
 for summary text and detailed text for messages.</p>
 <h3>Theme Identifiers</h3>
 TBA
 <h3>Client Side Javascript Functions</h3>
 <p>None.</p>
 <h3>Examples</h3>
 <h4>Example 1: Display global errors at the top of the page</h4> 
 <p>
 This example shows where you might position the <code>webuijsf:messageGroup</code> tag to display
 errors at the top of the page. The example uses the showGlobalOnly attribute to
 avoid duplicating the errors displayed by the <code>webuijsf:message</code> tag that
 is included in this page.
 </p>
 <pre>
 &lt;webuijsf:page&gt;
   &lt;webuijsf:html&gt;
    &lt;webuijsf:head title="A title" /&gt;
      &lt;webuijsf:body&gt;
      &lt;webuijsf:form ....&gt;
      &lt;webuijsf:masthead ... &gt;
      &lt;webuijsf:breadcrumbs &gt;
      &lt;/webuijsf:breadcrumbs &gt;
       <span style="font-weight: bold;">
       &lt;webuijsf:messageGroup showGlobalOnly="true"/&gt;</span>
       &lt;webuijsf:staticText text="Validator checks that the value is between 0-10 inclusive. /&gt;
       &lt;webuijsf:message for="form1:textTest1"/&gt;
       &lt;webuijsf:textField id="textTest1" label="Enter a number:" 
                        text="#{FieldTest.number}" 
                        validator="#{FieldTest.checkNumber}"/&gt;
       ....
 </pre>
]]></description>
    </tag>

    <tag>
        <name>meta</name>

        <description><![CDATA[ <span style="text-decoration: line-through;"></span><span
  style="color: rgb(0, 0, 0);">Use the </span><code
  style="color: rgb(0, 0, 0);">ui:meta</code><span
  style="color: rgb(0, 0, 0);"> tag to create an
 HTML </span><code
  style="color: rgb(0, 0, 0);">&lt;meta&gt;</code><span
  style="color: rgb(0, 0, 0);"> element in the
 rendered HTML page.
 The </span><code
  style="color: rgb(0, 0, 0);">&lt;meta&gt;</code><span
  style="color: rgb(0, 0, 0);">
 element
 provides meta-information about your page, such as descriptions and
 keywords for search engines and refresh rates.&nbsp; The </span><code
  style="color: rgb(0, 0, 0);">ui:meta</code><span
  style="color: rgb(0, 0, 0);">
 tag must
 be inside a </span><code
  style="color: rgb(0, 0, 0);"><a
  href="head.html">ui:head</a></code><span
  style="color: rgb(0, 0, 0);">
 tag.</span><br
  style="color: rgb(0, 0, 0);"><span style="color: rgb(0, 0, 0);">&nbsp;</span><br
  style="color: rgb(0, 0, 0);"><h3 style="color: rgb(0, 0, 0);">HTML
 Elements and Layout</h3><span
  style="text-decoration: line-through; color: rgb(0, 0, 0);"></span><span
  style="color: rgb(0, 0, 0);">The rendered HTML
 page
 contains an
 HTML </span><code
  style="color: rgb(0, 0, 0);">&lt;meta&gt;</code><span
  style="color: rgb(0, 0, 0);"> tag and its
 associated attributes.</span><h3 style="color: rgb(0, 0, 0);">Theme
 Identifiers</h3><span style="color: rgb(0, 0, 0);">None.</span><br><h3>Client Side Javascript
 Functions</h3>
 None. <span style="color: rgb(255, 153, 0);"></span><h3>Example</h3><b>Example 1: Create a Meta tag<br><br><span style="color: rgb(255, 153, 0);"></span></b><div style="margin-left: 40px;"><code>....<br>&lt;ui:head title="meta example" &gt;<br></code><code>&nbsp;&nbsp;&nbsp;&lt;ui:meta httpEquiv="refresh"
 content="5" /&gt;<br>&lt;/ui:head&gt;<br>
 ....</code><br></div>
 <p>Auto-generated component class.
 Do <strong>NOT</strong> modify; all changes
 <strong>will</strong> be lost!</p>
]]></description>
    </tag>

    <tag>
        <name>notificationPhrase</name>

        <description><![CDATA[
 <p>Use the <code>webuijsf:notificationPhrase</code> tag to display notification information.
 This tag is typically specified as part of the <code>webuijsf:masthead</code> tag's
 <code>statusArea</code> facet. The <code>webuijsf:notificationPhrase</code> tag produces
 notification information identical to the <code>webuijsf:masthead</code> tag's <code>
 notificationMsg</code> attribute. See the <a href="masthead.html"><code>webuijsf:masthead</code>
 documentation</a> for more information about the <code>statusArea</code> facet.</p>
 <p>
 The <code>statusArea</code> facet overrides the masthead's status area attributes. 
 The <code>webuijsf:notificationPhrase</code> tag enables you to include notification messages
 in the status area, along with your custom components. The <a href="jobStatus.html"><code>webuijsf:jobStatus</code></a>,
 <a href="timeStamp.html"><code>webuijsf:timeStamp</code></a>, and <a
 href="alarmStatus.html"><code>webuijsf:alarmStatus</code></a>
 tags enable you to include the other standard status area components as
 well. 
 </p>
 <p>Note that when you use the <code>webuijsf:masthead</code>
 attributes, spacing between the components is handled
 automatically. When
 you use the <code>webuijsf:alarmStatus</code>, <code>webuijsf:jobStatus</code>, <code>webuijsf:timeStamp</code>,
 and <code>webuijsf:notificationPhrase</code> tags in the <code>statusArea</code> facet,
 you may have to add code to handle the spacing between the components,
 as demonstrated in the example below. </p>
 <h3>HTML Elements and Layout</h3>
 <p>
 The rendered HTML page includes an <code>&lt;img&gt;</code>
 element for the information icon, adjacent to an <code>&lt;a&gt;</code>
 hyperlink containing the notification message.
 </p>
 <h3>Configuring the <code>webuijsf:notificationPhrase</code> tag</h3>
 <p>Specify the notification message with the <code>text</code> attribute. Use the <code>icon</code>
 attribute to specify a different theme identifier to use for the image,
 or <code>imageURL</code> to specify a non-theme image. Use other attibutes, 
 such as <code>url</code>, <code>action</code>, or <code>actionListenerExpression</code> to provide
 detailed information about the notification message or take other action. </p>
 <p>The <code>immediate</code> attribute should be set to true when this component 
 is used in the masthead.</p>
 <h3>Theme Identifiers</h3>
 <p>The theme provides the
 following notification icon identifiers.
 <pre wrap="">ALERT_INFO_LARGE<br>ALERT_INFO_MEDIUM<br>ALERT_INFO_SMALL<br><br></pre>
 <h3>Client Side Javascript Functions</h3>
 None.
 <br>
 <h3>Examples</h3>
 <h4>Example 1: Display a notification phrase as part of the masthead statusArea facet</h4>
 <p>This example uses <code>webuijsf:panelGroup</code>
 to enclose the tags for the status items. The components
 are also enclosed in <code>f:verbatim</code>
 tags that specify <code>&lt;div&gt;</code>
 elements with a class selector that applies the correct spacing around
 the component in the masthead. </p>
 <pre><code>&lt;webuijsf:masthead id="Masthead" productImageURL="../images/webconsole.png"
         productImageDescription="Java Web Console" userInfo="user_name" 
         serverInfo="server_name"&gt;
     &lt;f:facet name="statusArea"&gt;
       &lt;webuijsf:panelGroup id="statusPanel" separator=""&gt;
         &lt;webuijsf:markup tag="div" styleClass="#{themeStyles.MASTHEAD_STATUS_DIV}"&gt;
         &lt;webuijsf:notificationPhrase text="Important info goes here" /&gt;
         &lt;webuijsf:image icon="DOT" border="0" width="20" height="1" /&gt;
         &lt;webuijsf:jobStatus numJobs="1" /&gt;
         &lt;/webuijsf:markup&gt;
         &lt;webuijsf:markup tag="div" styleClass="#{themeStyles.MASTHEAD_TIME_DIV}"&gt;
         &lt;webuijsf:timeStamp /&gt;
         &lt;/webuijsf:markup&gt;
         &lt;webuijsf:markup tag="div" styleClass="#{themeStyles.MASTHEAD_ALARM_DIV}"&gt;
         &lt;webuijsf:alarmStatus numDownAlarms="0" numCriticalAlarms="1" numMajorAlarms="2" numMinorAlarms="3" /&gt;
         &lt;/webuijsf:markup&gt;
       &lt;/webuijsf:panelGroup&gt;
     &lt;/f:facet&gt;
 &lt;/webuijsf:masthead&gt;
 </code></pre>
]]></description>
    </tag>

    <tag>
        <name>orderableList</name>

        <description><![CDATA[
 <p> Use the <code>webuijsf:orderableList</code> tag to create a list with
     buttons that allow the items on the list to be reordered. 
     The values for the list items are provided in the orderableList component.
     If you want to allow the user to add and remove list items, see the 
     <a href="editableList.html"><code>webuijsf:editableList</code></a> and 
     <a href="addRemove.html"><code>webuijsf:addRemove</code></a> tags.</p> 
     <h3>HTML Elements and Layout</h3>
 <p>The textField component renders an XHTML fragment consisting of a
 <code>select</code>element representing a list, an <code>input
 type="hidden"</code> element which represents the current order of the
 list items, two or four <code>input type="submit"</code> elements for the
 buttons, and a <code>label</code> element for the label. The buttons are
 organized using a <code>table</code>, and the whole component is laid
 out using <code>div</code>s.  </p>
 <p>
 The rendered HTML page displays a listbox with adjacent Move Up and Move Down 
 buttons, and optionally displays Move to Top and Move to Bottom buttons.</p>
 <p>
 The orderableList component renders an XHTML fragment that consists of:</p>
 <ul>
   <li>a <code>&lt;select&gt;</code> element representing a list
   </li>
   <li>a hidden field in an <code>&lt;input type="hidden"&gt;</code> element, 
   which holds a string that specifies the current order of the list items
   </li>
   <li>two or four <code>&lt;input type="submit"&gt;</code> elements
 for the buttons, which are organized in a <code>&lt;table&gt;</code></li>
   <li>a <code>&lt;label&gt;</code> element for the label <br>
   </li>
   <li><code>&lt;div&gt;</code> elements to layout the whole component</li>
 </ul>
     <h3>Configuring the <code>webuijsf:orderableList</code> Tag</h3>
     <p>Use the <code>list</code> attribute to associate the component
     with a set of orderable items. The value of the list attribute
     must be a JavaServer Faces EL expression that evaluates to an
     array of Objects or to a <code>java.util.List</code>.</p>
     <p>To allow users to select more than one item to move at a time, 
     set <code>multiple</code> to true. To display buttons that can be used to 
     move the selected items to the top and bottom of the list, set 
     <code>moveTopBottom</code> to true.</code> 
     <p>To specify a label for the component, use the
     <code>label</code> attribute, or specify a label facet. To place
     the label above the component, set <code>labelOnTop</code> to
     true.</p> 
     <h3>Facets</h3>
     <p>The orderableList component supports the facets shown in the following table.</p>
 <table cellpadding="2" cellspacing="2" border="1"
  style="text-align: left; width: 100%;">
   <tbody>
     <tr>
       <td style="vertical-align: top;"><code>label</code><br>
       </td>
       <td style="vertical-align: top;">Specify
 a custom component for the label.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>readOnly</code></td>
       <td style="vertical-align: top;">Specify
 a custom component for displaying the value of this component when it
 is marked as readonly. The default is a <code>webuijsf:staticText.</code></td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>moveUpButton</code></td>
       <td style="vertical-align: top;">Specify
 a custom component for the button that moves items up one step.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>moveDownButton</code></td>
       <td style="vertical-align: top;">Specify
 a custom component for the button that moves items down one step.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>moveTopButton</code></td>
       <td style="vertical-align: top;">Specify
 a custom component for the button that moves items to the top.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>moveBottomButton</code></td>
       <td style="vertical-align: top;">Specify
 a custom component for the button that moves items to the bottom.</td>
     </tr>
   </tbody>
 </table>
     <h3>Client-side JavaScript functions</h3>
     <p>The functions below must be invoked on the JavaScript object
     that corresponds to the orderableList. The name of this object is
     <code>OrderableList_</code><em>id</em> where <em>id</em> is the
     DOM ID of the OrderableList component (the id of the outermost
     <code>div</code> with the colons replaced by underscores,
     e.g. <code>OrderableList_form_taskOrder</code>).</p> 
  </p>
     <table cellpadding="2" cellspacing="2" border="1" 
            style="text-align: left; width: 100%;">
     <tbody>
     <tr>
     <td style="vertical-align">
     <code><em>object</em>.updateValue()</code>
     </td>
     <td style="vertical-align: top">
     Use this method to update the hidden field which represents the
     component value in any JavaScript function that changes the order
     of the items on the list. 
     </td>
     </tr>
     <tr>
     <td style="vertical-align">
     <code><em>object</em>.moveUp()</code>
     </td>
     <td style="vertical-align: top">
     Moves the selected items up one step and updates the component
     value. 
     </td>
     </tr>
     <tr>
     <td style="vertical-align">
     <code><em>object</em>.moveDown()</code>
     </td>
     <td style="vertical-align: top">
     Moves the selected items down one step and updates the component
     value. 
     </td>
     </tr>
     <tr>
     <td style="vertical-align">
     <code><em>object</em>.moveTop()</code>
     </td>
     <td style="vertical-align: top">
     Moves the selected items to the top of the list and updates the
     component value. 
     </td>
     </tr>
     <tr>
     <td style="vertical-align">
     <code><em>object</em>.moveBottom()</code>
     </td>
     <td style="vertical-align: top">
     Moves the selected items to the bottom of the list and updates the
     component value. 
     </td>
     </tr>
     <tr>
     <td style="vertical-align">
     <code><em>object</em>.updateButtons()</code>
     </td>
     <td style="vertical-align: top">
     Use this method to update which buttons are selected in any
     JavaScript method that programmatically selects elements on the
     list. 
     </td>
     </tr>
   </tbody>
 </table>
     <h3>Examples</h3>
 <h4>Example 1: OrderableList with Move to Top and Move to Bottom
     Buttons</h4> 
 <p>This example uses a backing bean called
     <code>AutomatedTasks</code> with a property <code>taskList</code>
     that represents a list of tasks. Users are allowed to 
     select more than one task to move. Buttons to move the items to
     the top and to the bottom are shown in addition to the default
     Move Up and Move Down buttons. </p> 
 <pre>
     &lt;webuijsf:orderableList id="taskOrder"
                       list="#{AutomatedTasks.taskList}"
                       label="Task execution order: "
                       multiple="true"
                       moveTopBottom="true"/&gt;
 </pre>
 <h4>Example 2: OrderableList with Move to Top and Move to Bottom
     Buttons</h4> 
 <p>This example uses a backing bean called <code>Volunteers</code> and
     a property <code>rotationOrder</code>, which is an ordered list of
     objects that represent individual persons. A converter is used to
     derive a string representation of the person. Only the default 
     Move Up and Move Down buttons are shown. </p> 
 <pre>
     &lt;webuijsf:orderableList id="callUpOrder"
                       list="#{Volunteers.rotationOrder}"
                       label="Call Up Order:" 
                       converter="org.example.Person"&gt;
     &lt;webuijsf:orderableList&gt;
 </pre>
]]></description>
    </tag>

    <tag>
        <name>page</name>

        <description><![CDATA[ <p>Use the <code>webuijsf:page</code> tag to indicate the
 beginning of the part of the JSP page that is used by the Sun Java Web
 UI Components. All the JSF components used in the page must be nested
 within the <code>webuijsf:page</code> tag. You must use the <code>webuijsf:html and <code>webuijsf:head</code> tags
 first, after the opening of the <code>webuijsf:page</code> tag.&nbsp;&nbsp;Then you must use either
 the <code>webuijsf:body</code> tag or the <code>webuijsf:frameset</code> tag.&nbsp;&nbsp;The <code>webuijsf:page</code> tag takes care of 
 generating the preamble for the HTML page.</span><br>
 <h3>HTML Elements and Layout</h3>
 <p>If the application is used in
 a portlet environment, nothing is rendered for the <code>webuijsf:page</code>
 tag but it is still necessary to include it. <br></p><p style="color: rgb(0, 0, 0);">If the application is used in
 a servlet environment, the rendered HTML will include <code>&lt;?xml&gt;</code>
 and <code>&lt;!DOCTYPE&gt;</code> headers. The content of the headers
 is determined by the <code>webuijsf:page</code>
 attributes that you
 specify.&nbsp; Use the frameset and xhtml attributes to create the <code>&lt;!DOCTYPE&gt;</code>
 header that you want.&nbsp; For example, if you set frameset and xhtml
 attributes to true, the rendered <code>&lt;!DOCTYPE&gt;</code> header
 will indicate XHTML Frameset, as in the following example:<br></p><pre style="color: rgb(0, 0, 0);">&lt;!DOCTYPE HTML <br> PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"<br> "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;<br><br></pre><span style="color: rgb(0, 0, 0);">If you set both attributes to
 false,&nbsp; the rendered <code>&lt;!DOCTYPE&gt;</code>
 header will indicate HTML Transitional,&nbsp; as in the following
 example:<br></span><pre style="color: rgb(0, 0, 0);" wrap="">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</pre><p style="color: rgb(0, 0, 0);">You can also use the frameset and xhtml
 attributes
 to specify&nbsp; XHTML
 Transitional and HTML Frameset.<br></p><h3 style="color: rgb(0, 0, 0);">Client Side Javascript Functions</h3><span style="color: rgb(0, 0, 0);">None.</span><br style="color: rgb(0, 0, 0);"><h3 style="color: rgb(0, 0, 0);">Example</h3><b style="color: rgb(0, 0, 0);">Example 1: Using the page tag
 appropriately in a JSP page:<br><br></b><code style="color: rgb(0, 0, 0);">&lt;?xml version="1.0"
 encoding="UTF-8"?&gt;<br>&lt;jsp:root version="1.2" xmlns:f="http://java.sun.com/jsf/core"
 xmlns:h="http://java.sun.com/jsf/html"
 xmlns:jsp="http://java.sun.com/JSP/Page"
 xmlns:webuijsf="http://www.sun.com/web/webuijsf"&gt;<br>&lt;jsp:directive.page contentType="text/html;charset=ISO-8859-1"
 pageEncoding="UTF-8"/&gt;<br>&lt;f:view&gt;<br>&nbsp; <span style="font-weight: bold;">&lt;webuijsf:page&gt;</span><br>&nbsp;&nbsp;&nbsp; &lt;webuijsf:html&gt;<br>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; <span style="font-weight: bold;">......<br>&nbsp;&nbsp;&nbsp; &lt;</span>/webuijsf:html&gt;<br>&nbsp; &lt;/webuijsf:page&gt;<br>&lt;/f:view&gt;<br></code><b style="color: rgb(0, 0, 0);"><span
 style="font-family: monospace;"></span></b>
]]></description>
    </tag>

    <tag>
        <name>pageAlert</name>

        <description><![CDATA[
 <p>Use
 the <code>webuijsf:pageAlert</code>
 tag to display a full page alert. A page alert differs from the
 inline alert (see <a href="alert.html">webuijsf:alert</a><span
  style="color: rgb(0, 0, 0);">) in that the content of
 the page
 that invokes the pageAlert is replaced by the alert page. An inline
 alert is a smaller alert that is inserted in the page that invokes the
 alert. </span><br>
 <h3>HTML
 Elements and Layout</h3>
 <p>A page alert consists of:
 <ul style="color: rgb(0, 0, 0);">
   <li>an
 icon depicting the type of alert - question, information,
 warning, or error</li>
   <li>a page title next to the icon</li>
   <li>a detailed message</li>
   <li>one input component - (one text
 field, one text area, one checkbox,
 one set of radio buttons, one drop-down menu, or one scrolling list)</li>
   <li>a page separator line<br>
   </li>
   <li>a set of page level buttons</li>
 </ul>
 <p style="color: rgb(0, 0, 0);"><br>
 <span style="color: rgb(0, 0, 0);">The input field and the set of
 buttons are optional items, which must be specified with facets. </span><br>
 </p>
 <p style="color: rgb(0, 0, 0);">The
 following diagram shows
 the locations of each of the page alert areas, and the facets that are
 supported for specified areas.</p>
 <table style="color: rgb(0, 0, 0);"
  border="1" width="100%">
   <tbody>
   <tr>
       <td style="vertical-align: top;">
       <table cellpadding="2" cellspacing="2" border="1"
  style="text-align: left; width: 100%;">
         <tbody>
           <tr>
             <td style="vertical-align: top; ">Alert
 Icon (or optional <code>pageAlertImage</code> facet)</td>
             <td style="vertical-align: top;"><span>Title
 text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
             </span><br>
             </td>
           </tr>
         </tbody>
       </table>
 (Optional <code>pageAlertTitle</code> facet)</td>
     </tr>
     <tr>
       <td style="vertical-align: top;">Detailed
 message<br>
       </td>
     </tr>
     <tr>
       <td colspan="2" width="100%">Optional
       <code>pageAlertInput</code>
 facet<br>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;">Page separator (or optional
       <code>pageAlertSeparator</code>
 facet)<br>
       </td>
     </tr>
     <tr>
       <td colspan="2" align="right"
  width="100%">Optional <code>pageAlertButtons </code>facet</td>
     </tr>
   </tbody>
 </table>
 <p style="color: rgb(0, 0, 0);">&nbsp;</p>
 <h3 style="color: rgb(0, 0, 0);">Facets</h3>
 <span style="color: rgb(0, 0, 0);">The
 <code>webuijsf:pageAlert</code>
 tag supports the following facets.</span><br>
 <br>
 <table style="text-align: left; width: 100%;"
  border="1" cellpadding="2" cellspacing="2">
   <tbody>
     <tr>
       <td style="vertical-align: top;"><code
  style="color: rgb(0, 0, 0);">pageAlertTitle</code></td>
       <td
  style="vertical-align: top; color: rgb(0, 0, 0);">Specifies
 a custom component to use to display the title of the alert.&nbsp; The title
 for a full page alert consists of both an alert icon image and the title
 text. The default image and the formatting of the title are designed to
 adhere to Sun UI guidelines.&nbsp; Use the <code>pageAlertTitle</code>
 facet to replace the default alert icon and title with another component. This facet
 overrides the <code>title</code> and <code>type</code>
 attributes.&nbsp; Note that you can define a different image
 by using the <code>pageAlertImage</code> facet.&nbsp;
       </td>
     </tr>
     <tr>
       <td
  style="vertical-align: top; color: rgb(0, 0, 0);"><code>pageAlertImage<br>
       </code></td>
       <td
  style="vertical-align: top; color: rgb(0, 0, 0);">Specifies
 a component to use to display the alert icon. The component included
 in this facet replaces the default icon.<br>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code
  style="color: rgb(0, 0, 0);">pageAlertInput</code></td>
       <td
  style="vertical-align: top; color: rgb(0, 0, 0);">Specifies
 a component to use in the body of the full page alert. This facet can be
 used to display an input component
  for the user to perform tasks related
 to the alert, for example.<br>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code
  style="color: rgb(0, 0, 0);">pageAlertButtons</code></td>
       <td
  style="vertical-align: top; color: rgb(0, 0, 0);">Specifies
 components to use for the buttons at the bottom of the alert page. This
 facet can be used to display a back button, for example. If you want to specify more than
 one button, you might find it helpful to enclose the button components
 in a <code>webuijsf:panelGroup</code> component.<br>
       </td>
     </tr>
     <tr>
       <td
  style="vertical-align: top; color: rgb(0, 0, 0);"><code>pageAlertSeparator<br>
       </code></td>
       <td
  style="vertical-align: top; color: rgb(0, 0, 0);">Specifies
 a component to use for the page separator that is displayed above the
 page buttons. The component included in this facet replaces the default
 page separator.<br>
       </td>
     </tr>
   </tbody>
 </table>
 <br>
 <h3>Client Side Javascript
 Functions</h3>
 None. <span style="color: rgb(255, 153, 0);"></span><br>
 <h3>Examples</h3>
 <h4><span
  style="color: rgb(0, 0, 0);">Example 1:</span>&nbsp;
 Simple example, with alert message and a back button.</h4>
 <code></code>
 <pre>	&lt;webuijsf:pageAlert id="pagealert" title="Error!" type="error"<br>            detail="The server jurassic is not responding. Verify that the power cable is connected."&gt;<br>	  &lt;f:facet name="pageAlertButtons"&gt;<br>              &lt;webuijsf:button text="Back" actionExpression="indexPage" /&gt;<br>          &lt;/f:facet&gt;<br>	&lt;/webuijsf:pageAlert&gt;</pre>
 <h4><span style="color: rgb(255, 153, 0);"></span><span
  style="color: rgb(0, 0, 0);">Example 2:</span>
 With
 input field and one page button.</h4><code></code>
 <pre>	&lt;webuijsf:pageAlert id="pagealert" title="Password Expired!" type="warning"<br>            detail="Your password has expired. Enter a new password"&gt;<br>	  &lt;f:facet name="pageAlertButtons"&gt;<br>              &lt;webuijsf:button text="Go to Login Page" actionExpression="success" /&gt; <br>          &lt;/f:facet&gt;<br>          &lt;f:facet name="pageAlertInput"&gt;<br>            &lt;webuijsf:panelGroup id="pageAlertStuff"&gt;<br>              &lt;webuijsf:label text="New Password:" for="passwordField"/&gt;<br>              &lt;webuijsf:passwordField id="passwordField" /&gt;<br>            &lt;/webuijsf:panelGroup&gt;<br>          &lt;/f:facet&gt; <br>	&lt;/webuijsf:pageAlert&gt;<br></pre>
]]></description>
    </tag>

    <tag>
        <name>pageSeparator</name>

        <description><![CDATA[
 <p>Use
 the <code>webuijsf:pageSeparator</code>
 tag to create a horizontal line that separates items on the
 page.&nbsp; The
 tag can be used as a standalone tag to
 insert a new horizontal line in a page,
 or used within the facet of another tag to override a default page
 separator.&nbsp; For example, the <code>webuijsf:pageSeparator</code>
 tag can be used in the <a href="pageAlert.html"><code>webuijsf:pageAlert</code></a>
 tag's <code>pageAlertSeparator</code>
 facet. </p>
   <h3>HTML
 Elements and Layout</h3>
    This
 tag renders a horizontal
 line inside an
 HTML table that will
 size according to the size of the page.
   <h3>Theme
 Identifiers</h3>
    TBD <br>
   <h3>Client
 Side Javascript Functions</h3>
    None.
  <br>
   <h3>Example</h3>
    <b>Example
 1: Using  
 a standalone
  webuijsf:pageSeparator tag 
  <br>
 </b><code>
   &lt;?xml
 version="1.0"
 encoding="UTF-8"?&gt;<br>
 &lt;jsp:root version="1.2" xmlns:f="http://java.sun.com/jsf/core"
 xmlns:h="http://java.sun.com/jsf/html"
 xmlns:jsp="http://java.sun.com/JSP/Page"
 xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;jsp:directive.page
 contentType="text/html;charset=ISO-8859-1"
 pageEncoding="UTF-8"/&gt;&lt;f:view&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:page frame="true"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:html&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:head title="blah" /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:body&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
 &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
 &nbsp;&nbsp; &lt;webuijsf:pageSeparator id="mypageseparator"
 /&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
 &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
 &lt;/webuijsf:body&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:html&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:page&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/f:view&gt;<br>
 &lt;/jsp:root&gt;<br>
 <br>
 <br>
 </code><b
   </b>
]]></description>
    </tag>

    <tag>
        <name>panelGroup</name>

        <description><![CDATA[
 <p> Use the <code>webuijsf:panelGroup</code> tag to display a group of components
 	that are separated by a common separator.  This is often useful for
 	providing a consistently formatted layout of a group of components.</p><h3>HTML Elements and Layout</h3><p> The PanelGroup component defines and renders a group of components.
 	The group of components are defined in the body of the<code>webuijsf:panelGroup</code> tag, or by specifying children of the
 	PanelGroup component.  The child components do <em>not</em> have to be
 	of like type.  The separator is defined by the <code>separator</code>
 	property, or the <code>separator</code> facet.  The separator may be
 	an empty string, a space, text / character(s), markup, or a component
 	defined by the <code>separator</code> facet.</p><p>	By default the PanelGroup component is rendered with a<code>&lt;span&gt;</code> surrounding the group of child components.
 	This may be changed to a <code>&lt;div&gt;</code> by setting the<code>block</code> property to <code>true</code>.</p><p> PanelGroup is a NamingContainer.</p><h3>Theme Identifiers</h3><p> Not Applicable </p><h3>Client Side Javascript Functions</h3><p> Not Applicable </p><h3>Examples:</h3><h4>Example 1: Simple example showing 4 buttons using the default separator
 	(a return character).</h4><code>&lt;webuijsf:panelGroup id="myPanelGroup1"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:button id="button1" text="Button 1" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:button id="button2" text="Button 2" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:button id="button3" text="Button 3" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:button id="button4" text="Button 4" /&gt;<br />&lt;/webuijsf:panelGroup&gt;</code><h4>Example 2: Same example except using the <code>separator</code>
 	attribute to specify '|' (pipe) as the separator.</h4><code>&lt;webuijsf:panelGroup id="myPanelGroup2" separator=" | "&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:button id="button1" text="Button 1" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:button id="button2" text="Button 2" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:button id="button3" text="Button 3" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:button id="button4" text="Button 4" /&gt;<br />&lt;/webuijsf:panelGroup&gt;</code><h4>Example 3: Same example except using the <code>separator</code>
 	facet to specify the separator.  This example also demonstrates the<code>block</code> property.</h4><code>&lt;webuijsf:panelGroup id="myPanelGroup3" block="true"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;facet name="separator"&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h:outputText value="==" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;/f:facet&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:button id="button1" text="Button 1" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:button id="button2" text="Button 2" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:button id="button3" text="Button 3" /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:button id="button4" text="Button 4" /&gt;<br />&lt;/webuijsf:panelGroup&gt;</code>
]]></description>
    </tag>

    <tag>
        <name>panelLayout</name>

        <description><![CDATA[
 <p> Use the <code>webuijsf:panelLayout</code> tag to display a group of components
 	that are related, in either flow layout, or using absolute positioning.  
         This tag is often useful for
 	providing a consistently formatted layout of a group of components.</p>
]]></description>
    </tag>

    <tag>
        <name>passwordField</name>

        <description><![CDATA[
<p> Use the <code>webuijsf:passwordField</code>  tag to create an input
    field where the characters entered are echoed back with a
    replacement character, so as to mask the input. </p> 

    <h3>HTML Elements and Layout</h3>

<p>The textField component renders an XHTML <code>&lt;input
    type="password"&gt;</code> element.</p>  

    <h3>Configuring the <code>webuijsf:passwordField</code> Tag</h3>

<p>Use the <code>password</code> attribute to associate
the component with a model object that represents the current value,
by setting the attribute's value to an EL expression that corresponds
    to a property of a managed bean.</p>

    <p>To optionally specify a label for the component, use the
    <code>label</code> attribute, or specify a label facet. </p>

    <h3>Facets</h3>

    <ul>
    <li><code>label</code>: use this facet to specify a custom 
    component for the label.</li>
    <li><code>readOnly</code>: use this facet to specify a custom 
    component for displaying the value of this component when it is
    marked as readonly. The default is a <code>webuijsf:staticText</code>. </li>

    </ul>

    <h3>Theme Identifiers</h3> 

    <p>The input element has a style class "TxtFld", or "TxtFldDis"
    when the field is disabled. If a label attribute is specified, the
    label element's class attribute is set to "LblLvl1Txt", "LblLvl2Txt" or
    "LblLvl3Txt" depending on the label level.</p> 


    <h3>Client-side JavaScript functions</h3>

    <p>In all the functions below, <code>&lt;id&gt;</code> should be
    the generated id of the PasswordField component. </p>

    <table cellpadding="2" cellspacing="2" border="1" 
           style="text-align: left; width: 100%;">
    <tbody>
    <tr>
    <td style="vertical-align">
    <code>field_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Enable/disable the field. Set <code>&lt;disabled&gt;</code>
    to true to disable the component, or false to enable it.
    </td>
    </tr>
    <tr>
    <td style="vertical-align: top">
    <code>field_setValue(&lt;id&gt;, &lt;newValue&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Set the value of the field to <code>&lt;newValue&gt;</code>.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getValue(&lt;id&gt;)</code>
  </td>
    <td style="vertical-align: top">Get the value of the field.</td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getInputElement(&lt;id&gt;)</code></td>
    <td style="vertical-align: top">
    Get hold of a reference to the input element rendered by this
    component.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>component_setVisible(&lt;id&gt;)</code>
  </td>
      <td style="vertical-align: top">Hide or show this component.
      </td>
    </tr>
  </tbody>
</table>

    <h3>Example</h3>

<p>This example uses a backing bean <code>User</code> with a
property <code>password</code>. The tag generates a label followed by
text input field. The required attribute is set to true, which causes
an icon to be rendered next to the label to indicate that the
application user must enter a value in the text field. The icon, label
  and input elements are enclosed by a span.</p>
<pre>
     &lt;webuijsf:passwordField id="password" 
                       password="#{User.password}" 
                       label="Password:" 
                       required="true"/&gt;
</pre>
]]></description>
    </tag>

    <tag>
        <name>progressBar</name>

        <description><![CDATA[ 
<p> Use the <code>webuijsf:progressBar</code> to render a progress
indicator to provide user feedback about a task or job in
progress.&nbsp; </p>
<p>The Progress Bar component supports the following types of progress
indicators:</p>
<ul>
<li>
<p>Determinate -- An animated horizontal bar used to show the
percentage of the task that has been completed.</p>
</li>
<li>
<p>Indeterminate -- An animated horizontal bar used to show
that a task is progressing, when it is not possible to determine the
task completion
percentage. <br>
</p>
</li>
<li>
<p>Busy -- A smaller animation used to indicate activity for events
that cannot be synchronized to the backend process, and where space is
constrained. <br>
</p>
</li>
</ul>
<p>The progress bars can include details
such as a description and status of the operation, and controls such as
Pause, Resume,
and Cancel buttons for controlling the running of the task.&nbsp; </p>
<!-- br-->
<h3>HTML Elements and Layout<br>
</h3>
<p> </p>
<p>In the rendered HTML page, the progress bar is created with <code>&lt;div&gt;</code>
elements and JavaScript functions.<br>
</p>
<p>The progress bar component consists of&nbsp; the dynamic graphical
progress animation, and the following optional areas:<br>
</p>
<ul>
<li>Description, used to describe the overall operation being
monitored.</li>
<li>Customizable control elements that can be used to add buttons or
other controls for managing the task. <br>
</li>
<li>Status message to display dynamic text
that describes the current state of the operation.</li>
<li>Log message text area that can be used to display
log messages.</li>
</ul>
The following diagram shows the location of each area of the
progressBar component, and the attributes and facets that can be used
for each area.<br>
<a name="diagram"></a><br>
<table style="width: 100%; text-align: left;" border="1" cellpadding="2"
cellspacing="2">
<tbody>
<tr>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);"
rowspan="1" colspan="2">Description
(<code>description</code> attribute or <code>progressTextTop</code>
facet)<br>
</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);">Progress
animation (<code>type</code>
attribute<code></code>) <br>
</td>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);">Controls
(<code>progressControlRight</code>
facet<code>)<br>
</code></td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);">Status
message (<code>status</code>
attribute or <code>progressTextBottom</code> facet)</td>
<td colspan="1" rowspan="3" style="vertical-align: top;"><br>
</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);">Controls
(<code>progressControlBottom</code>
facet<code>)</code></td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);">Log
message (<code>logMessage</code>
attribute)<br>
</td>
</tr>
</tbody>
</table>
<br>
<p> </p>
<h3>Configuring the <code>webuijsf:progressBar</code> tag<br>
</h3>
<p>By default, the <code>webuijsf:progressBar</code> renders a
determinate type progress bar with a
refresh rate of 3 seconds. You can use the <code>type</code> attribute
to specify one of the indicators <code>DETERMINATE</code>, <code>INDETERMINATE</code>,
or <code>BUSY</code> to determine the kind of progress indicator to
render.&nbsp; You can add elements to the basic progress indicator by
using the attributes and facets shown in the <a href="#diagram">diagram</a>,
and customize other aspects of the components behavior with a few other
attributes (described later in this document).&nbsp;
<br>
</p>
<p>The component doesn't display any
buttons by default. To include buttons, you must use the <code>progressControlRight</code>
or <code>progressControlBottom </code>facet. The progressBar
component provides JavaScript functions for the control
elements that you can call to control the underlying task on the back
end. <br>
</p>
<p>You can further customize the component with some additional
attributes<code></code>:<br>
</p>
<ul>
<li>The <code>progress</code> attribute value can be bound to
data that updates as the task progresses, and should resolve to an
integer value that indicates the percentage of task completion.
</li>
<li>
<p>The <code>status</code> attribute can be bound to data
that updates as the task progresses, and should reflect the current
status; for example, the status could be a string used to indicate the
percent completed or time remaining.</p>
</li>
<li>The <code>taskState</code> attribute is used to specify the
state of the task.&nbsp; For example, if the task fails, the <code>taskState</code>
would be set to <code>failed</code>. The <code>taskState</code>
attribute supports several values, which are listed in the attribute
descriptions later in this document.&nbsp;&nbsp; Note that in the <a
href="#Examples">Examples</a> section, the <code>taskState</code>
value is used in the backing bean to determine the value of the <code>status</code>
attribute, but is not used as a tag attribute in the <code>webuijsf:progressBar</code>
tag.&nbsp;&nbsp;<br>
</li>
</ul>
<ul>
<li>The <code>refreshRate</code> attribute is used to specify the
number of milliseconds between updates of the animation through
Ajax.&nbsp; The
default rate is 3000 milliseconds.</li>
</ul>
<ul>
<li>The <code>overlayAnimation</code> attribute is used to render
the percentage completion text on a
determinate progress bar, instead of on a line below the progress
bar.&nbsp;
This technique is useful&nbsp; in tables, for example, or other
locations where space is limited.&nbsp; <br>
</li>
<li>
<p>The <code>progressImageUrl </code>attribute is used to specify
a different animated image to be used for the progress bar.&nbsp; This
image must be an animated GIF.</p>
</li>
<li>The <code>ajaxify</code> attribute is true by default, to enable
the asynchronous JavaScript capabilities of the component, which are
responsible for implementing its dynamic behavior. When the default
Ajax functionality is added to the page, it will automatically
subscribe to a Dojo event that is published according to the specified <code>refreshRate.</code>&nbsp;
When the Dojo event is received, an Ajax request is generated using the
DynaFaces JavaScript library. This same implementation will also listen
for the Ajax response. When the response is returned, the progress bar
is updated as needed.&nbsp;
Set <code>ajaxify</code> to false if you want to provide your own
implementation of Ajax behavior. <br>
</li>
</ul>
&nbsp;<br>
<h3>Facets</h3>
<p>The <code>webuijsf:progressBar</code> tag supports
the following facets, which can be used to define the specified areas.<br>
</p>
<table style="text-align: left; width: 734px; height: 216px;" border="1"
cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="vertical-align: top;"><span style="font-weight: bold;">Facet
Name</span><br>
</td>
<td style="vertical-align: top;"><span style="font-weight: bold;">Area
of Progress Bar</span><br>
</td>
</tr>
<tr>
<td style="vertical-align: top;"><code>progressTextTop</code></td>
<td style="vertical-align: top;">Descriptive text displayed at
the top of the progress bar.</td>
</tr>
<tr>
<td style="vertical-align: top;"><code>progressTextBottom</code></td>
<td style="vertical-align: top;">Status text displayed at the
bottom of the progress bar.</td>
</tr>
<tr>
<td style="vertical-align: top;"><code>progressControlRight</code></td>
<td style="vertical-align: top;">Control
elements displayed to the right side of the progress bar. <br>
</td>
</tr>
<tr>
<td style="vertical-align: top;"><code>progressControlBottom</code></td>
<td style="vertical-align: top;">Control
elements displayed at the bottom of the progress bar.<br>
</td>
</tr>
</tbody>
</table>
<br>
<h3>Client-side JavaScript Functions</h3>
<p>The following JavaScript functions are available for&nbsp; the <code>webuijsf:progressBar</code>
tag.&nbsp; After the progressBar is rendered, the functions can be
invoked on the control elements that you specify.&nbsp; You should call
<code>return false;</code> on all control elements after the calling a
progressBar function, in order to prevent page submission
when
the controls are clicked. <br>
</p>
See the <a href="#Examples">Examples</a> for usage. <br>
<br>
<table style="text-align: left; width: 676px; height: 196px;" border="1"
 cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;"><span style="font-weight: bold;">Function</span><br>
      </td>
      <td style="vertical-align: top;"><span style="font-weight: bold;">Purpose</span><br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>pause()</code><br>
      </td>
      <td style="vertical-align: top;">Handles the Pause button event.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>resume()</code><br>
      </td>
      <td style="vertical-align: top;">Handles the Resume button event.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>cancel()</code><br>
      </td>
      <td style="vertical-align: top;">Handles the Cancel button event.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>stop()</code><br>
      </td>
      <td style="vertical-align: top;">Handles the Stop button event.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>setOnFail()<br>
      </code></td>
      <td style="vertical-align: top;">Invokes a developer-defined
function that handles the event for task failure. </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>setOnComplete()</code></td>
      <td style="vertical-align: top;">Invokes a developer-defined
function that handles the event for task completion. <br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>setOnCancel()</code></td>
      <td style="vertical-align: top;">Invokes a developer-defined
function for the Cancel button event.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>setProgressBarVisible()</code></td>
      <td style="vertical-align: top;">Hides the progress bar. <br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>isProgressBarVisible()</code></td>
      <td style="vertical-align: top;">Displays the progress bar if it
was hidden.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>setProgressBarContainerVisible()</code></td>
      <td style="vertical-align: top;">Hides the progress bar container.</td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>isProgressBarContainerVisible()</code></td>
      <td style="vertical-align: top;">Displays the progress bar
container if it was hidden.</td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>setRightControlVisible()</code></td>
      <td style="vertical-align: top;">Hides the controls area that
displays on the right side of the component.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>isRightControlVisible()</code></td>
      <td style="vertical-align: top;">Displays the controls area on
the right side, if it was hidden.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>setBottomControlVisible()</code></td>
      <td style="vertical-align: top;">Hides the controls area that
displays on the bottom of the component.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>isBottomControlVisible()</code></td>
      <td style="vertical-align: top;">Displays the controls area on
the bottom, if it was hidden.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>setStatusTextVisible()</code></td>
      <td style="vertical-align: top;">Hides the status message area.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>isStatusTextVisible()</code></td>
      <td style="vertical-align: top;">Displays the status message
area, if it was hidden.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>setOperationTextVisible()</code></td>
      <td style="vertical-align: top;">Hides the description of the
operation that is being monitored.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>isOperationTextVisible()</code></td>
      <td style="vertical-align: top;">Displays the description of the
operation that is being monitored.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>setLogMsgVisible()</code></td>
      <td style="vertical-align: top;">Hides the log message area.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>isLogMsgVisible()</code></td>
      <td style="vertical-align: top;">Displays the log message area,
if it was hidden.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>setFailedStateMessageVisible()</code></td>
      <td style="vertical-align: top;">Hides the area that displays the
icon and message indicating a failed state.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code>isFailedStateMessageVisible()</code></td>
      <td style="vertical-align: top;">Displays the area for the icon
and message indicating a failed state, if it was hidden.</td>
    </tr>
  </tbody>
</table>

<h3><a name="Examples"></a>Examples</h3>
<h4><a name="Example_1"></a>Example
1:&nbsp; Simple Determinate Progress Bar with Control
Buttons and Log Message<br>
</h4>
This example creates a determinate type progress bar with Pause,
Resume, and Cancel buttons, which are defined with the <code>progressControlBottom
</code>facet,
at the bottom of the progress bar. The component also displays a text
area for log messages because the <code>logMessage</code> attribute
is specified.<br>
<br>
The buttons are set up to call
various JavaScript functions of the progressBar component when
clicked:&nbsp; <code>resume()</code>,
<code>pause()</code> , <code>stop()</code>, <code>cancel()</code>.
For example, the Resume button calls: <code>document.getElementById(component
id).resume();</code>&nbsp; <br>
<br>
<span style="font-weight: bold;">Note</span>:&nbsp; <code>return false;</code>
is called on all control elements in order to prevent page submission
when
the controls are clicked.&nbsp; Also, notice that the Pause and Resume
buttons are enabled and disabled through JavaScript when the buttons
are clicked.<br>
<br>
See also the <a href="#ProgessBean.java">ProgressBean.java</a> backing
bean used with this example.<br>
<br>
<code>&lt;webuijsf:progressBar type="DETERMINATE" id="pb1"
progress="#{ProgressBean.progressRate}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
refreshRate="2000" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
description="Progress Bar 1 with Log Message"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
status="#{ProgressBean.status}" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
logMessage="#{ProgressBean.logMsg}!!"&gt;&nbsp; <br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;f:facet name="progressControlBottom"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:panelGroup id="statusPanel" separator=""&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:button mini="true" id="pauseButton" text="Pause" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onClick="document.getElementById('form1:statusPanel:resumeButton').disabled=false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
this.disabled=true;document.getElementById('form1:pb1').pause();return
false;"&nbsp; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:button mini="true" id="resumeButton" text="Resume" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onClick="document.getElementById('form1:statusPanel:pauseButton').disabled=false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
this.disabled=true;document.getElementById('form1:pb1').resume();return
false;"&nbsp; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:button mini="true" id="cancelButton" text="Cancel" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onClick="document.getElementById('form1:pb1').cancel();return false;"
/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/webuijsf:panelGroup&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/f:facet&gt;<br>
&nbsp;<br>
&lt;/webuijsf:progressBar&gt;</code><br>
<br>
<h4>Example 2:&nbsp;&nbsp; Indeterminate Progress Bar <br>
</h4>
This example shows how to create a simple indeterminate progress bar,
an animated horizontal bar without a completion percentage.&nbsp; The
example shows a description and the buttons Pause, Resume, and Cancel.<br>
<br>
<code>&lt;webuijsf:progressBar type="INDETERMINATE" id="pb2"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
refreshRate="3000" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
description="Indeterminate Type ProgressBar" &gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;f:facet name="progressControlRight"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:panelGroup id="statusPanel" separator=""&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:button mini="true" id="pauseButton" text="Pause" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onClick="document.getElementById('form1:statusPanel:resumeButton').disabled=false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
this.disabled=true;document.getElementById('form1:pb2').pause();return
false;"&nbsp; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:button mini="true" id="resumeButton" text="Resume" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onClick="document.getElementById('form1:statusPanel:pauseButton').disabled=false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
this.disabled=true;document.getElementById('form1:pb2').resume();return
false;"&nbsp; /&gt;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:button mini="true" id="cancelButton" text="Cancel" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onClick="document.getElementById('form1:pb2').cancel();return false;"
/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/webuijsf:panelGroup&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/f:facet&gt;<br>
&lt;/webuijsf:progressBar&gt;</code><br>
<pre> <br></pre>
<h4>Example 3: Busy Progress Bar <br>
<span style="font-family: monospace;"></span></h4>
<p>This example creates a
simple Busy progress indicator.&nbsp; Although this example does not
show it, you can specify a description, status message, log message in
a Busy progress indicator.&nbsp; The component does not restrict the
content of the component.<br>
</p>
<p><code>&lt;webuijsf:progressBar type="BUSY" id="pb3" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
refreshRate="3000" <br>
&lt;/webuijsf:progressBar&gt;</code><br>
</p>

<h4><a name="Example_4"></a><b> Example 4:
Overlay Animation Progress Bar&nbsp;</b> </h4>
<p>This example creates a determinate progress bar with overlay
animation, in which the percentage complete is displayed within the
progress bar.&nbsp; This technique is often used in tight spaces, where
the size of the indicator must be kept to a minimum. However, you can
also use the overlay animation when you use a more expansive progress
bar with a description, status, log message,
and control buttons.<br>
See also the <a href="#ProgessBean.java">ProgressBean.java</a> backing
bean.<br>
</p>
<pre>&lt;webuijsf:progressBar type="DETERMINATE" id="pb5" 
          progress="#{ProgressBean.progressRate}"
          refreshRate="2000" 
          overlayAnimation="true" &gt; 
&lt;/webuijsf:progressBar&gt;</pre>
<h3>Backing Bean for Examples</h3>
The <code>ProgressBean.java</code> backing bean is used the examples
above.<br>
<br>
<h4><a name="ProgessBean.java"></a>ProgressBean.java</h4>
This backing bean is used in <a
href=#Example_1>Example 1</a> and <a
href=#Example_4>Example 4</a>.&nbsp; <br>
<br>
<code>/*<br>
&nbsp;* ProgressBean.java<br>
&nbsp;*/<br>
<br>
package progressbar;<br>
<br>
import com.sun.webui.jsf.component.ProgressBar;<br>
import javax.faces.component.UIComponent;<br>
import javax.faces.context.FacesContext;<br>
<br>
<br>
public class ProgressBean2 {<br>
&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp; private int progressRate = 0;<br>
&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp; private String status = "0% complete";<br>
&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp; /** Creates a new instance of ProgressBean */<br>
&nbsp;&nbsp;&nbsp; public ProgressBean2() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp; public int getProgressRate() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String task = "";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (getComponentInstance()
!= null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; task
= getComponentInstance().getTaskState();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(task != null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
(task.equals(ProgressBar.TASK_PAUSED)) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
status = "Task Paused ...";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return progressRate;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
(task.equals(ProgressBar.TASK_CANCELED)) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
status = "Task Canceled ..";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return progressRate;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; progressRate = progressRate
+ 3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; status = progressRate + "%
complete";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (progressRate &gt; 99) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
progressRate = 100;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (progressRate == 100) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
getComponentInstance().setTaskState(ProgressBar.TASK_COMPLETED);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
status = "Task Completed successfully ..";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return progressRate;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp; public String getStatus() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return status;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp; public ProgressBar getComponentInstance() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FacesContext context =
FacesContext.getCurrentInstance();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIComponent comp =
context.getViewRoot().findComponent("form1:pb2");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ProgressBar pb =
(ProgressBar) comp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return pb;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; &nbsp;<br>
&nbsp;&nbsp;&nbsp; public String action() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
getComponentInstance().setTaskState(ProgressBar.TASK_NOT_STARTED);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; progressRate = 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; status = "";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "progressbar";<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; &nbsp;<br>
}</code>      
]]></description>
    </tag>

    <tag>
        <name>property</name>

        <description><![CDATA[
<p>
Use the <code>webuijsf:property</code> tag inside the <a href="propertySheetSection.html">
<code>webuijsf:propertySheetSection</code></a> tag to lay out a property in a
<a href="propertySheet.html"><code>webuijsf:propertySheet</code></a>. The 
<code>webuijsf:property</code> tag allows you to encapsulate a logical property and 
help you lay it out on the page.</p>

<h3>HTML Elements and Layout</h3>

<p>The properties in a property sheet are rendered as rows in a two-column table 
by default. The content of each <code>webuijsf:property</code> tag is rendered as one row. 
The first column is reserved for the property label, which can be specified with 
either the <code>webuijsf:property</code> tag's <code>label</code> attribute or the 
<code>label</code> facet. The <code>label</code> facet provides more control 
over the content of the label area. </p>
<p>
The second column is the content area, which contains the components that are 
specified as the content of the <code>webuijsf:property</code> tag. Each <code>webuijsf:property</code> 
tag can include multiple tags for UI components such as <code>webuijsf:textField</code>, 
<code>webuijsf:dropdown</code>, <code>webuijsf:checkbox</code>, or any other component. You can
label these content components by using their label attributes or the 
<code>webuijsf:label</code> tag. These labels are displayed within the content area.</p>
<p>
The tags for a property's content can be specified as child tags of the 
<code>webuijsf:property</code> tag, or enclosed in the <code>webuijsf:property</code> tag's 
<code>content</code> facet. There is no rendering difference between the two
approaches.</p>

<p> Help text can be provided for each property with the <code>webuijsf:property</code> tag's
    <code>helpText</code> attribute. The help text is displayed 
    below the content of the property in smaller text. If you want more control 
    over the type of content provided in the help text area, you can use the 
    <code>helpText</code> facet.</p>
    
<p>Several attributes can be used to change the formatting of the property label:</p>
<ul>
  <li><code>overlapLabel</code>
can be used to overwrite the label area with an expanded content area. If a 
property label is specified when this attribute is set to true, the label is
not rendered.
  </li>

  <li><code>labelAlign</code>
can be used to align the label to the left or right of the label column. For 
example, labelAlign="right" aligns the property label to the right side of the column,
close to the content area.</li>

  <li><code>noWrap</code> 
  can be used to prevent the label text from wrapping to a new line</li>
 
</ul>
<p>The attributes are described
in greater detail in the list of attributes below.</p>

<h3><a name="Facets"></a>Facets</h3>
<p>
The <code>webuijsf:property</code> tag supports the facets described
below.</p>

<table style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="2">
<tbody>
<tr>
<td style="vertical-align: top;"><code>content<br>
</code></td>
<td style="vertical-align: top;">Specifies the components to
include for the content of the
property component. The content facet is not required, and the
components can be specified as child tags. However, if both child
components and the <code>content</code> facet are supplied, only the
<code>content</code> facet content is displayed. 
</td>
</tr>
<tr>
<td style="vertical-align: top;"><code>label<br>
</code></td>
<td style="vertical-align: top;">Specifies the component and
content to use for the label, overriding the label attribute.<br>
</td>
</tr>
<tr>
<td style="vertical-align: top;"><code>helpText<br>
</code></td>
<td style="vertical-align: top;">Specifies the component and
content
to use for the help text, overriding the helpText attribute.<br>
</td>
</tr>
</tbody>
</table>

<h3>Client Side Javascript Functions</h3>

<p> None.</p>

<h3>Examples</h3>

<h4>Example 1: Content Specified with Child Tags</h4> 

<p>The label is specified via the label attribute. The components of
    the content area are specified as children of the
    <code>webuijsf:property</code> tag.  </p> 

<pre> 
   &lt;webuijsf:property id="prop1" label="Log file name: "&gt;           
       &lt;webuijsf:textField id="logfile" required="true"/&gt;
       &lt;h:message id="logfile_error" for="logfile" showDetail="true"/&gt; 
   &lt;/webuijsf:property&gt;
</pre>

<h4>Example 2: Using the Label Facet</h4> 

<p>The components of the content area are specified as children of the
<code>webuijsf:property</code> tag. The label is specified via a label
facet, to label the dropDown in the content area.  </p>

<pre>            
   &lt;webuijsf:property id="prop2"&gt;    
       &lt;f:facet name="label"&gt;
           &lt;webuijsf:label id="prop2label" 
                     text="Select update frequency"
                     for="unit"/&gt;
       &lt;/f:facet&gt;   
       &lt;webuijsf:textField id="frequency" 
                     text="#{Logger.frequency.number}"
                     label="Every "/&gt;
       &lt;webuijsf:dropDown id="unit" 
                    selected="#{Logger.frequency.unit}"  
                    items="#{Logger.frequency.units}"  
                    required="true"/&gt;
       &lt;h:message id="msg1"_msg4b" for="frequency" showDetail="true"/&gt; 
       &lt;h:message id="msg2" for="unit" showDetail="true"/&gt; 
   &lt;/webuijsf:property&gt;
</pre> 

<h4>Example 3: Using webuijsf:panelGroup for Content Component Layout</h4> 

<p>The components of the content area are specified inside a
    PanelGroup child component. </p>
<pre> 
   &lt;webuijsf:property id="prop3" label="Admin Server URI"&gt; 
       &lt;webuijsf:panelGroup id="pg"&gt;
           &lt;webuijsf:textField id="uri" text="#{Server.uri}" required="true"/&gt;
           &lt;h:message id="msg3" for="uri" showDetail="true"/&gt; 
       &lt;/webuijsf:panelGroup&gt;                               
   &lt;/webuijsf:property&gt;
</pre> 


<h4>Example 4: Using the content Facet</h4> 


<p>The components of the content area are specified inside a
    PanelGroup inside a facet.</p>           

<pre> 
   &lt;webuijsf:property id="prop3" label="Admin Server URI"&gt; 
       &lt;f:facet name="content"&gt;
           &lt;webuijsf:panelGroup id="pg"&gt;
               &lt;webuijsf:textField id="uri" text="#{Server.uri}" required="true"/&gt;
               &lt;h:message id="msg3" for="uri" showDetail="true"/&gt; 
           &lt;/webuijsf:panelGroup&gt;                               
       &lt;/f:facet&gt;                       
   &lt;/webuijsf:property&gt;

</pre>
]]></description>
    </tag>

    <tag>
        <name>propertySheet</name>
        
        <description><![CDATA[
<p>
Use the <code>webuijsf:propertySheet</code> tag to create a layout 
container for a property sheet. A property sheet is a content page that shows an 
object's properties and allows the user to edit the properties. </p>
<p>
The <code>webuijsf:propertySheet</code> tag is a naming container for 
<a href="propertySheetSection.html"> webuijsf:propertySheetSection</a> tags. 
The <code>webuijsf:propertySheetSection</code> tag is a container for code>webuijsf:property</code> tags, 
which define properties to be displayed with input or read-only components. The 
three property sheet tags are used to construct a property sheet that has a 
defined layout with sections.</p>
<p>
A property sheet should contain one <code>webuijsf:propertySheet</code> tag and one or 
more <code>webuijsf:propertSheetSection</code> tags, each containing any number of 
<code>webuijsf:property</code> tags.</p>
<p>
You might find it useful to place the <code>webuijsf:propertySheet</code> tag within 
the <code>webuijsf:contentPageTitle</code> tag to include a title and page controls 
for the property sheet.</p>
<h3>HTML Elements and Layout</h3>

<p> 
The propertySheet component
functions mostly as a container and is rendered with an XHTML <code>&lt;div&gt;</code>
element. The component can also be configured to render <code>&lt;a&gt;</code>
hyperlink elements to create jump links in the page by setting the <code>webuijsf:propertySheet</code>
tag's jumpLinks attribute to true. The links provide a quick way
for the user to jump to each section in the page. The text of the jump links includes
the section label text, if specified in the <code>webuijsf:propertySheetSection</code>
tags. Additional links for jumping back to the top
of the page are rendered at the end of each section.


<h3>Client Side Javascript Functions</h3>

<p> None.</p>

<h3><a name="Example"></a>Examples</a></h3>

<h4>Example 1: A simple property sheet that contains two property sheet sections</h4>
<p>This example shows a property sheet with jump links and a required field legend. </p>
    <code>
    <pre>
	&lt;webuijsf:propertySheet id="propSheetExample1" jumpLinks="true" requiredFields="true" &gt;
	    &lt;webuijsf:propertySheetSection id="firstSection" label="Search Criteria"&gt;
		&lt;webuijsf:property id="Property1" label="Instance Name: " labelAlign="right" noWrap="true" overlapLabel="false"&gt;
		    &lt;webuijsf:dropDown id="servers" required="true" items="#{BackingFileChoice.servers}" /&gt;
		    &lt;f:verbatim&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/f:verbatim&gt;
		    &lt;webuijsf:label id="logFileLabel" labelLevel="2" text="Log File: " /&gt;
		    &lt;webuijsf:dropDown id="logFile" items="#{BackingFileChoice.archivedLogFiles}" /&gt;
		&lt;/webuijsf:property&gt;
		&lt;webuijsf:property id="Property2" label="Log Level: " labelAlign="right" noWrap="true" overlapLabel="false" helpText="#{bundle.['log.level.help']}"&gt;
		    &lt;f:facet name="content"&gt;
			&lt;webuijsf:dropDown id="logLevel" items="#{BackingFileChoice.logLevel}" /&gt;
		    &lt;/f:facet&gt;
		&lt;/webuijsf:property&gt;
	    &lt;/webuijsf:propertySheetSection&gt;
	    &lt;webuijsf:propertySheetSection id="secondSection" label="Advanced Options"&gt;
		&lt;webuijsf:property id="Property3" label="Logger: " labelAlign="right" noWrap="true" overlapLabel="false" helpText="Select one or more module logs to view"&gt;
		    &lt;webuijsf:listbox id="logger" items="#{BackingFileChoice.loggers}" rows="5" /&gt;
		&lt;/webuijsf:property&gt;
		&lt;webuijsf:property id="Property4" noWrap="true" overlapLabel="false" helpText="Select one or more module logs to view"&gt;
		    &lt;webuijsf:checkbox id="limitLongLogs" label="Limit excessively long messages" /&gt;
		&lt;/webuijsf:property&gt;
	    &lt;/webuijsf:propertySheetSection&gt;
	&lt;/webuijsf:propertySheet&gt;
    </pre>
    </code>
</p>
]]></description>
    </tag>

    <tag>
        <name>propertySheetSection</name>

        <description><![CDATA[
<p>
Use the <code>webuijsf:propertySheetSection</code>
tag to create a section in a property sheet. The <code>webuijsf:propertySheetSection</code>
tag must be contained in a <a href="propertySheet.html"><code>webuijsf:propertySheet</code></a>
tag. You can place <a href="property.html"><code>webuijsf:property</code></a>
tags inside the <code>webuijsf:propertySheetSection</code> tag to create the
property page content.</p>
<p>
The <code>webuijsf:propertySheetSection</code> tag allows you to group related 
properties together on a property page. Note that
you must include at least one <code>webuijsf:propertySheetSection</code> tag
in the <code>webuijsf:propertySheet</code> tag, even if the page is a single
section.</p>

<h3>HTML Elements and Layout</h3>
<p>
The propertySheetSection
component functions as a container for the property components and is
rendered with XHTML <code>&lt;div&gt;</code> components. You can provide a
descriptive label for the section by setting the <code>webuijsf:propertySheetSection</code> 
tag's label attribute. The label is displayed at the beginning of the section in 
the rendered HTML page.</p>

<p>Note that although the label is optional, the label text is used for hyperlink 
text when you configure the <a href="propertySheet.html"><code>webuijsf:propertySheet</code></a>
tag to create jump links. If you do not provide labels for the sections, the text 
for the jump links does not properly indicate the link's target to the user.
</p>

<h3>Client Side Javascript Functions</h3>

<p> None.</p>

<h3>Examples</h3>

<p>See the <a href="propertySheet.html#Example">example in the <code>webuijsf:propertySheet</code>
documentation</a>.</p>
]]></description>
    </tag>

    <tag>
        <name>radioButton</name>

        <description><![CDATA[ <p>
 Use the <code>webuijsf:radioButton</code> tag to display a radio button
 in the rendered HTML page. The tag can be used as a single
 radio button or as one radio button among a group of radio buttons.
 A group of radio buttons represents a single selection list.
 A radio button can represent a value of a class type such as
 <code>Boolean, Byte, Character, Double,
 Float, Integer, Long, Short, String</code> or the primitive form of one of
 these class types. A radio button may also represent an application defined 
 object value.
 </p>
 A <code>Boolean</code> value is useful for indicating whether
 an item, such as a table row, is selected. A <code>String</code>
 value is useful for passing a value for the radio button selection made in the
 interface. An application defined <code>Object</code> value or class
 instance can be used to hold more information related to the radio button
 selection.
 </p>
 <p>
 A group of radio buttons is the common way to use the the
 <code>radioButton</code> tag. It can be used to represent different
 types of data:
 </p>
 <ul>
   <li>a group of boolean controls where only one control is selected at a
   time.</li>
   <li>string values that are related to the radio button selection</li>
   <li>object values defined by the application</li>
 </ul>
 <p><em>
 Note: It is not common to use a <code>radioButton</code> tag that is not
 in a group. If a single radio button is not in a group, once it
 is selected by the user in the interface, the user cannot deselect it.
 This is because a radio button is defined to be a single selection
 among several where one radio button is always selected. Since there
 are no other radio buttons grouped with the single radio button, the user
 cannot select an alternative, to cause the selected
 radio button to be deselected.
 </em></p>
 <p>
 Note: Another tag for rendering radio buttons is
 <code>webuijsf:radioButtonGroup</code>, which imposes a grid layout on a group
 of radio buttons. The <code>radioButton</code> tag is useful in
 situations where the <code>radioButtonGroup</code> tag layout is not
 desirable, such as in a table row where only one row among several may be
 selected.
 </p>
 <h3>Detecting a selected radio button</h3>
 <p>
 The <code>radioButton</code> tag uses both the <code>selected</code>
 and <code>selectedValue</code> attributes to pass information about
 the radio button's selection status. The <code>selected</code>
 attribute is used to indicate that the radio button is selected, and should
 have a check mark displayed in the page. The <code>selectedValue</code>
 attribute is used to pass a data value for the
 radio button. A radio button is considered to be selected when the value of the
 <code>selected</code> attribute is equal to the value of
 the <code>selectedValue</code> attribute. You can display a radio button as
 selected on the initial viewing of the page by assigning the same value
 to the <code>selectedValue</code> and the <code> selected</code> attributes.
 </p>
 <p>
 If the <code>selectedValue</code> attribute is not specified or its
 value is <code>null</code> then the radio button behaves like a
 boolean control. If the radio button is selected, the value of the
 <code>selected</code> attribute is a true <code>Boolean</code>
 instance. If the radio button is not selected, the value of the
 <code>selected</code> attribute will be a false <code>Boolean</code>
 instance.
 </p>
 <p><em>
 Note that a value binding expression that evaluates to a
 primitive boolean value can be assigned to the <code>selected</code>
 and <code>selectedValue</code> attributes.
 </em>
 </p>
 <p>
 When a radio button is part of a group, the value of the selected
 radio button is maintained as a request attribute value in the 
 <code>RequestMap</code>. The attribute name is the value of the
 <code>name</code> attribute. The value of the request attribute
 is the value of the <code>selectedValue</code> attribute of the
 selected radio button. The value of the <code>selected</code> attribute
 will also be equal to the <code>selectedValue</code> attribute of the
 selected radio button. If no radio button is selected, no request
 attribute will be created.<br>
 The <code>RadioButton</code> class provides a convenience method for
 obtaining the selected radio button in a group:
 </p>
 <p>
 public static Object getSelected(String groupName);
 </p>
 <p> where <code>groupName</code> is the value of the <code>name</code>
 attribtue. Note that unlike the <code>selected</code> and
 <code>selectedValue</code> attributes, the return value of this method
 is always a class instance and not a primitive value.
 </p>
 <p><em>
 Note that the <code>radioButton</code> does not enforce that
 at least one radio button is always be selected.
 The application must ensure this behavior if necessary.
 </em></p>
 <h3>Using a <code>radioButton</code> tag as a boolean control</h3>
 <p>
 If the <code>selectedValue</code> attribute is not specified or its
 value is <code>null</code> then the radio button behaves like a
 boolean control.
 </p>
 <p>
 To use the <code>radioButton</code> tag as a boolean control, do not
 specify a value for the <code>selectedValue</code> attribute. The
 radio button is selected if the <code>selected</code> attribute is not
 null and has the value of a true <code>Boolean</code> instance or 
 <code>boolean</code> primitive. If the radio button is not selected,
 then the value of the <code>selected</code> attribute is a false
 <code>Boolean</code> instance or <code>boolean</code> primitive.
 </p>
 <p>
 Normally the value of the <code>selectedValue</code> attribute is
 specified as the value of the &lt;input&gt; HTML element. When a
 radio button is behaving as a boolean control the value of the &lt;input&gt;
 element is the <code>clientId</code> of the radio button.
 </p>
 <p><em>
 Note that using a boolean radio button in a group and
 referencing the request attribute for the selected radio button is not
 useful, since the value of the request attribute will be an
 indistinguishable <code>Boolean</code> <code>true</code> value.</em>
 </p>
 <h3>Using a <code>radioButton</code> tag to represent an application defined
 value</h3>
 <p>
 The <code>selectedValue</code> attribute can be assigned an
 application defined object value to represent the value of a selected
 radio button. If the radio button is selected, the value of the
 <code>selected</code> attribute is assigned the value of the
 <code>selectedValue</code> attribute.
 </p>
 <p>
 If the value of the <code>selectedValue</code> attribute is an
 application defined object, a converter must be registered
 to convert to and from a <code>String</code> value. The
 converter is used to encode the radio button value
 as the value of the HTML &lt;input&gt; element and to decode the
 submitted value in a request. In addition the object must support an
 <code>equals</code> method that returns <code>true</code> when the
 value of the <code>selectedValue</code> attribute is compared to
 the <code>selected</code> attribute value in order to detect a
 selected radio button.
 </p>
 <h3>Using a <code>radioButton</code> tag as one control in a group</h3>
 <p>
 The <code>name</code> attribute determines whether a
 radio button is part of a group. A radio button is treated as part of a group
 of radio buttons if the <code>name</code> attribute of the radio button is
 assigned a value equal to the <code>name</code> attribute of the other
 radio buttons in the group. In other words, all radio buttons of a group
 have the same <code>name</code> attribute value. The group behaves
 like a single selection list, where only one radio button
 can be selected. The value of the name attribute must
 be unique within the scope of the &lt;form&gt; element containing the
 radio buttons.
 </p>
 <h3>Facets</h3>
 <p>
 The following facets are supported:
 <ul>
   <li><em>image</em> If the image facet exists, it is rendered to the
       immediate right hand side of the radio button.
   <li><em>label</em> If the label facet exists, it is rendered to the
 	immediate right of the image, or to the immediate right of the
 	radio button if no image is rendered.
 </ul>
 </p>
 <h3>Examples</h3>
 <h4>Example 1: Two grouped boolean radio buttons with value bindings.</h4>
 <code>
 &lt;webuijsf:radioButton id="rb0" name="rb1grp"
     selected="#{tldRbCbExample.selectedRb0}"/&gt;<br/>
 &lt;br/&gt;<br/>
 &lt;webuijsf:radioButton id="rb1" name="rb1grp"
     selected="#{tldRbCbExample.selectedRb1}"/&gt;
 </code>
 <p>
 The value bindings imply that
 there are two methods implemented in the <code>tldRbCbExample</code>
 managed bean for each value binding.
 </p>
 <ul>
 <li>public void setSelectedRb0(boolean selected)</li>
 <li>public boolean getSelectedRb0()</li>
 <li>public void setSelectedRb1(boolean selected)</li>
 <li>public boolean getSelectedRb1()</li>
 </ul>
 <p>
 The "getSelected" methods will be called to determine the checked
 state of the radio buttons during rendering.<br/>
 When the tags are first rendered, the initial checked state is
 determined by the return value of the "getSelected" methods, only one of
 which should return true.
 The radio button whose "getSelected" method returns 
 <code>true</code> will be checked in the HTML page and not checked if it
 returns <code>false</code>.
 When one of the radio buttons is checked by the user its "setSelected" method
 will be called with a <code>boolean</code> argument equal to <code>true</code>.
 The other radio button's "setSelected" method will be called
 with a <code>boolean</code> argument equal to <code>false</code>.<br/>
 </p>
 <p>
 No image or label will be displayed by this example.
 </p>
 <h4>Example 2: Two grouped boolean radio buttons with value bindings,
 that display an image and a label.</h4>
 <code>
 &lt;webuijsf:radioButton id="rb2" name="rb2grp" 
     imageURL="tree_server.gif" label="Server"
     selected="#{tldRbCbExample.selectedRb2}"/&gt;<br/>
 &lt;br/&gt;<br/>
 &lt;webuijsf:radioButton id="rb3" name="rb2grp"
     imageURL="pool_tree.gif" label="Pool"
     selected="#{tldRbCbExample.selectedRb3}"/&gt;
 </code>
 <p>
 The behavior of these radio buttons is the same as example one.<br/>
 In this example an image and a label are displayed next to both 
 radio buttons. Both
 the <code>imageURL</code> and <code>label</code> attributes may be assigned
 value binding expressions instead of literal values.
 </p>
 <h4>Example 3: Two grouped String valued radio buttons with value bindings 
 and labels.</h4>
 <code>
 &lt;webuijsf:radioButton id="rb4" name="rb3grp" 
 	label="Print" selectedValue="Print"
 	selected="#{tldRbCbExample.selectedRb4}"/&gt;<br/>
 &lt;br/&gt;<br/>
 &lt;webuijsf:radioButton id="rb5" name="rb3grp"
 	label="Fax" selectedValue="Fax"
 	selected="#{tldRbCbExample.selectedRb5}"/&gt;
 </code>
 <p>
 The value bindings imply that
 there are two methods implemented in the <code>tldRbCbExample</code>
 managed bean for each value binding.
 Because the <code>selectedValue</code> attribute is a
 <code>String</code> the expected method signatures will be:
 </p>
 <ul>
 <li>public void setSelectedRb4(String selected)</li>
 <li>public String getSelectedRb4()</li>
 <li>public void setSelectedRb5(String selected)</li>
 <li>public String getSelectedRb5()</li>
 </ul>
 <p>
 The "getSelected" methods will be called to determine the checked
 state of the radio buttons during rendering.<br/>
 When the tags are first rendered, the initial checked state is
 determined by the return value of the "getSelected" methods.<br/>
 With a <code>String</code> valued radio button, a radio button will 
 be checked only if the "getSelected" method returns the value of its
 <code>selectedValue</code> attribute.<br/>
 For example if <code>getSelectedRb4</code> returns "Print", the
 radio button "rb4" will be checked. <code>getSelectedRb5</code> must 
 not return "Fax" and should return <code>null</code> in order for "rb4" to 
 remain checked.<br/>
 Alternatively if <code>getSelectedRb4</code> returns <code>null</code>
 <code>getSelectedRb5</code> should return "Fax", and radio button "rb5"
 will be checked.
 </p>
 <p>
 When the radio button is checked by the user the "setSelected"
 methods will be called with a <code>String</code> argument equal to the
 value of the <code>selectedValue</code> attribute of the radio button.<br/>
 When it is unchecked the method will be called with a <code>null</code>
 <code>String</code>
 argument.<br/>
 For example if radio button "rb4" is checked by the user
 <code>setSelectedRb4</code> will be called with "Print" as the argument and
 <code>setSelectedRb5</code> will be called with a <code>null</code> argument.
 </p>
 <h4>Example 4: Two grouped object valued radio buttons with value bindings
 and labels.</h4>
 <code>
 &lt;webuijsf:radioButton id="rb6" name="rb4grp" label="Print"
 	selectedValue="#{tldRbCbExample.selectedValueRb6}"
 	selected="#{tldRbCbExample.selectedRb6}"
 	converter="#{tldRbCbExample.rbConverter}"/&gt;<br/>
 &lt;br/&gt;<br/>
 &lt;webuijsf:radioButton id="rb7" name="rb4grp" label="Fax"
 	selectedValue="#{tldRbCbExample.selectedValueRb7}"
 	selected="#{tldRbCbExample.selectedRb7}"
 	converter="#{tldRbCbExample.rbConverter}"/&gt;
 </code>
 <p>
 The value bindings imply that
 there are two methods implemented in the <code>tldRbCbExample</code>
 managed bean for each value binding.
 Let's say the object value for "rb6" is an instance of the "Printer" class,
 and "rb7" an instance of the "Fax" class, then the expected
 method signatures will be:
 </p>
 <p>
 <ul>
 <li>public void setSelectedRb6(Printer selected)</li>
 <li>public Printer getSelectedRb6()</li>
 <li>public void setSelectedValueRb7(Fax selected)</li>
 <li>public Printer getSelectedValueRb7()</li>
 </ul>
 </p>
 A Printer class might look like:
 <p>
 <code><pre>
     public class Printer implements Device {
 	private String name;
 	private String location;
 	public Printer(String name, String location) {
 	    this.name = name;
 	    this.location = location;
 	}
 	public String getName() {
 	    return name;
 	}
 	public String getLocation() {
 	    return location;
 	}
 	public int getType() {
 	    return Device.PRINTER;
 	}
 	public boolean equals(Printer p) {
 	    return this.name.equals(p.getName()) &&
 		    this.location.equals(p.getLocation()) &&
 		    p.getType() == Device.PRINTER;
 	}
     };
 </pre>
 </code>
 </p>
 A Fax class might look like:
 <p>
 <code><pre>
     public class Fax implements Device {
 	private String name;
 	private String phoneNumber;
 	public Printer(String name, String phoneNumber) {
 	    this.name = name;
 	    this.phoneNumber = phoneNumber;
 	}
 	public String getName() {
 	    return name;
         }
 	public String getPhoneNumber() {
 	    return phoneNumber;
 	}
 	public int getType() {
 	    return Device.FAX;
 	}
 	public boolean equals(Fax f) {
 	    return this.name.equals(f.getName()) &&
 		    this.phoneNumber.equals(f.getPhoneNumber()) &&
 		    f.getType() == Device.FAX;
 	}
     };
 </pre>
 </code>
 </p>
 <p>
 Since this radio button represents an application defined object value,
 the application must provide a converter instance. The converter attribute's
 value binding expression implies a method in the <code>tldRbCbExample</code>
 managed bean called
 </p>
 <p>
 <code>public Converter getRbConverter();</code>
 </p>
 The converter class might look like:
 <code><pre>
     public class RbConverter implements javax.faces.convert.Converter {
 	public RbConverter() {
 	}
 	public String getAsString(FacesContext context, 
 		UIComponent component, Object value) {
 	    if (!value instanceof Device) {
 		throw new ConverterException("Not a Device value");
 	    }
 	    return String.valueOf(((Device)value).getType());
 	}
 	public Object getAsObject(FacesContext context, 
 		UIComponent component, String value) {
 	    if (value == null) {
 		return null;
 	    }
 	    // value is the String representation of "getType"
 	    //
 	    int type = Integer.parseInt(value);
 	    switch (type) {
 	    case Device.PRINTER:
 		return deviceDb.getClosestPrinter();
 	    break;
 	    case Device.FAX:
 		return deviceDb.getFax();
 	    break;
 	    default:
 		throw new ConverterException("No such device : " + value);
 	    break;
 	    }
 	}
     };
 </pre>
 </code>
 <p>
 The "getSelected" methods will be called to determine the checked
 state of the radio buttons during rendering.<br/>
 When the tags are first rendered, the initial checked state is
 determined by the return value of the "getSelected" methods.<br/>
 With <code>Object</code> valued radio buttons,
 a radio button will be checked only if the "getSelected" method
 returns an object instance that equals the object instance returned
 by the "getSelectedValue" method.<br/>
 For example if <code>getSelectedRb6</code> returns the <code>Printer</code>
 instance value of "rb6"'s <code>selectedValue</code> attribute, then
 "rb6" will be checked. <code>getSelectedRb7</code> should return
 <code>null</code>. If the <code>getSelectedRb6</code> method returns a
 <code>Printer</code> instance that is not equal as determined by
 <code>getSelectedValueRb6().equals(getSelectedRb6())</code> the radio button
 will not be checked.<br/>
 When the radio button is checked by the user the "setSelectedValue"
 methods will be called with the object instance returned by the converter.<br/>
 For example if "rb6" is checked by the user, <code>setSelectedRb6</code> will
 be called with a <code>Printer</code> instance returned by the converter.
 <code>setSelectedRb7</code> will be called with a <code>null</code>
 argument.
 </p>
 <p>
 Note that when radio buttons are part of a group the value of the
 selected radio button can be obtained directly from the request map.
 For example, processing the selection could take place in the action
 method of a submit button tag:
 </p>
 <p>
 <code><pre>
     public void submit() {
 	// RadioButton.getSelected(String groupName) is
 	// a static convenience method that obtains the 
 	// selected radio button value from the request map
 	// <em>ONLY when the radio button is part of a group</em>.
 	//
 	Object selection = RadioButton.getSelected("rb4grp");
 	// Assume at least one radio button will be selected.
 	//
 	processSelection((Device)selection);
     }
 </pre></code>
 </p>
 <h4>Example 5: Grouped Integer valued radio buttons in a table.</h4>
 <p>
 The following example shows a common use case for radio buttons in
 a table. The radio buttons are used to select at most one row
 for processing. The radio button state does not need to be
 stored. The selected row index can be obtained directly in the
 <code>#{tldRbCbExample.table5process}</code> method, using the
 <code>RadioButton.getSelected(String groupName)</code> convenience
 method. The markup in bold is how you would specify a radio button tag
 for this purpose.  The <code>selectedValue</code> value binding,
 <code>#{tldRbCbExample.currentRow1}</code>
 is implemented to return the current row in the <code>table5row1</code>
 tableRow tag.
 </p>
 <p>
 Note that this example will not initially select a radio button
 which is normally not the way radio buttons are used; one is usually
 always checked.
 </p>
 <p>
 <code><pre>
     &lt;webuijsf:table id="table5"&gt;
 	&lt;webuijsf:tableRow id="table5row1"
 	    sourceData="#{tldRbCbExample.table5row1data}"
 	    sourceVar="table5data"
 	    binding="#{tldRbCbExample.table5row1}"&gt;
 	    &lt;webuijsf:tableColumn id="col1"&gt;
 		&lt;f:facet name="header"&gt;
 		    &lt;webuijsf:tableHeader id="header1"
 			deselectAllButton="true"
 			selectAllButton="true"
 			selectId="rb5"/&gt;
 		&lt;/f:facet&gt;
 		<b>
 		&lt;webuijsf:radioButton id="rb8" name="rb5grp" 
 			selectedValue="#{tldRbCbExample.currentRow1}"&gt;
 		&lt;/webuijsf:radioButton&gt;
 		</b>
 	    &lt;/webuijsf:tableColumn&gt;
 	    &lt;webuijsf:tableColumn id="col2"&gt;
 		&lt;f:facet name="header"&gt;
 		    &lt;webuijsf:staticText text="Application Data"/&gt;
 		&lt;/f:facet&gt;
 		&lt;webuijsf:staticText text="#{table5data.text}"/&gt;
 	    &lt;/webuijsf:tableColumn&gt;
 	&lt;/webuijsf:tableRow&gt;
 	&lt;f:facet name="tableActionsBottom"&gt;
 	   &lt;webuijsf:button id="table5process"
 		action="#{tldRbCbExample.table5process}"
 		text="Process Checked"/&gt;
 	&lt;/f:facet&gt;
     &lt;/webuijsf:table&gt;
 </pre>
 </code>
 </p>
 <p>
 See <a href="table.html" target="tagFrame">webuijsf:table</a> for details
 on using the  <code>&lt;webuijsf:table&gt;</code> tag and other table child tags
 and facets.
 </p>
 <p>
 </p>
 <p>
 Normally when radio buttons are contained within a <code>webuijsf:tableRow</code>
 the application MUST provide a value binding for the <code>selected</code>
 attribute and any attribute that is expected to maintain its state. This
 is because the table only creates a single instance of the radio button for
 all rows. It depends on a model to provide the storage for the attribute
 values, as it iterates over the rows in the dataset.<br/>
 In this example, we don't need to maintain the state across requests because
 a row is only selected for processing. Once the processing
 is complete, the radio button no longer needs to be checked.
 <p>
 The following code shows how the <code>table5process</code> action
 method obtains the selected radio button value from the request map.
 It calls a static member on <code>RadioButton</code> to return the
 <code>Integer</code> row index.
 </p>
 <code><pre>
     public void table5process() {
 	// RadioButton.getSelected(String groupName) is
 	// a static convenience method that obtains the 
 	// selected radio button value from the request map
 	// <em>ONLY when the radio button is part of a group</em>.
 	//
 	Integer row = (Integer)RadioButton.getSelected("rb5grp");
 	if (row != null) {
 	    processRow(row.intValue());
 	}
     }
 </pre></code>
 <p>
 <h4>Example 6: Grouped boolean radio buttons in a table, using value bindings to
 maintain the state.</h4>
 <p>
 This example is similar to Example 5, but it maintains the state of the radio
 buttons across requests, by specifying a value binding for the selected
 attribute.  A simple way to store the radio button state, is to store the
 state with the row data. The following code replaces the "webuijsf:radioButton"
 code in the previous example.
 </p>
 <code>
 	&lt;webuijsf:radioButton id="rb6" name="rb6grp"
 		selected="#{table6data.selected}"&gt;
 	&lt;/webuijsf:radioButton&gt;
 </code>
 <p>
 The value binding <code>#{table6data.selected}</code> references a boolean
 member in the row data for storing and retrieving the radio button state.
 </p>
 <h3>HTML Elements and Layout</h3>
 <p>
 A <code>radioButton</code> is rendered as at least one HTML &lt;span&gt;
 element and one &lt;input&gt; element of type <em>radio</em>.
 Each radio button may consist of the following elements:
 </p>
 <ul>
     <li>a &lt;span&gt; element</li>
     <li>an &lt;input&gt; element of type <em>radio</em></li>
     <li>an optional image if the <code>imageURL</code>
     attribute or an <code>image</code> facet is specified. If the 
     <code>imageURL</code> attribute is specified a
     <code>com.sun.webui.jsf.component.ImageComponent</code> component is created
     and rendered. If an <code>image</code> facet is specified then the 
     component specified by the facet is rendered.</li>
     <li>an optional label if a <code>label</code>
     attribute or a <code>label</code> facet is specified.
     If the <code>label</code> attribute is
     specified a <code>com.sun.webui.jsf.component.Label</code> component is
     created and rendered. If a <code>label</code> facet is specified then 
     the component specified by the facet is rendered.</li>
 </ul>
 <p>
 The id attributes for HTML elements are constructed as follows,
 where <em>rid</em> is the <code>clientId</code> of the 
 component being rendered.
 <p>
 <ul>
 <li> <em>rid_span</em> for the &lt;span&gt; element
 </li>
 <li> <em>rid</em> for the &lt;input element
 </li>
 <li> <em>rid</em><b>_image</b> for the image component if created.</li>
 <li> <em>rid</em><b>_label</b> for the label component if created.</li>
 </li>
 </ul>
 </p>
 <p>
 Note that the value of the <code>style</code> and <code>styleClass</code>
 attributes of a radio button will be assigned to the containing 
 &lt;span&gt; HTML element's <code>style</code> and <code>class</code> attributes
 respectively.
 </p>
 <h3>Client Side Javascript Functions </h3>
 <p>
 <ul>
     <li><em>radioButton_setChecked(elementId, checked)</em>: Set the checked
     property for a radio button with the given element id, <em>elementId</em>.
     If <em>checked</em> is true the radio button is checked.
     If <em>checked</em> is false the radio button is unchecked.</li>
 </ul>
 </p>
 	<h3>Theme Identifiers</h3>
 <p>
 	<lo>
 	<li>Rb for the INPUT element</li>
 	<li>RbDis for the INPUT element for disabled radio button</li>
 	<li>RbLbl for a LABEL element of a radio button</li>
 	<li>RbLblDis for a LABEL element of a disabled radio button</li>
 	<li>RbImg for an IMG element of a radio button</li>
 	<li>RbImgDis for an IMG element of a disabled radio button</li>
 	</lo>
 </p>
 -->
]]></description>
    </tag>

    <tag>
        <name>radioButtonGroup</name>

        <description><![CDATA[ <p>
 	Use the <code>webuijsf:radioButtonGroup</code> tag to display two or more 
 	radio buttons in a grid layout in the rendered HTML page. The 
 	<code>webuijsf:radioButtonGroup</code> tag attributes that
 	you specify determine how the radio buttons are displayed. 
 </p>
 <p>
 	If the <code>label</code> attribute is specified a
 	<code>com.sun.webui.jsf.component.Label</code> component
 	is rendered before the first radio button and
 	identifies the radio button group. The label component's
 	<code>for</code> attribute is 
 	set to the <code>id</code> attribute of the first radio button in
 	the rendered HTML page.
 </p>
 <p>
 	The radio buttons are laid out in rows and columns in an HTML
 	&lt;table&gt;
 	element. The number of rows is defined by the length of the items
 	array. The number of columns is defined by the columns attribute. The
 	default layout is a single vertical column.
 </p>
 <p>
 	The <code>items</code> attribute must be a value binding expression.
 	The value binding expression assigned to the <code>items</code>
 	property evaluates to an <code>Object</code> array of 
 	<code>com.sun.webui.jsf.model.Option</code> instances.
 	Each
 	instance represents one radio button. The <code>value</code> property
 	of an <code>Option</code> instance represents the value of a
 	selected radio button.
 	If the <code>items</code> array is empty nothing is rendered.
 </p>
 <p>	
 	At least one radio button should be selected by the application.
 	The <code>selected</code> attribute must also be a value binding
 	expression that is evaluated to read and write an <code>Object</code>.
 	When an <code>Object</code> value is read from the value binding
 	expression, it identifies the selected radio button.
 	The <code>Object</code> value must
 	be equal to the value property of at least one <code>Option</code>
 	instance specified in the array obtained from the value binding
 	expression assigned to the <code>items</code> attribute.
 </p>
 <p>
 	The write method of the <code>selected</code> attribute value
 	binding expression is called during the <code>UPDATE_MODEL_PHASE</code>
 	of the JSF lifecyle. If a radio button is selected
 	an <code>Object</code> value is passed as an argument to the
 	write method. The <ccode>Object</code> value is the 
 	value of the selected radio button.
 </p>
 	<h3>HTML Elements and Layout</h3>
 <p>
 	A <code>webuijsf:radioButtonGroup</code> renders one
 	<code>com.sun.webui.jsf.component.RadioButton</code> component for
 	each element in the <code>items</code> array. 
 	See <a href="radioButton.html" target="tagFrame">webuijsf:radioButton</a> for
 	details on the HTML elements and components rendered for a 
 	radio button.
 </p>
 <p>
 	The value of the <code>name</code> attribute of each 
 	<code>RadioButton</code> component rendered is assigned the
 	<code>clientId</code> of the <code>RadioButtonGroup</code>
 	component instance associated with this tag. The <code>id</code>
 	attribute of each <code>RadioButton</code> component rendered
 	is formed as follows, where <em>rbgrpid</em> is the id of the
 	<code>RadioButtonGroup</code> instance and <em>N</em> is the nth
 	radio button.
 </p>
 	<ul>
 	<li> <em>rbgrpid_N</em></li>
 	</ul>
 <p>
 	See <a href="radioButton.html" target="tagFrame">webuijsf:radioButton</a> for
 	details on how the id properties of the components that make up the 
 	radio button are defined.
 </p>
         <h3>Client Side Javascript Functions</h3>
 <p>
 	none.
 </p>
 	<h3>Example</h3>
 	<b>Example 1: Create a radio button group</b>
 	<p>
 	<code>
 	&nbsp;&lt;webuijsf:radioButtonGroup items="#{rbcbGrp.selections}"</br>
 	&nbsp;&nbsp;&nbsp;&nbsp;label="#{rbcbGrp.rbGrpLabel}"</br>
 	&nbsp;&nbsp;&nbsp;&nbsp;toolTip="rbgrp-tooltip"</br>
 	&nbsp;&nbsp;&nbsp;&nbsp;tabIndex="1"</br>
 	&nbsp;&nbsp;&nbsp;&nbsp;columns="3"</br>
 	&nbsp;&nbsp;&nbsp;&nbsp;labelLevel="2"</br>
 	&nbsp;&nbsp;&nbsp;&nbsp;selected="#{rbcbGrp.selection}"&gt;</br>
 	&nbsp;&lt;/webuijsf:radioButtonGroup&gt;</br>
 	</code>
 	</p>
 	<p>
 	This example creates a radio button group with an identifying
 	label for the group before the first radio button. The 
 	data for the radio buttons is obtained from the value binding
 	expression <code>#{rbcbGrp.selections}</code> where <code>rbcbGrp</code>
 	is an application defined managed bean. The bean provides the values for
 	other attributes such as <code>selected</code> to receive the
 	value of the selected radio button in the group.
 	</p>
 	<h3>CSS style selectors</h3>
 <p>
 	<ul>
 	<li>RbGrp for the TABLE element.</li>
 	<li>RbGrpCpt for the TD element containing the group label</li>
 	<li>RbGrpLbl for the LABEL element used as the CAPTION</li>
 	<li>RbGrpLblDis for the LABEL used as the CAPTION if the group is disabled</li>
 	<li>RbGrpRwEv for even TR elements</li>
 	<li>RbGrpRwOd for odd TR elements</li>
 	<li>RbGrpClEv for even TD elements</li>
 	<li>RbGrpClOd for odd TD elements</li>
 	<li>Rb for the INPUT element</li>
 	<li>RbDis for the INPUT element for disabled radio button </li>
 	<li>RbLbl for a LABEL element of a radio button</li>
 	<li>RbLblDis for a LABEL element of a disabled radio button</li>
 	<li>RbImg for an IMG element of a radio button</li>
 	<li>RbImgDis for an IMG element of a disabled radio button</li>
 	</ul>
 </p>
 	-->
]]></description>
    </tag>

    <tag>
        <name>scheduler</name>

        <description><![CDATA[ <p> Use the <code>webuijsf:scheduler</code> tag to display a calendar and
 the input controls that are used for selecting a date and time. The
 <code>webuijsf:scheduler</code> tag's attributes allow you to associate the
 component with a value (a <code>com.sun.webui.jsf.model.ScheduledEvent</code>), 
 and to configure how the input controls are rendered. </p>
 <h3>HTML Elements and Layout</h3>
 <p>The Scheduler component displays a monthly calendar, consisting of   
 a <code>&lt;table&gt;</code> element with cells that contain hyperlinks
 for each day of the month. When a date link is clicked, the associated
 date is displayed in the Start Date field. The current month is displayed
 initially by default, and the user can select a different month by
 using a drop down menu. Hyperlinked icons to the left and right of the
 Month menu can be used to go to the previous and next months. Another
 drop down menu can be used to select a different year.</p>
 <p>
 The Start Time
 is always rendered by the component, and consists of separate drop down
 menus for the hour and minute. The user is required to
 enter values for Start Date and Start Time, so those subcomponents of
 the Scheduler are annotated as required by default.</p>
 <p>Additional input controls
 for End Time, Repeat Interval, and Repeat Limit are rendered by default
 to allow detailed scheduling control by the
 user. These input controls can be removed by setting <code>webuijsf:scheduler</code>
 tag attributes. The Scheduler component also renders a button to allow users to
 preview their scheduled events in the calendar, where days with
 scheduled events appear as highlighted cells in the table.</p>
 <p>The following diagram shows
 the layout of the Scheduler component. The
 diagram represents the default calendar, which
 includes all available input controls.</p>
 <div class="ConMgn_sun4">
 <div id="schedulerForm:scheduler">
 <table title="" border="0" cellpadding="0"
  cellspacing="0">
   <tbody>
     <tr>
       <td>&nbsp;</td>
       <td>
       <div class="LblRqdDiv_sun4" align="right">*&nbsp;Indicates
 required field </div>
       </td>
     </tr>
     <tr>
       <td colspan="2"> </td>
     </tr>
     <tr>
       <td valign="top">
       <div id="scheduler_datePicker">
       <div class="DatSelDiv_sun4">
       <table border="0" cellpadding="0" cellspacing="0">
         <tbody>
           <tr>
             <td align="left"> <a id="previousMonthLink"
  href="#">&nbsp;&lt;&nbsp;<br>
             </a></td>
             <td align="left">
             <select class="MnuJmp_sun4" id="monthMenu"
  name="monthMenu" size="1"
  title="List of Months (Display Month You Select) ">
             <option class="MnuJmpOptSel_sun4" value="1"
  selected="selected">January</option>
             </select>
             </td>
             <td align="left"> <a id="nextMonthLink"
  href="#">&nbsp;&gt;&nbsp;<br>
             </a></td>
             <td width="8">&nbsp;</td>
             <td>
             <select class="MnuJmp_sun4" id="yearMenu"
  name="yearMenu" size="1"
  title="List of Years (Display Year You Select) ">
             <option class="MnuJmpOptSel_sun4" value="2006"
  selected="selected">2006</option>
             </select>
             </td>
           </tr>
         </tbody>
       </table>
       </div>
       <div class="DatCalDiv_sun4">
       <table class="DatCalTbl_sun4" border="0"
  cellpadding="0" cellspacing="1" width="100%">
         <tbody>
           <tr>
             <th scope="col" align="center"> <span
  class="DatDayHdrTxt_sun4">S </span></th>
             <th scope="col" align="center"> <span
  class="DatDayHdrTxt_sun4">M </span></th>
             <th scope="col" align="center"> <span
  class="DatDayHdrTxt_sun4">T </span></th>
             <th scope="col" align="center"> <span
  class="DatDayHdrTxt_sun4">W </span></th>
             <th scope="col" align="center"> <span
  class="DatDayHdrTxt_sun4">T </span></th>
             <th scope="col" align="center"> <span
  class="DatDayHdrTxt_sun4">F </span></th>
             <th scope="col" align="center"> <span
  class="DatDayHdrTxt_sun4">S </span></th>
           </tr>
           <tr id="scheduler_datePicker:row0">
             <td align="center"> <a class="DatLnk_sun4"
  id="dateLink0" title="01/01/2006" href="scheduler.html">1</a>
             </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="dateLink1" title="01/02/2006"
   href="#">2</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink2"
  title="01/03/2006"
  href="#">3</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink3"
  title="01/04/2006"
  href="#">4</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink4"
  title="01/05/2006"
  href="#">5</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink5"
  title="01/06/2006"
  href="#">6</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink6"
  title="01/07/2006"
  href="#">7</a> </td>
           </tr>
           <tr id="schedulerForm:scheduler:scheduler_datePicker:row1">
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink7"
  title="01/08/2006"
  href="#">8</a> </td>
             <td align="center"> <a class="DatBldLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink8"
  title="01/09/2006"
  href="#">9</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink9"
  title="01/10/2006"
  href="#">10</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink10"
  title="01/11/2006"
  href="#">11</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink11"
  title="01/12/2006"
  href="#">12</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink12"
  title="01/13/2006"
  href="#">13</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink13"
  title="01/14/2006"
  href="#">14</a> </td>
           </tr>
           <tr id="schedulerForm:scheduler:scheduler_datePicker:row2">
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink14"
  title="01/15/2006"
  href="#">15</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink15"
  title="01/16/2006"
  href="#">16</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink16"
  title="01/17/2006"
  href="#">17</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink17"
  title="01/18/2006"
  href="#">18</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink18"
  title="01/19/2006"
  href="#">19</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink19"
  title="01/20/2006"
  href="#">20</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink20"
  title="01/21/2006"
  href="#">21</a> </td>
           </tr>
           <tr id="schedulerForm:scheduler:scheduler_datePicker:row3">
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink21"
  title="01/22/2006"
  href="#">22</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink22"
  title="01/23/2006"
  href="#">23</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink23"
  title="01/24/2006"
  href="#">24</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink24"
  title="01/25/2006"
  href="#">25</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink25"
  title="01/26/2006"
  href="#">26</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink26"
  title="01/27/2006"
  href="#">27</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink27"
  title="01/28/2006"
  href="#">28</a> </td>
           </tr>
           <tr id="schedulerForm:scheduler:scheduler_datePicker:row4">
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink28"
  title="01/29/2006"
  href="#">29</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink29"
  title="01/30/2006"
  href="#">30</a> </td>
             <td align="center"> <a class="DatLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink30"
  title="01/31/2006"
  href="#">31</a> </td>
             <td align="center"> <a class="DatOthLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink31"
  title="02/01/2006"
  href="#">1</a> </td>
             <td align="center"> <a class="DatOthLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink32"
  title="02/02/2006"
  href="#">2</a> </td>
             <td align="center"> <a class="DatOthLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink33"
  title="02/03/2006"
  href="#">3</a> </td>
             <td align="center"> <a class="DatOthLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink34"
  title="02/04/2006"
  href="#">4</a> </td>
           </tr>
           <tr id="schedulerForm:scheduler:scheduler_datePicker:row5"
  style="display: none;">
             <td align="center"> <a class="DatOthLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink35"
  title="02/05/2006"
  href="#">5</a> </td>
             <td align="center"> <a class="DatOthLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink36"
  title="02/06/2006"
  href="#">6</a> </td>
             <td align="center"> <a class="DatOthLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink37"
  title="02/07/2006"
  href="#">7</a> </td>
             <td align="center"> <a class="DatOthLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink38"
  title="02/08/2006"
  href="#">8</a> </td>
             <td align="center"> <a class="DatOthLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink39"
  title="02/09/2006"
  href="#">9</a> </td>
             <td align="center"> <a class="DatOthLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink40"
  title="02/10/2006"
  href="#">10</a> </td>
             <td align="center"> <a class="DatOthLnk_sun4"
  id="schedulerForm:scheduler:scheduler_datePicker:dateLink41"
  title="02/11/2006"
  href="#">11</a> </td>
           </tr>
         </tbody>
       </table>
       </div>
       <div> <a
  name="schedulerForm:scheduler:scheduler_datePicker_skipSection"></a></div>
       </div>
       </td>
       <td valign="top">
       <table title="" border="0" cellpadding="0"
  cellspacing="0">
         <tbody>
           <tr>
             <td> <img
  src="file:///testapp/theme/com/sun/webui/jsf/suntheme/images/other/dot.gif"
  alt="" height="1" width="30"></td>
             <td nowrap="nowrap"> <label
  id="schedulerForm:scheduler:scheduler_dateLabel"
  for="schedulerForm:scheduler:scheduler_date" class="LblLev2Txt_sun4">*
 Start
 Date: </label></td>
             <td> </td>
             <td> <input size="12"
  id="schedulerForm:scheduler:scheduler_date"
  name="schedulerForm:scheduler:scheduler_date" class="TxtFld_sun4"
  value="" type="text"></td>
           </tr>
           <tr>
             <td colspan="3">&nbsp;</td>
             <td>
             <div class="inlineFieldHelp_sun4">mm/dd/yyyy</div>
             </td>
           </tr>
           <tr>
             <td colspan="4"> <img
  src="file:///testapp/theme/com/sun/webui/jsf/suntheme/images/other/dot.gif"
  alt="" height="5" width="1"></td>
           </tr>
           <tr>
             <td>&nbsp;</td>
             <td nowrap="nowrap"> <span
  class="DatLblTxt_sun4"><label
  id="schedulerForm:scheduler:scheduler_startTimeLabel"
  for="schedulerForm:scheduler:scheduler_startTime"
  class="LblLev2Txt_sun4">*
 Start
 Time: </label> </span></td>
             <td>&nbsp;</td>
             <td>
             <table cellpadding="0" cellspacing="0">
               <tbody>
                 <tr>
                   <td>
                   <select class="MnuStd_sun4"
  id="scheduler_startTime_hour" name="scheduler_startTime_hour"
  size="1" title="Hour for Start Time">
                   <option class="MnuStdOptSel_sun4" value="-1"
  selected="selected"> </option>
                   </select>
                   </td>
                   <td>:</td>
                   <td>
                   <select class="MnuStd_sun4"
  id="scheduler_startTime_minutes"
  name="scheduler_startTime_minutes" size="1"
  title="Minutes for Start Time">
                   <option class="MnuStdOptSel_sun4" value="-1"
  selected="selected"> </option>
                   </select>
                   <span class="DatZonTxt_sun4">GMT-05:00</span>
                   </td>
                 </tr>
               </tbody>
             </table>
             </td>
           </tr>
           <tr>
             <td colspan="4"> </td>
           </tr>
           <tr>
             <td>&nbsp;</td>
             <td nowrap="nowrap"> <span
  class="DatLblTxt_sun4"><label id="scheduler_endTimeLabel"
  for="scheduler:scheduler_endTime" class="LblLev2Txt_sun4">End
 Time: </label> </span></td>
             <td>&nbsp;</td>
             <td>
             <table cellpadding="0" cellspacing="0">
               <tbody>
                 <tr>
                   <td>
                   <select class="MnuStd_sun4"
  id="scheduler_endTime_hour" name="scheduler_endTime_hour"
  size="1" title="Hour for End Time">
                   <option class="MnuStdOptSel_sun4" value="-1"
  selected="selected"> </option>
                   </select>
                   </td>
                   <td>:</td>
                   <td>
                   <select class="MnuStd_sun4"
  id="scheduler_endTime_minutes" name="scheduler_endTime_minutes"
  size="1" title="Minutes for End Time">
                   <option class="MnuStdOptSel_sun4" value="-1"
  selected="selected"> </option>
                   </select>
                   <span class="DatZonTxt_sun4">GMT-05:00</span>
                   </td>
                 </tr>
               </tbody>
             </table>
             </td>
           </tr>
           <tr>
             <td colspan="4">&nbsp; </td>
           </tr>
           <tr>
             <td>&nbsp;</td>
             <td nowrap="nowrap"> <span
  class="DatLblTxt_sun4"><label
  id="scheduler_repeatIntervalLabel"
  for="scheduler_repeatInterval" class="LblLev2Txt_sun4">Repeat
 Interval: </label> </span></td>
             <td>&nbsp;</td>
             <td>
             <select class="MnuJmp_sun4"
  id="scheduler_repeatInterval" name="scheduler_repeatInterval"
  size="1"
  title="Sets Frequency of Repeat (may also adjust Repeat Limit settings)">
             <option class="MnuJmpOpt_sun4" value="ONETIME">One
 Time</option>
             </select>
             </td>
           </tr>
           <tr>
             <td colspan="4">&nbsp;</td>
           </tr>
           <tr>
             <td colspan="4"> </td>
           </tr>
           <tr>
             <td>&nbsp;</td>
             <td nowrap="nowrap"> <span
  class="DatLblTxt_sun4"><label
  id="schedulerForm:scheduler:scheduler_repeatLimitLabel"
  for="schedulerForm:scheduler:scheduler_repeatLimit"
  class="LblLev2Txt_sun4">Repeat Limit: </label></span></td>
             <td>&nbsp;</td>
             <td><input size="3"
  id="schedulerForm:scheduler:scheduler_repeatLimit"
  name="schedulerForm:scheduler:scheduler_repeatLimit" value=""
  type="text">
             <select class="MnuStdDis_sun4"
  id="schedulerForm:scheduler:scheduler_repeatLimitUnit"
  name="schedulerForm:scheduler:scheduler_repeatLimitUnit"
  size="1" title="Unit of time for Repeat Limit">
             <option class="MnuStdOpt_sun4" value="HOURS">Hours</option>
             </select>
             </td>
           </tr>
           <tr>
             <td>&nbsp;</td>
             <td>&nbsp;</td>
             <td>&nbsp;</td>
             <td nowrap="nowrap">
             <div class="inlineFieldHelp_sun4">Blank value repeats
 forever </div>
             </td>
           </tr>
           <tr>
             <td colspan="4"> &nbsp; &nbsp;</td>
           </tr>
           <tr>
             <td colspan="3">&nbsp;</td>
             <td><input
  id="schedulerForm:scheduler:scheduler_previewButton"
  value="Preview in Calendar" type="submit">
             </td>
           </tr>
         </tbody>
       </table>
       </td>
     </tr>
   </tbody>
 </table>
 </div>
     <h3>Configuring the <code>webuijsf:scheduler</code> Tag</h3>
 <p>Use the <code>value</code> attribute to associate the component with
 a model object that represents the current value. The model object
     must be of type <code>com.sun.webui.jsf.model.ScheduledEvent</code>. 
     <p>Schedule data entered by the user is automatically converted to and 
     from the <code>ScheduledEvent</code>. </p> 
 <p>You can use <code>webuijsf:scheduler</code> tag attributes to configure the 
 appearance of the Scheduler. By
     default, input elements for Start Date, Start Time, End Time, 
     Repeat Interval, and Repeat Limit are shown. You can specify your own labels for  
     the input elements. You can also suppress the display of most of the elements.
     All but the Start Date are optional. To suppress the End Time element, set  
     <code>endTime</code to false; to suppress the Repeat Interval and Repeat Limit
     controls, set <code>repeating</code> to false;
     to suppress just the Repeat Limit controls, set
     <code>limitRepeating</code> to false. </p> 
     <p>You can also prevent display of the Preview in Calendar button by setting
     <code>previewButton</code> to false.</p>
     <p>To configure a range of dates that can be selected, specify the
     <code>minDate</code> and <code>maxDate</code> attributes.  </p>
     <p>The range of years available in the Calendar display is
     derived from the the <code>minDate</code> and <code>maxDate</code>
     attributes.  </p> 
     <h3>Facets</h3>
     None.
     <h3>Client-side JavaScript Functions</h3>
     <p>None.</p> 
 </p>
     <h3>Examples</h3>
 <h4>Example 1: Basic Scheduler</h4> 
 <p>This example uses all the input elements, but changes the labels for the dates
 and times.</p>
 <pre> 
     &lt;webuijsf:scheduler id="scheduler" 
                   dateLabel="Date: " 
                   startTimeLabel="Start: "
                   endTimeLabel="End: " 
                   value="#{SchedulerBean.event}"/&gt;
 </pre> 
 <h4>Example 2: Scheduler without End Time or Repeating Events</h4> 
 <p>This example disables the End Time, Repeat Interval,
 and Repeat Limit controls.</p>
 <pre> 
     &lt;webuijsf:scheduler id="scheduler" 
                   dateLabel="Date: " 
                   startTimeLabel="Start: "
                   repeating="false"
                   endTime="false"
                   value="#{SchedulerBean.event}"/&gt;
 </pre> 
 <h4>SchedulerBean Used in Examples</h4>
 <p>
 <code>import com.sun.webui.jsf.model.ScheduledEvent;
 <br>
 <br>
 public class SchedulerBean {
 <br>
 <br>
 &nbsp;&nbsp; // Creates a new instance of SchedulerBean <br>
 <br>
 &nbsp;&nbsp;&nbsp; public SchedulerBean() {
 <br>
 &nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp; //
 <br>
 &nbsp; // Holds value of property event.
 <br>
 &nbsp; //
 <br>
 &nbsp;&nbsp;&nbsp; private ScheduledEvent event = null;
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; //
 <br>
 &nbsp;&nbsp;&nbsp; // Getter for property event.
 <br>
 &nbsp;&nbsp;&nbsp; // @return Value of property event.
 <br>
 &nbsp;&nbsp;&nbsp; //
 <br>
 &nbsp;&nbsp;&nbsp; public ScheduledEvent getEvent() {
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 return this.event;
 <br>
 &nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; //
 <br>
 &nbsp;&nbsp;&nbsp; // Setter for property event.
 <br>
 &nbsp;&nbsp;&nbsp; // @param event New value of property
 event.
 <br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;<br>
 &nbsp;&nbsp;&nbsp; public void setEvent(ScheduledEvent
 event) {
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 this.event = event;
 <br>
 &nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; ...
 <br>
 <br>
 }
 </code>
 </p>
]]></description>
    </tag>

    <tag>
        <name>script</name>

        <description><![CDATA[ <span style="text-decoration: line-through;"></span><span
  style="color: rgb(0, 0, 0);">Use the </span><code
  style="color: rgb(0, 0, 0);">ui:script</code><span
  style="color: rgb(0, 0, 0);"> tag to create a </span><code
  style="color: rgb(0, 0, 0);">&lt;script&gt;</code><span
  style="color: rgb(0, 0, 0);"> element in the rendered
 HTML page.
 The </span><code
  style="color: rgb(0, 0, 0);">ui:script</code><span
  style="color: rgb(0, 0, 0);"> tag must be used within
 the </span><code
  style="color: rgb(0, 0, 0);">ui:head</code><span
  style="color: rgb(0, 0, 0);"> tag, or within the </span><code
  style="color: rgb(0, 0, 0);">ui:body</code><span
  style="color: rgb(0, 0, 0);"> tag.&nbsp; The </span><code
  style="color: rgb(0, 0, 0);">ui:script</code><span
  style="color: rgb(0, 0, 0);"> tag can be used to
 refer to a
 Javascript file, by using the url attribute. The tag can also be used
 embed Javascript code within the rendered HTML page. </span><p style="color: rgb(0, 0, 0);">The
 client-side script allows
 you to perform some interactive functions such as input checking before
 the page is submitted. <br></p><h3 style="color: rgb(0, 0, 0);">HTML
 Elements and Layout</h3><span
  style="text-decoration: line-through; color: rgb(0, 0, 0);"></span><span
  style="color: rgb(0, 0, 0);">The rendered HTML page
 contains a <code>&lt;script&gt;</code>
 element with any attributes
 specified through the <code>ui:script</code>
 tag attributes.&nbsp; <br><br></span><h3 style="color: rgb(0, 0, 0);">Theme
 Identifiers</h3><span style="color: rgb(0, 0, 0);">None.<br></span><h3 style="color: rgb(0, 0, 0);">Client
 Side Javascript Functions</h3><span style="color: rgb(0, 0, 0);">None.</span><br
  style="color: rgb(0, 0, 0);"><h3 style="color: rgb(0, 0, 0);">Example</h3><b style="color: rgb(0, 0, 0);">Example
 1: Create a script tag to a file</b><br
  style="color: rgb(0, 0, 0);"><br style="color: rgb(0, 0, 0);"><code style="color: rgb(0, 0, 0);">&lt;ui:script url="/pathtomyjs/myjavascript.js" /&gt;</code><i
  style="color: rgb(0, 0, 0);"><br></i><br
  style="color: rgb(0, 0, 0);"><b style="color: rgb(0, 0, 0);">Example
 2: Create a script tag with embedded script (Not Recommended)</b><br
  style="color: rgb(0, 0, 0);"><br style="color: rgb(0, 0, 0);"><code style="color: rgb(0, 0, 0);">&lt;ui:script&gt;<br>&nbsp; function foo(text) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(text);<br>&nbsp; }<br>&lt;/ui:script&gt;</code>
 <p>Auto-generated component class.
 Do <strong>NOT</strong> modify; all changes
 <strong>will</strong> be lost!</p>
]]></description>
    </tag>

    <tag>
        <name>skipHyperlink</name>

        <description><![CDATA[ Use the <code>ui:skipLink</code>
 tag to render a single-pixel transparent image (not visible within the
 browser page) which is hyperlinked to an anchor beyond the section to skip.
 This tag is used to achieve 508-compliance (paragraph o). It is designed to
 be used by components such as masthead, tabs, calendar and other components
 with repetitive links.<br><h3>HTML Elements and Layout</h3><p>The rendered
 HTML page displays an image hyperlink at the top, followed by an anchor at
 the end of the region to skip.</p><h3>Theme Identifiers</h3>
 None.<h3>Client-side JavaScript functions</h3>
 None.<h3>Examples</h3><b>Example 1: An example showing how to skip over the masthead:</b>
 <br><code>&lt;ui:skipHyperlink id="skip1234" description="skip over the masthead" &gt;
 &lt;ui:masthead id=masthead1" productImageURL="../images/webconsole.png"
 productImageDescription="Java Web Console" userInfo="test_user" serverInfo="test_server" /&gt;
 &lt;/ui: skipHyperlink&gt;</code>
 <p>Auto-generated component class.
 Do <strong>NOT</strong> modify; all changes
 <strong>will</strong> be lost!</p>
]]></description>
    </tag>

    <tag>
        <name>staticText</name>

        <description><![CDATA[ <span style="color: rgb(51, 51, 255);"><span
 style="color: rgb(0, 0, 0);">Use the </span><code
 style="color: rgb(0, 0, 0);">ui:staticText</code><span
 style="color: rgb(0, 0, 0);">
 tag to display text that is not interactive in the rendered HTML
 page.&nbsp; The text can be plain static text, or be formatted using
 parameters to insert variable text in the rendered HTML. The JSF core
 tag </span><code style="color: rgb(0, 0, 0);">f:param</code><span
 style="color: rgb(0, 0, 0);"> can be used along with view beans to
 provide
 the variable data.</span><br></span></p><p><code></code>If there are one or more
 params, the component will convert the list of parameter values to an <code>Object</code>
 array, and call <code>MessageFormat.format()</code>, passing the value
 of the param
 of this component as the first argument, the value of the
 array of parameter
 values as the second argument, and render the result. See <code>MessageFormat.format()</code>for
 details.<code></code>Otherwise, render
 the text of
 this component unmodified.</p><span style="color: rgb(255, 153, 0);"></span><h3>HTML Elements and Layout</h3><span style="color: rgb(0, 0, 0);">The rendered HTML page includes
 a </span><code style="color: rgb(0, 0, 0);">&lt;span&gt;</code><span
 style="color: rgb(0, 0, 0);"> element that contains the resulting
 text.&nbsp; In the </span><code style="color: rgb(0, 0, 0);">&lt;span&gt;</code><span
 style="color: rgb(0, 0, 0);"> element, the class and style
 attribute values are set to the values specified with the </span><code
 style="color: rgb(0, 0, 0);">ui:staticText</code><span
 style="color: rgb(0, 0, 0);"> tag's styleclass and style
 attributes.</span><h3>Client Side Javascript Functions</h3>
 None.<br><h3>Examples</h3><h4>Example 1: Render plain old text<br></h4><div style="margin-left: 40px;"><code>&lt;ui:staticText
 id="statictext1" text="#{bean.someText}" /&gt; </code><br><code></code><code>&lt;ui:staticText id="statictext1" text="some text
 to display" /&gt;</code><code></code><br><code></code></div><h4>Example 2: Use Params to format a whole line<br></h4><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText id="blah"
 text="At {1,time} on {1,date}, there was {2} on planet
 {0,number,integer}."&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;f:param
 id="b1" value="#{HyperlinkBean.myInt}"/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;f:param
 id="b2" value="#{HyperlinkBean.date}"/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;f:param
 id="b3" value="2
 fools"/&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ui:staticText&gt;<br><br></code>The above will render:&nbsp; <span id="form1:blah">"At 8:36:18
 AM on Dec 13, 2004, there was 2 fools on planet 7." <br></span>
 <p>Auto-generated component class.
 Do <strong>NOT</strong> modify; all changes
 <strong>will</strong> be lost!</p>
]]></description>
    </tag>

    <tag>
        <name>tab</name>

        <description><![CDATA[
<p>
Use the <code>webuijsf:tab</code> within the <code><a href="tabSet.html">webuijsf:tabSet</a></code> 
tag to create a tab within a set of tabs in the rendered HTML page. The <code>webuijsf:tab</code> tag 
extends the <code><a href="hyperlink.html">webuijsf:hyperlink</a></code> tag. 
The <code>webuijsf:tab</code> tag differs from <code>webuijsf:hyperlink</code> tag in the 
value rendered by default for the class attribute of the rendered HTML anchor. </p>

<h3>HTML Elements and Layout</h3>
<p>
The tab component renders an XHTML <code>&lt;a href&gt;</code> tag. 
</p>
<h3>Configuring the webuijsf:tab Tag</h3>
<p>The <code>webuijsf:tab</code> tag can be configured with many of the same attributes as 
the <code>webuijsf:hyperlink</code> tag. The tab can be configured to display its 
associated JSP page using the url or action attributes. The tab can be configured
to perform an action such as updating data displayed in the page using the 
actionListener attribute.
</p>
<p>If you add child Tab components to a Tab component, making a multiple level
set of tabs, you can use the <code>selectedChildId</code> to specify the 
initially selected child tab. 

<h3>Facets</h3>
None.
<h3>Client Side Javascript Functions</h3>
None.
<br>
<h3>Examples</h3>
<p>See <a href="tabSet.html">the webuijsf:tabSet</a> documentation for an example of 
defining tabs by using a TabSet component binding.</p>
<h4>Example 1: Defining three tabs in a tab set</h4>
<p>
<code>&lt;webuijsf:tabSet id="MyTabs" selected="tab1" &gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:tab id="tab1" 
text="Tab 1" action="#{TabSetBean.tab1Clicked}" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:tab id="tab2"
text="Tab 2" action="#{TabSetBean.tab2Clicked}" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:tab id="tab3"
text="Tab 3" action="#{TabSetBean.tab3Clicked}" /&gt;<br>
&lt;/webuijsf:tabSet &gt;<br>
</code>
</p>
]]></description>
    </tag>

    <tag>
        <name>tabSet</name>

        <description><![CDATA[
<p>Use the <code>webuijsf:tabSet</code> tag to create a set of tabs in the
rendered HTML page. The tabs are used for navigation in the web application, 
and do not contain page content. The individual tabs in 
the set can be specified with 
<a href="tab.html"><code>webuijsf:tab</code></a> tags used as children of 
the <code>webuijsf:tabSet</code> tag. The tab set and tabs can alternatively be specified
in a backing bean.</p>

<p>You can make multiple levels of tabs by nesting tab components within other
tab components, inside a single tab set component.</p>

<p>The TabSet component keeps track of the currently selected child tab, 
and applies any specified ActionListener to each child tab.</p>

<h3>HTML Elements and Layout</h3>
<p>The tabSet component renders <code>&lt;div&gt;</code> and <code>&lt;table&gt;</code> 
elements, which will contain the hyperlinks produced by the Tab component. </p>

<h3>Configuring the webuijsf:tabSet Tag</h3>

<p>The <code>webuijsf:tabSet</code> tag can be used in either of the following ways: 
<ul>
<li>set the component binding to a TabSet component and group of child Tab components 
that are defined in a backing bean. This approach is especially useful for using 
a single set of tabs among multiple pages. </li><br>
<li>specify the TabSet and child Tabs directly in your JSP.</li></ul></p>
<p>Examples of both approaches are shown in the <a href="#Example">Examples</a> 
section below. 
<p>In either approach, the <code>webuijsf:tabSet</code> tag attributes can be specified
in the JSP page. The initial selection for the TabSet component is specified 
with the <code>selected</code> attribute. You can use the <code>mini</code> and
<code>lite</code> attributes to create tabs that are smaller and lighter in 
appearance. The <code>mini</code> attribute can be used 
to make smaller tabs. The <code>lite</code> attribute can be used with the 
<code>mini</code> attribute to create small tabs that have less shading and 
bolding. Note that mini tab sets will not display properly if more than one level of 
tabs are specified.</p> 
<p>If you specify an <code>actionListener</code> attribute for the TabSet 
component, the specified listener is applied to the action listener list of 
each of the child Tab components.</p>
<p>The <code>lastSelectedChildSaved</code> attribute can be used to enable the tab set 
to maintain the selected state of its child tabs. This enables the selection to 
be "remembered" when the user goes to another tab level. When the user 
returns to first set of tabs, the originally selected tab is still selected. </p>

<h3>Content of Tabs</h3>
<p>The Tab component itself does not have any content, but is used to display
another page or update something in the current page when the tab is clicked. 
Use the url or action attributes to specify another
JSP page that corresponds to the clicked tab. Use the actionListener to update 
data in the page when a given tab is clicked. 
<p>
For example, you might define a single TabSet instance in a backing bean 
that is shared among many pages. The tabs in those pages would each specify an
appropriate url that contains the content for the corresponding tab.  See 
Example 1.</p>
<p>
Alternatively, you might have a single page containing a TabSet and a Table of data 
corresponding to the currently selected Tab. When the TabSet selection changes, 
the actionListener on the clicked Tab is invoked and the Table is updated to display the 
appropriate data for the tab that is clicked. See Example 2.

<h3>Facets</h3>

<p>None.</p>

<h3>Client Side Javascript Functions</h3>

<p>None.</p>

<h3><a name="Example">Examples</a></h3>

<a href="#ExampleTabSetBinding">Example 1: Define the TabSet in a Backing Bean and Use TabSet in a Single JSP Page</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="#TabsBeanBackingBean">TabsBean Backing Bean for Example 1</a><br>
<a href="#ExampleMultiple">Example 2: Define TabSet in Backing Bean and Use in Multiple JSP Pages</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;<a href="#Ex2TabSetBackingBean">TabSetBackingBean for Example 2</a><br>
<a href="#ExampleTabSetinJSP">Example 3: Define the TabSet in your JSP Page</a><br>

<a name="ExampleTabSetBinding"></a>
<h4>Example 1: Define the TabSet in a Backing Bean and Use TabSet in a Single JSP Page</h4>
<p>
This example shows how to create a JSF component binding to a TabSet instance 
that is defined in a backing bean. The <code>webuijsf:tabSet</code> tag is used in only 
one JSP page. 
When the tabs in this page are clicked, their associated action events are launched. 
In this example, the action is simply to display the id of the tab clicked and 
the tab selected. The action event approach might be used to update table data when the 
tab is clicked, for example. </p>
<p><span style="font-weight: bold;">The tabs.jsp
file</span></p>

<code>
&lt;f:view&gt;
<br>
&nbsp; &lt;webuijsf:page&gt;
<br>
&nbsp;&nbsp;&nbsp; &lt;webuijsf:html&gt;
<br>
&nbsp;&nbsp;&nbsp; &lt;webuijsf:head title="Tabs Example
Page" /&gt;
<br>
&nbsp;&nbsp;&nbsp; &lt;webuijsf:body&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:form
id="tabsexample"&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:masthead id="Masthead"
productImageURL="../images/webconsole.png"
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
productImageDescription="Java Web Console" userInfo="test_user"
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
serverInfo="test_server" /&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:breadcrumbs id="breadcrumbs"&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink url="../index.jsp" text="Tests Index"/&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink url="../tabs/index.jsp" text="Tab Tests"/&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink url="../tabs/tabs.jsp" text="Test 1"/&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/webuijsf:breadcrumbs&gt;
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:tabSet binding="#{TabsBean.sportsTabs}" /&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;p align="center"&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;strong&gt;&lt;webuijsf:staticText escape="false" text="#{TabsBean.message}"
/&gt;&lt;/strong&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/p&gt;
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/webuijsf:form&gt;
<br>
&nbsp;&nbsp;&nbsp; &lt;/webuijsf:body&gt;
<br>
&nbsp;&nbsp;&nbsp; &lt;/webuijsf:html&gt;
<br>
&nbsp; &lt;/webuijsf:page&gt;
<br>
&lt;/f:view&gt;
</code>



<a name="TabsBeanBackingBean"></a><h4>TabsBean Backing Bean</h4>
<p>The backing bean code for this example is shown below. </p>

<p><code>import java.util.List;<br>
import java.lang.Class;<br>
import javax.faces.FactoryFinder;<br>
import javax.faces.el.MethodBinding;<br>
import javax.faces.event.ActionEvent;<br>
import javax.faces.application.Application;<br>
import javax.faces.application.ApplicationFactory;<br>
import com.sun.webui.jsf.component.Tab;<br>
import com.sun.webui.jsf.component.TabSet;<br>
<br>
public class TabsBean {<br>
&nbsp;&nbsp;&nbsp; private TabSet sportsTabs = null;<br>
<br>
&nbsp;&nbsp;&nbsp; // Creates a new instance of TabsBean <br>
&nbsp;&nbsp;&nbsp; public TabsBean() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sportsTabs = new TabSet();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
List kids = sportsTabs.getChildren();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Tab level1Tab = new Tab("Baseball");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
level1Tab.setId("Baseball");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Tab level2Tab = addTab(level1Tab, "National");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Mets");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Pirates");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Cubs");<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
level2Tab = addTab(level1Tab, "American");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Yankees");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Tigers");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Mariners");<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
level2Tab = addTab(level1Tab, "AAA");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Spinners");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Renegades");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Clippers");<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
kids.add(level1Tab);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
level1Tab = new Tab("Football");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
level1Tab.setId("Football");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
level2Tab = addTab(level1Tab, "NFC");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Giants");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Bears");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Falcons");<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
level2Tab = addTab(level1Tab, "AFC");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Jets");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Patriots");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Colts");<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
level2Tab = addTab(level1Tab, "College");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Wolverines");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Hurricanes");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Buckeyes");<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
kids.add(level1Tab);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
level1Tab = new Tab("Hockey");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
level1Tab.setId("Hockey");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
level2Tab = addTab(level1Tab, "East");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Islanders");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Rangers");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Bruins");<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
level2Tab = addTab(level1Tab, "West");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Oilers");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Blackhawks");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Blues");<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
level2Tab = addTab(level1Tab, "Minors");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Phantoms");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Monsters");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
addTab(level2Tab, "Freeze");<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
kids.add(level1Tab);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Class[] args = new Class[] { ActionEvent.class };<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
MethodBinding binding = createBinding("#{TabsBean.tabClicked}", args);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sportsTabs.setActionListener(binding);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sportsTabs.setSelected("Jets");<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; private MethodBinding
createBinding(String expr, Class[] args) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ApplicationFactory factory = (ApplicationFactory)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
FactoryFinder.getFactory(FactoryFinder.APPLICATION_FACTORY);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Application app = factory.getApplication();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return app.createMethodBinding(expr, args);<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; private Tab addTab(Tab parent, String
newTabLabel) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Tab tab = new Tab(newTabLabel);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tab.setId(newTabLabel);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
parent.getChildren().add(tab);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return tab;<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;<br>
&nbsp;&nbsp;&nbsp; public TabSet getSportsTabs() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return sportsTabs;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; public void setSportsTabs(TabSet tabs) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sportsTabs = tabs;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; public void tabClicked(ActionEvent
event) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
message = "Action listener invoked! &lt;br/&gt; &lt;br/&gt; Tab clicked has id of "; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
message += event.getComponent().getId(); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
message += ". Selected tab id is " + sportsTabs.getSelected();<br>
&nbsp;&nbsp;&nbsp; } <br>
<br>
&nbsp;&nbsp;&nbsp; public String getMessage() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return message;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; public void setMessage(String m) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
message = m;<br>
&nbsp;&nbsp;&nbsp; }&nbsp;</code></p>

<a name="ExampleMultiple"></a><h4>Example 2: Define TabSet in Backing Bean and 
Use in Multiple JSP Pages</h4>
<p>
In this example, each tab has its own JSP page. The example
below shows a JSP page for "Tab 1". The <code>selected</code>
attribute of the <code>webuijsf:tabSet</code> is set to the id
of Tab 1, and the content to be displayed when Tab 1 is clicked is
provided after the <code>webuijsf:tabSet</code> tag. 
The JSP pages for the other tabs in the set would be
very similar, with the references to the specific tab updated
appropriately, e.g. "Tab 2" and "tab2" and so on. <br>
<br>
<span style="font-weight: bold;">The tab1.jsp file</span><br>
<p>
<code>&lt;f:view&gt;
<br>
&nbsp; &lt;webuijsf:page&gt;
<br>
&nbsp;&nbsp;&nbsp; &lt;webuijsf:html&gt;
<br>
&nbsp;&nbsp;&nbsp; &lt;webuijsf:head title="Tab 1 Page"
/&gt;
<br>
&nbsp;&nbsp;&nbsp; &lt;webuijsf:body&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:form
id="tabsexample"&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:masthead id="Masthead"
productImageURL="../images/webconsole.png"
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
productImageDescription="Java Web Console" userInfo="test_user"
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
serverInfo="test_server" /&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:breadcrumbs
id="breadcrumbs"&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink url="../index.jsp" text="Tests Index"/&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink url="../tabs/index.jsp" text="Tab Tests"/&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:hyperlink url="../tabs/tabs.jsp" text="Test 5"/&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/webuijsf:breadcrumbs&gt;
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;webuijsf:tabSet binding="#{TabsBean.myTabSet}" selected="tab1"
/&gt;
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;p align="center"&gt;&lt;strong&gt;Tab
1&lt;/strong&gt;&lt;/p&gt;
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
... other stuff for this tab...
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/webuijsf:form&gt;
<br>
&nbsp;&nbsp;&nbsp; &lt;/webuijsf:body&gt;
<br>
&nbsp;&nbsp;&nbsp; &lt;/webuijsf:html&gt;
<br>
&nbsp; &lt;/webuijsf:page&gt;
<br>
&lt;/f:view&gt;</code>
</p>


<a name="Ex2TabSetBackingBean"></a><h4>TabSetBackingBean for Example 2</h4>
The backing bean that defines this TabSet creates the tabs
named Tab 1 through Tab 4, and sets their url properties to tab1.jsp
through tab4.jsp.<br>
<br>
<code>public class TabSetBackingBean {
<br>
&nbsp;&nbsp;&nbsp; ...
<br>
<br>
&nbsp;&nbsp;&nbsp; public TabSet getMyTabSet() {
<br>
&nbsp;&nbsp;&nbsp;&nbsp;TabSet = new TabSet();
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tabSet.setId("myTabSet");
<br>
&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 1; i &lt; 5;
i++) {
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Tab tab = new Tab("Tab " + i);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tab.setId("tab" + i);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tab.setUrl("tab" + i + ".jsp");
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tabSet.getChildren().add(tab);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;}
<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;return tabSet;
<br>
&nbsp;&nbsp;&nbsp; }
<br>
</code>
<br>
&nbsp;&nbsp;&nbsp; ...
<br>
}
<a name="ExampleTabSetinJSP"></a>
<h4>Example 3: Define the TabSet in your JSP Page</h4>
<p>This example shows how to define the tab set completely in a JSP file. 
It defines a set of tabs that includes three level-1 tabs (labeled &quot;One&quot;, 
&quot;Two&quot; and &quot;Three&quot;). Each level-1 tab also has two level-2 tab 
children, labelled &quot;XxxA&quot; and &quot;XxxB&quot; where Xxx is the top level 
tab number. The initially selected tab for this tab set will be &quot;TwoA&quot;.</p>

<p><code>&lt;webuijsf:tabSet selected=&quot;TwoA&quot;&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;webuijsf:tab id=&quot;One&quot; text=&quot;One&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:tab id=&quot;OneA&quot; text=&quot;One
A&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:tab id=&quot;OneB&quot; text=&quot;One
B&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/webuijsf:tab&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;webuijsf:tab id=&quot;Two&quot; text=&quot;Two&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:tab id=&quot;TwoA&quot; text=&quot;Two
A&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:tab id=&quot;TwoB&quot; text=&quot;Two
B&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/webuijsf:tab&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;webuijsf:tab id=&quot;Three&quot; text=&quot;Three&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:tab id=&quot;ThreeA&quot;
text=&quot;Three A&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:tab id=&quot;ThreeB&quot;
text=&quot;Three B&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/webuijsf:tab&gt; <br>
&lt;/webuijsf:tabSet&gt;</code></p>
]]></description>
    </tag>

    <tag>
        <name>table</name>

        <description><![CDATA[ <p>Use the <code>webuijsf:table</code>
 tag to create a table that can be configured to perform actions on
 objects in the table, and to manipulate the rows and columns of the
 table. The table component features behaviors that let the user sort,
 filter, and paginate the table objects, and provides actions that can
 be performed on selected objects. The component also allows you to
 implement developer-defined custom actions.
 </p><p>Note that the <code>webuijsf:table</code>
 tag is not intended to be used to create HTML tables that are used
 purely to handle page layout. The
 table component renders a
 table with
 a well-defined structure, including a title, column headings, and
 borders. You can use tags
 such as <code><a href="propertySheet.html">webuijsf:propertySheet</a></code>
 and <code><a href="panelGroup.html">webuijsf:panelGroup</a></code>
 for page
 layout if
 possible.<br>
 </p>
 <p>The table component
 implements Sun's user interface (UI) guidelines for web
 applications. The guidelines describe in detail how the table should
 appear and behave, including the placement of titles, group headers,
 and actions. The table component's default behavior implements the UI
 guidelines. The component is also extensible through JavaServer Faces
 facets to
 allow the component to be used for tables that do not need to adhere
 strictly to the UI guidelines.<br>
 </p>
 <p>The <code>webuijsf:table</code>
 tag must be used with the <a href="tableRowGroup.html"><code>webuijsf:tableRowGroup</code></a>
 and <a href="tableColumn.html"><code>webuijsf:tableColumn</code></a>
 tags. The <code>webuijsf:table</code>
 tag is
 used to define the structure and actions of the table, and is a
 container for <code>webuijsf:tableRowGroup</code>
 tags.&nbsp; The <code>webuijsf:tableRowGroup</code> tag is used to define
 the rows of the table, and is a container for <code>webuijsf:tableColumn</code>
 tags. The <code>webuijsf:tableColumn</code> tag is used to define the
 columns of the table. <br>
 </p>
 <h3>HTML Elements and Layout</h3>
 The table component renders
 an XHTML <code>&lt;table&gt;</code> element.&nbsp; Depending upon the
 attributes specified with the <code>webuijsf:table</code> tag, the table
 component can also render a title in a <code>&lt;caption&gt;</code>
 element, and image hyperlinks for the various buttons for sorting and
 pagination.&nbsp; The table component does not render table rows except
 for
 the rows that contain
 the view-changing and pagination controls. <br>
 <h3>Table Structure<code></code><br>
 </h3>
 <p>Tables are composed of several
 discrete areas. You can use&nbsp;
 <code>webuijsf:table</code> tag attributes to cause the table component to
 create the default layout for each
 area. The default layout strictly adheres to UI guidelines.&nbsp; The
 layout for
 each area can also be customized by using facets.&nbsp; Some areas
 require you to use facets to implement the content you want in those
 areas. Descriptions of
 the table areas are shown below, followed by a <a href="#diagram">diagram</a>
 that shows the placement of the areas.<br>
 </p>
 <ul>
 <li>
 <p>Title - displays a title for the table,
 which you can also use to include information about paginated rows and
 applied
 filters. Use the <code>title</code> attribute to specify the title
 content. Use the <code>itemsText</code> attribute to specify the text
 displayed for the table title for an unpaginated table.&nbsp;<span
 style="font-weight: bold; color: rgb(255, 0, 0);"></span><span
 style="color: rgb(255, 0, 0);"> </span>Use
 the <code>filterText</code>
 attribute to specify text to include in the title about the filter that
 is applied.&nbsp; <span style="color: rgb(102, 102, 204);"></span>You
 can override the default implementation of the
 title bar
 with a different component by using the <code>title</code>
 facet.&nbsp; <br style="color: rgb(255, 153, 0);">
 </p>
 </li>
 <li>
 <p>Action Bar (top) - in the first row of the table, displays
 controls that operate on the
 table and its data. This area contains the following sub areas:</p>
 </li>
 <ul>
 <li>
 <p>Actions - displays local actions that apply to
 the objects in the table. You must provide the components for each
 action, by specifying them in the <code>actionsTop</code>
 facet.&nbsp; You can specify the same actions for the Action Bar
 (bottom) area in the <code>actionsBottom</code> facet.<br>
 </p>
 </li>
 </ul>
 <ul>
 <li>
 <p>View-Changing
 Controls - displays controls for changing the view of the
 table data, such as custom filtering and sorting. This area
 contains the following&nbsp; sub areas: <br>
 </p>
 </li>
 <ul>
 <li>
 <p> Filter - displays a drop down menu of filter options,
 which allow users to select criteria to be used to determine the items
 to display. The component provides a default implementation for adding
 options when the Custom filter becomes active, to display the filter
 panel, etc. However, you must implement your filters
 through custom options. An example
 filter is shown in <span style="color: rgb(255, 153, 0);"><a
 href="table.html#Filter.java">Filter.java.</a></span></p>
 </li>
 <li>Clear Sort - displays a button that is used to remove
 all sorting of the table.&nbsp; Use the <code>clearTableSortButton</code>
 attribute to display the clear table sort button. </li>
 <li>
 <p><span
 style="color: rgb(255, 0, 0); text-decoration: line-through;"></span>Sort
 - displays a
 toggle button for the sort panel. Clicking this button
 opens and closes an embedded panel with custom sort
 options. The panel
 opens inside the table below the Action Bar (top).&nbsp; Use the <code>sortPanelToggleButton
 </code>attribute
 to display the default sort button with a default
 layout of the sort panel.&nbsp; You can
 provide custom content for the sort panel by using the <code>sortPanel</code>
 facet. </p>
 </li>
 <li>
 <p>Preferences
 - displays a toggle button for setting the
 user's preferences. Clicking this
 button opens and closes an embedded
 panel with view preferences. The preferences panel opens inside
 the table below
 the Action Bar (top). You must provide the content of
 the preferences panel by using the <code>preferencesPanel</code>
 facet. There is no
 default implementation of the preferences panel content, and therefore
 no attribute to specify that the button should be displayed. <br>
 </p>
 </li>
 </ul>
 <li>
 <p>Vertical Pagination - The Vertical Pagination area displays a
 paginate button, which allows users to switch between viewing the table
 as multiple pages, or as a single scrolling page.&nbsp; You can specify
 the <code>paginateButton</code>&nbsp; attributes to display the
 default paginate button.&nbsp; Note that the Vertical
 Pagination area is limited to this button. You cannot use extra
 pagination controls in this area, as you can in the bottom Pagination
 area.&nbsp;</p>
 </li>
 </ul>
 <li>
 <p>Action Bar (bottom)</p>
 </li>
 <ul>
 <li>
 <p>Actions - displays local actions that apply to
 the objects in the table. You must provide the implementation for each
 table action, by using the <code>actionsBottom</code> facet . The
 same actions can exist for the Table both the "Action
 Bar
 (top)" and "Action Bar
 (bottom)" sections</p>
 </li>
 <li>
 <p>Pagination Controls
 - displays controls for pagination, including the
 paginate button, which allows users to switch between viewing the table
 as multiple pages, or as a single scrolling page. The Pagination area
 also includes buttons for turning the pages in sequence, jumping to a
 specific page, and jumping to the first or last page. You can specify
 the <code>paginateButton</code> and <code>paginateControls</code>
 attributes to display the default layout&nbsp; of the Pagination area. <code></code></p>
 </li>
 </ul>
 <li>
 <p>Footer -&nbsp; displays a footer across all columns at the
 bottom of the table. You can specify the <code>footerText</code>
 attribute to display footer content with a default layout, or specify a
 component for the footer by using the <code>footer</code> facet.</p>
 </li>
 </ul>
 <a name="diagram"></a>The
 following diagram shows
 the relative location of the table areas and facets that can be used
 for each area. The areas that are specified with the <code>webuijsf:table</code>
 tag&nbsp; attributes are highlighted<span
 style="color: rgb(102, 102, 204);"> </span>in blue.&nbsp; The grayed
 out area
 is controlled with webuijsf:<code>tableRowGroup</code> and <code>webuijsf:tableColumn</code>
 tags, but is shown here for context.<br>
 <br>
 <br>
 <table style="text-align: left; width: 100%;" border="1" cellpadding="2"
 cellspacing="2">
 <tbody>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(210, 224, 235);"
 rowspan="1" colspan="1"><span style="color: rgb(0, 0, 0);">Title
 Bar <code>title</code> <br>
 </span></td>
 </tr>
 <tr style="color: rgb(0, 0, 0);">
 <td
 style="vertical-align: top; background-color: rgb(210, 224, 235);"
 rowspan="1" colspan="1">Action
 Bar (top) &nbsp;
 <table style="text-align: left; width: 100%;" border="1"
 cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;">Actions <code>actionsTop </code></td>
 <td style="vertical-align: top;">View-Changing Controls<br>
 <table style="text-align: left; width: 100%;" border="1"
 cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;">Filter<br>
 <code>filter</code></td>
 <td style="vertical-align: top;">Sort<br>
 <code></code></td>
 <td style="vertical-align: top;">Clear Sort </td>
 <td style="vertical-align: top;">Preferences</td>
 </tr>
 </tbody>
 </table>
 </td>
 <td style="vertical-align: top;">Vertical
 Pagination <code></code></td>
 </tr>
 <tr style="color: rgb(0, 0, 0);">
 <td style="vertical-align: top;" rowspan="1" colspan="3">Embedded
 Panels <code>filterPanel sortPanel preferencesPanel</code></td>
 </tr>
 </tbody>
 </table>
 <code></code> </td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(210, 224, 235);">
 <table style="text-align: left; height: 223px; width: 100%;"
 border="1" cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
 Header <br>
 </td>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
 Header<br>
 </td>
 </tr>
 <tr style="color: rgb(153, 153, 153);">
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232);"
 rowspan="1" colspan="2">Group
 Header Bar&nbsp; </td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);"><span
 style="font-style: italic;">Table
 data</span> <code></code><br>
 <code> <br>
 <br>
 <br>
 </code></td>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);"><span
 style="font-style: italic;">Table
 data </span><code></code><br>
 </td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
 Footer</td>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
 Footer <br>
 </td>
 </tr>
 <tr style="color: rgb(153, 153, 153);">
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232);"
 rowspan="1" colspan="2">Group
 Footer Bar&nbsp; <br>
 </td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Table
 Column Footer </td>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Table
 Column Footer </td>
 </tr>
 <tr>
 <td style="vertical-align: top;" rowspan="1" colspan="2">Action
 Bar (bottom)<br>
 <table style="text-align: left; width: 100%;" border="1"
 cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;">Actions <code>actionsBottom</code><br>
 </td>
 <td style="vertical-align: top;">Pagination Controls<br>
 </td>
 </tr>
 </tbody>
 </table>
 </td>
 </tr>
 </tbody>
 </table>
 <big><span style="color: rgb(0, 0, 0);"> </span></big></td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(210, 224, 235);"
 rowspan="1" colspan="1"><span style="color: rgb(0, 0, 0);">Footer<code></code></span><code>
 </code></td>
 </tr>
 </tbody>
 </table>
 <ul>
 </ul>
 <h3 style="color: rgb(0, 0, 0);">Buttons and Controls</h3>
 <span style="color: rgb(0, 0, 0);">The following attributes can
 be specified to add buttons and controls to the table:</span><br
 style="color: rgb(0, 0, 0);">
 <ul style="color: rgb(0, 0, 0);">
 <li>
 <p><code>clearSortButton </code>adds a button to the View-Changing
 Controls area that clears any sorting of the
 table.</p>
 </li>
 <li>
 <p><code>deselectMultipleButton&nbsp; </code>adds a button for
 tables in which multiple rows can be
 selected, to allow users to deselect all table rows that are currently
 displayed.</p>
 </li>
 <li>
 <p><code>deselectSingleButton </code>adds a button for tables in
 which only a single table row
 can be selected at a time, to allow users to deselect a column of radio
 buttons </p>
 </li>
 <li>
 <p><code>paginateButton </code>adds a button
 to allow users to switch between
 viewing all data on a single page (unpaginated) or to see data in
 multiple pages (paginated).</p>
 </li>
 <li>
 <p><code>paginationControls </code>adds table
 pagination controls to allow users to change which page is
 displayed.</p>
 </li>
 <li>
 <p><code>selectMultipleButton </code>adds a button that is used
 for selecting multiple rows.&nbsp;<br>
 </p>
 </li>
 <li>
 <p><code>sortPanelToggleButton</code>&nbsp; adds a button that is
 used to open and close the sort panel. </p>
 </li>
 </ul>
 <span style="color: rgb(0, 0, 0);">
 </span>
 <h3 style="color: rgb(0, 0, 0);">Cell Spacing and Shading</h3>
 <p style="color: rgb(0, 0, 0);">The following attribute can be
 specified to change the spacing and shading weight of the table:</p>
 <ul style="color: rgb(0, 0, 0);">
 <li>
 <p><code>cellPadding&nbsp;</code> specifies the amount of
 whitespace that
 should be placed between the cell contents and the cell borders in all
 the cells of the table. </p>
 </li>
 <li>
 <p><code>cellSpacing&nbsp;</code> specifies the amount of
 whitespace
 that should be placed between cells, and between the edges of the table
 content area and the sides of the table. </p>
 </li>
 <li>
 <p><code>lite&nbsp;</code> renders the table in a style
 that makes the table look lighter weight.</p>
 </li>
 </ul>
 <span style="color: rgb(0, 0, 0);">
 </span>
 <h3 style="color: rgb(0, 0, 0);">Headers</h3>
 <p style="color: rgb(0, 0, 0);">The table component allows
 for multiple headers. The following types of headers are supported:<br>
 </p>
 <ul style="color: rgb(0, 0, 0);">
 <li>Column header - confined to the column for which
 it is defined, and displayed by default at the top of the
 table,
 below the Action Bar and above all row groups.&nbsp; Column headers are
 controlled with
 attributes in the <code>webuijsf:tableColumn</code> tag. User interface
 guidelines recommend
 that column headers are rendered once for each table. In tables with
 multiple groups, the column headers should be defined in the <code>webuijsf:tableColumn</code>
 tags that are contained in the first <code>webuijsf:tableRowGroup</code>
 tag.
 See the <a href="tableColumn.html"><code>webuijsf:tableColumn</code>
 documentation</a> for more
 information. <br>
 </li>
 </ul>
 <ul style="color: rgb(0, 0, 0);">
 <li>Group header - spans across all table columns,
 and is displayed above each row group. The first group header is
 displayed below the column headers, above the table data.&nbsp; Group
 headers for any other groups specified in the table are displayed above
 the data rows for the group. Group headers are set in the <code>webuijsf:tableRowGroup</code>
 tag.&nbsp; See the <a href="tableRowGroup.html"><code>webuijsf:tableRowGroup</code>
 documentation</a> for more
 information.</li>
 </ul>
 <h3 style="color: rgb(0, 0, 0);">Footers</h3>
 <p style="color: rgb(0, 0, 0);">The table component allows
 for multiple footers. The following types of footers are supported:<br>
 </p>
 <ul>
 <li style="color: rgb(0, 0, 0);">
 <p>Footer - spans the full
 width of the table, and displayed at the bottom of the table. Only one
 table footer is displayed in each table. The table footer&nbsp; is
 defined in the <code>webuijsf:table</code> tag.<br>
 </p>
 </li>
 <li style="color: rgb(0, 0, 0);">
 <p>Column footer - confined to the
 column for which it is defined, and displayed by default at the bottom
 of the column. In tables with multiple groups of rows, each group can
 display its own column footer. The column footer is defined in <code>webuijsf:tableColumn</code>
 tags. See the <a href="tableColumn.html"><code>webuijsf:tableColumn</code>
 documentation</a> for more
 information.</p>
 </li>
 <li>
 <p><span style="color: rgb(0, 0, 0);">Table column footer -
 confined to the column for which
 it is defined, and displayed by default near the bottom of the table,
 below all row groups, and above the Action Bar (bottom). User interface
 guidelines recommend
 that table column footers are rendered once for each table. In tables
 with multiple groups, the table column footers should be defined in the
 <code>webuijsf:tableColumn</code> tags that are contained in the first <code>webuijsf:tableRowGroup</code>
 tag. See the </span><a href="tableColumn.html"
 style="color: rgb(0, 0, 0);"><code>webuijsf:tableColumn</code>
 documentation</a><span style="color: rgb(102, 102, 204);"><span
 style="color: rgb(0, 0, 0);"> for more
 information. </span><br>
 </span> </p>
 </li>
 </ul>
 <h3>Facets</h3>
 The <code>webuijsf:table</code> tag supports the following facets, which
 allow you to customize the
 layout&nbsp; of the component.<br>
 <br>
 <span style="color: rgb(255, 153, 0);"></span><br>
 <table style="width: 100%;" border="1" cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;"><span style="font-weight: bold;">Facet
 Name</span><code><br>
 </code></td>
 <td style="vertical-align: top; font-weight: bold;">Table Item
 Implemented by the Facet<br>
 </td>
 </tr>
 <tr>
 <td><code>actionsBottom</code></td>
 <td>Actions area of
 the Action Bar (bottom).<br>
 </td>
 </tr>
 <tr>
 <td><code>actionsTop</code></td>
 <td>Actions area of
 the Action Bar (top).<br>
 </td>
 </tr>
 <tr>
 <td><code>filter</code></td>
 <td>Drop down menu for
 selecting a filter, in the Filter area of the Action Bar
 (top).<br>
 </td>
 </tr>
 <tr>
 <td><code>filterPanel</code></td>
 <td>Embedded panel for
 specifying custom filter options, which is displayed when user selects
 the Custom Filter option from the filter drop down menu. The
 Custom Filter option is a recommended option that you can provide in
 the drop down component that you specify in the filter
 facet.&nbsp; The Custom Filter can be used to give users greater
 control over filtering. The <a href="table.html#TableFilter">Filter
 example</a>
 explains filters in more detail.<span style="color: rgb(255, 153, 0);"><br>
 </span></td>
 </tr>
 <tr>
 <td><code>footer</code></td>
 <td>Footer that spans
 the
 width of the table. <br>
 </td>
 </tr>
 <tr>
 <td><code>preferencesPanel</code></td>
 <td>Panel displayed when
 the preferences
 toggle button is
 clicked, to allow users to specify
 preferences for viewing the table.<br>
 </td>
 </tr>
 <tr>
 <td><code>sortPanel</code></td>
 <td>Panel displayed when
 the sort toggle
 button is clicked, to
 allow users to specify sort
 options.<br>
 </td>
 </tr>
 <tr>
 <td><code>title</code></td>
 <td>Title in the top bar
 of
 the table.<br>
 </td>
 </tr>
 </tbody>
 </table>
 <br>
 <h3><a name="JavaScript"></a>Client-side
 JavaScript
 Functions</h3>
 <p>The following JavaScript
 functions are available in any page that uses the <code>webuijsf:table</code>
 tag. After the table is rendered, the functions you specify in the JSP
 page can be invoked directly on the rendered HTML elements. For
 example:
 </p>
 <code>var table =
 document.getElementById("form1:table1");<br>
 var count = table.getAllSelectedRowsCount();<br>
 <br>
 </code>
 Note:
 To use the JavaScript functions, <code>formElements.js</code> file
 must be included in the page. The file is automatically included
 by
 the basic components such as the button and dropDown components.<br>
 <br>
 <span style="color: rgb(255, 153, 0);"><br>
 </span>
 <table style="text-align: left; width: 100%;" border="1" cellpadding="2"
 cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;"><span style="font-weight: bold;">Function
 Name</span><br>
 </td>
 <td style="vertical-align: top; font-weight: bold;">Purpose<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>confirmSelectedRows(message)<br>
 </code></td>
 <td style="vertical-align: top;">Confirm the number of
 selected rows affected by an action such as edit, archive, etc. </td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>confirmDeleteSelectedRows()</code></td>
 <td style="vertical-align: top;">Confirm the number of
 selected rows affected by a delete action.</td>
 </tr>
 <tr>
 <td><code><span style="">filterMenuChanged()</span></code></td>
 <td>Toggle the filter panel when the user selects Custom
 Filter in the Filter menu.<span style="color: rgb(102, 102, 204);"> </span>
 </td>
 </tr>
 <tr>
 <td><code>getAllSelectedRowsCount()</code></td>
 <td> Get the number of
 selected rows in the table, including the rows that are rendered
 in the
 current page, and rows that are hidden from view on other pages.<br>
 </td>
 </tr>
 <tr>
 <td><code>getAllHiddenSelectedRowsCount()</code></td>
 <td>Get the number of
 selected rows in the table that are on pages that are not currently
 displayed. <br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>getAllRenderedSelectedRowsCount()</code></td>
 <td style="vertical-align: top;">Get the number of
 selected rows
 that are currently rendered in the table. This function does not count
 the rows that are hidden from view on other pages. Note that rows might
 be rendered but not visible, and invisible rows are counted.&nbsp; See
 the description of the <code>visible </code>and <code>rendered </code>attributes.
 <br>
 </td>
 </tr>
 <tr>
 <td><code>initAllRows()</code></td>
 <td>Initialize all rows displayed
 in the table when the state
 of selected components change,
 such as when checkboxes or radiobuttons are used to select or deselect
 all rows. <br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>toggleFilterPanel()</code></td>
 <td style="vertical-align: top;">Open and close the custom filter
 panel.</td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>togglePreferencesPanel()</code></td>
 <td style="vertical-align: top;">Open and close the table
 preferences panel.</td>
 </tr>
 </tbody>
 </table>
 <ul>
 </ul>
 <ul>
 </ul>
 <br>
 <h3>Notes about <code>webuijsf:table</code> tag</h3>
 <h4><span style="font-weight: bold;">Life Cycle</span></h4>
 See the <a href="tableRowGroup.html#Lifecycle">Lifecycle
 description </a>in
 the documentation for the <code>webuijsf:tableRowGroup</code> component.<br>
 <h4><span style="font-weight: bold;"><a name="LayoutTables"></a>Layout
 Tables</span></h4>
 <span style="color: rgb(0, 0, 0);">You should not use the </span><code
 style="color: rgb(0, 0, 0);">webuijsf:table</code><span
 style="color: rgb(0, 0, 0);"> tag for page layout. The table
 component renders elements for a table title, columns headers, and row
 headers. These elements should not be used in a layout table, and
 create an
 accessibility issue.&nbsp; Use a standard HTML </span><code
 style="color: rgb(0, 0, 0);">&lt;table&gt;</code><span
 style="color: rgb(0, 0, 0);"> element, a </span><code
 style="color: rgb(0, 0, 0);">webuijsf:propertySheet</code><span
 style="color: rgb(0, 0, 0);"> tag, or the JavaServer Faces </span><code
 style="color: rgb(0, 0, 0);">h:dataTable</code><span
 style="color: rgb(0, 0, 0);"> tag to perform page layout. If
 your application needs to iterate over the same components as in
 jato:tiledView, use a custom tag.&nbsp; The JSP Standard Tag Library
 (JSTL) <code>forEach</code> tag might also be useful, but there are
 interoperability issues with JSTL and JavaServer Faces, so use with
 caution. </span><br>
 <h4><span style="font-weight: bold;">Nested Tables</span></h4>
 <span style="text-decoration: line-through;"></span>
 <span style="color: rgb(0, 0, 0);">Although it is technically
 possible to nest tables with the <code>webuijsf:tabl</code>e tag, you should
 not use the table component to layout multiple tables for the following
 reasons:<br>
 </span>
 <ul style="color: rgb(0, 0, 0);">
 <li>
 <p>Nested tables create
 accessibility issues, as described in <a href="#LayoutTables">Layout
 Tables.</a></p>
 </li>
 <li>
 <p>UI guidelines do not
 support nested tables.</p>
 </li>
 <li>
 <p>Styles used by the
 table component might not display properly because they are not
 intended to be nested.</p>
 </li>
 <li>
 <p>Table sorting is not
 supported in nested tables.&nbsp; The table component does not
 support complex components that maintain state not defined by the
 JavaServer Faces <code>EditableValueHolder</code> interface. Since a
 single
 component instance is
 used when iterating over DataProvider rows, only the state of an <code>EditableValueHolder</code>
 can be maintained. <br>
 </p>
 </li>
 </ul>
 <br style="color: rgb(0, 0, 0);">
 <span style="color: rgb(0, 0, 0);">If you need to display similar
 types of data using the same table
 layout, you should use a group table. Sorting is supported for group
 tables because they are
 configured using separate tableRowGroup instances.</span><br
 style="color: rgb(0, 0, 0);">
 <span style="font-weight: bold; color: rgb(0, 0, 0);"><br>
 Validation</span><br style="color: rgb(0, 0, 0);">
 <p style="color: rgb(0, 0, 0);">To maintain state, the table
 component submits the surrounding form.
 For example, when the table is sorted, the form is submitted to update
 checkbox values. Likewise, the form might be submitted to update text
 field values when the table component must display a new page of a
 paginated table.&nbsp; These components cannot be updated if validation
 fails for any reason. If a component requires a value to be entered,
 and no value is entered, validation fails.&nbsp; <br>
 </p>
 <p style="color: rgb(0, 0, 0);">Consider the case where a
 required text field and
 table
 appear on the same page. If the user clicks on a table sort button
 while the required text field has no value, the sort action is never
 invoked because a value was required and validation failed. <br>
 </p>
 <p style="color: rgb(0, 0, 0);">To prevent this validation issue,
 you can do either of the following:<br>
 </p>
 <ul style="color: rgb(0, 0, 0);">
 <li>Place the table and the required component in separate forms, to
 allow the table data to be submitted separately from the required
 field. The table can then be sorted without triggering a validation
 failure on a required text field that has no value because the text
 field's form is not submitted.&nbsp; However, the values of one form
 are lost when the other form is submitted, which is expected HTML
 behavior. In this example, if a user places a value in a required text
 field and then sorts the table, the value in the text field is
 lost.&nbsp; <br>
 </li>
 </ul>
 <ul style="color: rgb(0, 0, 0);">
 <li>Place the table in a virtual
 form by setting the <code>internalVirtualForm</code>
 method of the Table component to true.&nbsp; For example: <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp; <code>// Set table component.<br>
 &nbsp;&nbsp;&nbsp; public void setTable(Table table) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.table = table;<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // This binding is used only
 for the internal virtual form example.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 table.setInternalVirtualForm(true);<br>
 &nbsp;&nbsp;&nbsp; }</code><br>
 <br>
 A virtual form allows the table data to be
 submitted separately from the
 other components on the page, just as using two separate HTML forms
 would allow.&nbsp; Placing
 the table in a virtual form allows the table sort action to complete
 because validation for the required text field is not processed. This
 behavior is similar to that caused by setting the <code>immediate</code>
 property of a
 button, but allows
 table children to be updated so that selected checkbox values may be
 sorted, for example. The
 advantage to using a virtual form is that the values of the other
 components on the page are not lost when table data is submitted.<br>
 </li>
 </ul>
 <p style="margin-left: 40px; color: rgb(0, 0, 0);">
 </p>
 <h4 style="color: rgb(0, 0, 0);"><span style="font-weight: bold;">Value
 Bindings</span></h4>
 <span style="color: rgb(0, 0, 0);">Value
 expressions that use DataProviders must use the following syntax:
 </span><br style="color: rgb(0, 0, 0);">
 <code style="color: rgb(0, 0, 0);">#{sourceVar['PERSON.NAME']}<br>
 #{sourceVar.value['PERSON.NAME']}<br>
 </code>
 <p style="color: rgb(0, 0, 0);">Note
 that the word <code>value</code> is between the DataProvider and the
 FieldKey to bind. The&nbsp; brackets [] are required
 only if the FieldKey contains dot syntax.&nbsp; <br>
 </p>
 <span style="color: rgb(0, 0, 0);">For example:</span><br
 style="color: rgb(0, 0, 0);">
 <ul style="color: rgb(0, 0, 0);">
 <li>To
 bind to a FieldKey named <code>last</code>, where the <code>sourceVar</code>
 property of the table component is <code>names</code>:<br>
 <p><code>#{names.value.last}</code></p>
 </li>
 </ul>
 <div style="margin-left: 40px; color: rgb(0, 0, 0);"><code></code></div>
 <code style="color: rgb(0, 0, 0);"></code><br
 style="color: rgb(0, 0, 0);">
 <ul style="color: rgb(0, 0, 0);">
 <li>To
 bind to a property named <code>test</code>, where the backing bean is
 named <code>TableBean</code>.</li>
 </ul>
 <div style="margin-left: 40px; color: rgb(0, 0, 0);"><code>#{TableBean.test}</code><br>
 <code></code></div>
 <h4 style="color: rgb(0, 0, 0);"><span style="font-weight: bold;">Method
 Bindings</span></h4>
 <span style="color: rgb(0, 0, 0);">A JavaServer Faces issue prevents
 method bindings from
 working in a DataProvider. To work around the issue, you can bind to a
 method in a backing bean, and use that method to retrieve values from
 the DataProvider. </span><span
 style="font-weight: bold; color: rgb(0, 0, 0);"><br>
 <br>
 </span><span style="color: rgb(0, 0, 0);">For example, the
 following
 syntax to bind to a DataProvider does not work:</span><br
 style="color: rgb(0, 0, 0);">
 <br>
 <code>&lt;webuijsf:hyperlink text="#{name.last}" action="#{name.action}"/&gt;</code><br>
 <br>
 Instead of using a DataProvider to handle the action (which breaks the
 MVC paradigm), bind the action to a method in the backing bean. For
 example:<br>
 <br>
 <code>&lt;webuijsf:hyperlink text="#{name.last}"
 action="#{TableBean.action}"/&gt;</code><br>
 <br>
 In the <code>TableBean.action</code> method, you may invoke the
 following code to
 retrieve values from the DataProvider:<br>
 <br>
 <code>public String action() {<br>
 &nbsp;&nbsp;&nbsp; FacesContext context =
 FacesContext.getCurrentInstance();<br>
 &nbsp;&nbsp;&nbsp; ValueBinding vb =
 context.getApplication().createValueBinding("#{name.first}");<br>
 &nbsp;&nbsp;&nbsp; String first = (String) (vb.getValue(context));<br>
 &nbsp;&nbsp;&nbsp; return "whatever";<br>
 }</code><br>
 <br>
 If you have an instance of the DataProvider, you can also invoke the
 following code to retrieve values: <br>
 <br>
 <code>public String action() {<br>
 &nbsp;&nbsp;&nbsp; FacesContext context =
 FacesContext.getCurrentInstance();<br>
 &nbsp;&nbsp;&nbsp; ValueBinding vb =
 context.getApplication().createValueBinding("#{name.tableRow}");<br>
 &nbsp;&nbsp;&nbsp; RowKey row = (RowKey) (vb.getValue(context));<br>
 &nbsp;&nbsp;&nbsp; String first = (String)
 provider.getFieldKey("first"), row)<br>
 }</code><br>
 <h4 style="color: rgb(0, 0, 0);"><span style="font-weight: bold;">Logging</span></h4>
 <br>
 <code></code><code>java.util.logging.ConsoleHandler.level = FINE <br>
 com.sun.webui.jsf.event.TablePaginationActionListener.level = FINE <br>
 com.sun.webui.jsf.event.TableSelectPhaseListener.level = FINE <br>
 com.sun.webui.jsf.event.TableSortActionListener.level = FINE <br>
 com.sun.webui.jsf.component.Table.level = FINE<br>
 com.sun.webui.jsf.component.TableActions.level = FINE <br>
 com.sun.webui.jsf.component.TableColumn.level = FINE <br>
 com.sun.webui.jsf.component.TableFooter.level = FINE <br>
 com.sun.webui.jsf.component.TableHeader.level = FINE <br>
 com.sun.webui.jsf.component.TablePanels.level = FINE <br>
 com.sun.webui.jsf.component.TableRowGroup.level = FINE <br>
 com.sun.webui.jsf.renderkit.html.TableActionsRenderer.level = FINE <br>
 com.sun.webui.jsf.renderkit.html.TableColumnRenderer.level = FINE <br>
 com.sun.webui.jsf.renderkit.html.TableFooterRenderer.level = FINE <br>
 com.sun.webui.jsf.renderkit.html.TableHeaderRenderer.level = FINE <br>
 com.sun.webui.jsf.renderkit.html.TablePanelsRenderer.level = FINE <br>
 com.sun.webui.jsf.renderkit.html.TableRenderer.level = FINE <br>
 com.sun.webui.jsf.renderkit.html.TableRowGroupRenderer.level = FINE<br>
 </code><code></code><br>
 <h3 style="color: rgb(0, 0, 0);">Examples</h3>
 <span style="color: rgb(0, 0, 0);">The following examples use a
 backing bean called </span><a href="table.html#Example:_TableBean_"
 style="color: rgb(0, 0, 0);">TableBean</a><span
 style="color: rgb(0, 0, 0);">
 and </span><a href="table.html#UtilityClasses"
 style="color: rgb(0, 0, 0);">some
 utility classes</a><span style="color: rgb(0, 0, 0);">, which are
 included after the examples.&nbsp;
 Additional examples are shown in the </span><code
 style="color: rgb(0, 0, 0);"><a href="tableRowGroup.html">webuijsf:tableRowGroup</a></code><span
 style="color: rgb(0, 0, 0);">
 and </span><code style="color: rgb(0, 0, 0);"><a
 href="tableColumn.html">webuijsf:tableColumn</a></code><span
 style="color: rgb(0, 0, 0);">
 documents.</span><br style="color: rgb(0, 0, 0);">
 <br>
 <span style="font-weight: bold;">Examples in this file:</span>
 <div style="margin-left: 40px;">
 <p><a href="table.html#BasicTable">Example
 1: Basic Table</a></p>
 <p><a href="table.html#CustomTitle">Example
 2: Custom Title in Table</a></p>
 <p><a href="table.html#PaginatedTable">Example
 3: Paginated Table</a></p>
 <p><a href="table.html#TableSortPanel">Example
 4: Table Sort Panel</a></p>
 <p><a href="table.html#TablePreferences">Example
 5: Table Preferences</a></p>
 <p><a href="table.html#TableFilter">Example
 6: Table Filter</a></p>
 <p><a href="table.html#TableActions">Example
 7: Table Actions</a></p>
 </div>
 <p style="font-weight: bold;">Supporting files:</p>
 <div style="margin-left: 40px;">
 <p><a href="table.html#Example:_TableBean_">TableBean
 backing bean </a></p>
 <p><a href="table.html#UtilityClasses">Utility
 classes used in the examples</a></p>
 </div>
 <h4><a name="BasicTable"></a>Example 1: Basic Table</h4>
 This example shows how to create a basic
 table.<br>
 <br>
 <code>&lt;!-- Basic Table --&gt;<br>
 &lt;webuijsf:table id="table1" title="Basic Table"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"
 sourceVar="name"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
 headerText="Last Name" rowHeader="true"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2" alignKey="first"
 headerText="First Name"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <br>
 <a name="CustomTitle"></a><span style="font-weight: bold;">Example 2:
 Custom Title</span><br>
 <span style="color: rgb(0, 0, 0);">This example shows how
 to
 create a custom title for a table, using the <code></code><code>title</code>
 facet. When
 you
 use the
 title
 attribute as shown in the <a href="#BasicTable">BasicTable</a>
 example, the
 component provides a default title implementation which can include
 information regarding paginated rows and applied
 filters. This example implements the title with a <code>webuijsf:staticText</code>
 tag in
 the <code>title</code> facet.</span><br>
 <code><br>
 &lt;!-- Custom Title --&gt;<br>
 &lt;webuijsf:table id="table1"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"
 sourceVar="name"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
 headerText="Last Name" rowHeader="true"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2" alignKey="first"
 headerText="First Name"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 &nbsp; &lt;!-- Title --&gt;<br>
 &nbsp; &lt;f:facet name="title"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText text="Custom Title"/&gt;<br>
 &nbsp; &lt;/f:facet&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <h4><a name="PaginatedTable"></a>Example 3: Paginated Table<br>
 </h4>
 This example shows how to create a paginated
 table. The default number of rows to be displayed for a paginated table
 is 25 per page.<span style="color: rgb(102, 102, 204);"> </span>You
 can override this value with
 the
 <code>rows</code> attribute<span style="color: rgb(102, 102, 204);"> </span>in
 the <code>webuijsf:tableRowGroup</code> tag. <br>
 <br>
 Note: The rows attribute is used only for paginated tables.<br>
 <br>
 <code>&lt;!-- Paginated Table --&gt;<br>
 &lt;webuijsf:table id="table1"<br>
 &nbsp;&nbsp;&nbsp; paginateButton="true"<br>
 &nbsp;&nbsp;&nbsp; paginationControls="true"<br>
 &nbsp;&nbsp;&nbsp; title="Paginated Table"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"
 sourceVar="name" rows="5"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
 headerText="Last Name" rowHeader="true"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2" alignKey="first"
 headerText="First Name"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <h4><a name="TableSortPanel"></a>Example 4: Sort Panel<br>
 </h4>
 This example shows how to add
 the sort panel. You
 can use the
 default sort panel by setting the
 <code>sortPanelToggleButton</code>
 attribute to true. This button opens an embedded panel in the table,
 displaying a default implementation.&nbsp;&nbsp; The default
 implementation shows
 one, two, or three drop down menus that represent the primary,
 secondary, and
 tertiary sorts. The menus
 list the column headers for each sortable column. If a column is not
 sortable, it is not shown as a sortable option. If there are
 only two sortable columns, only the primary and secondary drop down
 menus are shown. If there is only one sort, only the
 primary drop down menu is shown. Next to each sort menu is a menu to
 select ascending or descending sort order.<span
 style="color: rgb(102, 102, 204);"><br>
 </span>
 <p> </p>
 <code>&lt;!-- Sort Panel --&gt;<br>
 &lt;webuijsf:table id="table"<br>
 &nbsp;&nbsp;&nbsp; clearSortButton="true"<br>
 &nbsp;&nbsp;&nbsp; sortPanelToggleButton="true"<br>
 &nbsp;&nbsp;&nbsp; title="Sort Panel"&gt;<br>
 &nbsp; &lt;!-- Insert tableRowGroup tag here --&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <br>
 To override the default sort panel, use the <code>sortPanel</code>
 facet.&nbsp; The sort panel toggle
 button is shown when you use the facet, so you do not
 need to specify the <code>sortPanelToggleButton</code>
 attribute. <br>
 <code></code>
 <h4><a name="TablePreferences"></a>Example 5: Table Preferences<br>
 </h4>
 <code></code>This example shows how
 to add the preferences toggle button and the table panel. The
 preferences panel toggle button is
 shown only when you use the <code>preferencesPanel</code>
 facet.
 The button opens an embedded panel in the table, displaying the
 contents that you provide in the <code>preferencesPanel</code> facet. <br
 style="color: rgb(102, 102, 204);">
 <br style="color: rgb(102, 102, 204);">
 In this example, the preferences panel is used to set
 the number
 of paginated rows with the rows attribute of <code>webuijsf:tableRowGroup</code>.
 See the <a href="#Preferences.java">Preferences.java</a> example
 utility class, which provides functionality for preferences for
 this example.<br>
 <code></code><br>
 <code>&lt;!-- Preferences --&gt;<br>
 &lt;webuijsf:table id="table1" paginationControls="true"
 title="Preferences"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 rows="#{TableBean.groupA.preferences.rows}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
 headerText="Last Name" rowHeader="true"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2" alignKey="first"
 headerText="First Name"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 <br>
 &nbsp; &lt;!-- Preferences Panel --&gt;<br>
 &nbsp; &lt;f:facet name="preferencesPanel"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;f:subview id="preferencesPanel"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jsp:include
 page="preferencesPanel.jsp"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/f:subview&gt;<br>
 &nbsp; &lt;/f:facet&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <br style="color: rgb(102, 102, 204);">
 <span style="font-weight: bold;">preferencesPanel.jsp</span><br
 style="color: rgb(102, 102, 204);">
 <br>
 This example shows the contents of the <code>preferencesPanel.jsp</code>
 file included in the JSP page example above.<br>
 <br>
 <code>&lt;!-- Preferences Panel --&gt;<br>
 &lt;webuijsf:textField id="rows"<br>
 &nbsp;&nbsp;&nbsp; columns="5"<br>
 &nbsp;&nbsp;&nbsp; label="Rows Per Page:"<br>
 &nbsp;&nbsp;&nbsp; labelLevel="2"<br>
 &nbsp;&nbsp;&nbsp; onKeyPress="if (event.keyCode==13) {var
 e=document.getElementById('form1:table1:preferencesPanel:submit'); if
 (e != null) e.click(); return false}"<br>
 &nbsp;&nbsp;&nbsp;
 text="#{TableBean.groupA.preferences.preference}"/&gt;<br>
 &lt;webuijsf:markup tag="div" styleClass="#{themeStyles.TABLE_PANEL_BUTTON_DIV}"&gt;<br>
 &nbsp; &lt;webuijsf:button id="submit"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 action="#{TableBean.groupA.preferences.applyPreferences}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mini="true"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; primary="true"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text="OK"/&gt;<br>
 &nbsp; &lt;webuijsf:button id="cancel"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mini="true"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; onClick="togglePreferencesPanel();
 return false"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text="Cancel"/&gt;<br>
 &lt;/webuijsf:markup&gt;<br>
 <br>
 &lt;!-- Note: If the user presses the enter key while the text field
 has focus,<br>
 &nbsp;&nbsp;&nbsp;&nbsp; the page will be submitted incorrectly, unless
 we capture the onKeyPress<br>
 &nbsp;&nbsp;&nbsp;&nbsp; event and invoke the click method of the
 submit button. --&gt;</code><br>
 <br>
 <span style="font-weight: bold;">preferences.js</span><br>
 <br>
 This example shows the contents of the preferences.js file used in the <code>tablePreferencesPanel.jsp</code>&nbsp;
 example
 above. The <code>togglePreferencesPanel()</code> JavaScript function
 is used with
 the <code>onClick</code> attribute of a <code>webuijsf:button</code> tag.<br>
 <br>
 <code>// Use this function to toggle the preferences panel open or
 closed. This<br>
 // functionality requires the filterId of the table component to be set.<br>
 function togglePreferencesPanel() {<br>
 &nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
 &nbsp;&nbsp;&nbsp; table.togglePreferencesPanel();<br>
 }</code><br>
 <h4><a name="TableFilter"></a>Example 6: Table Filter<br>
 </h4>
 <p>This example shows how to add filters using a filter drop down
 menu and the filter panel. In this example, the filter
 panel is used to set a custom filter.
 The custom filter removes all rows from the view that do not match the
 given last name. <span style="color: rgb(0, 0, 0);">See the </span><a
 href="#Filter.java" style="color: rgb(0, 0, 0);">Filter.java</a><span
 style="color: rgb(0, 0, 0);">
 example, which provides the&nbsp; functionality for filters for
 this example.</span></p>
 <p style="color: rgb(0, 0, 0);">Basic
 filters
 are filters that
 you define for the users of your application. Custom filters enable
 users to specify the data to be used by the table component to
 determine which table entries to display.&nbsp; You specify the basic
 filter names as items in a <a href="dropDown.html"><code>webuijsf:dropDown</code>
 </a>tag in the <code>filter</code>
 facet. If you want to allow users to use a custom filter, include a
 "Custom Filter" item as one of the <code>webuijsf:dropDown</code>
 items. <br>
 </p>
 <p style="color: rgb(0, 0, 0);">If you
 include a "Custom Filter" item in
 the Filter drop down menu, you can allow users to
 open a filter panel to filter the table data using a custom
 filter.&nbsp; When the Custom
 Filter option is selected, an embedded panel in the table is
 opened,
 displaying the contents that you provide in the <code>filterPanel</code>
 facet. The default
 custom filter functionality requires you to use the
 <code>filterMenuChanged</code> JavaScript function for the <code>onChange</code>
 event in the <code>webuijsf:dropDown</code> tag.&nbsp; After the custom
 filter is
 applied, you should display a non-selectable "Custom
 Filter Applied" item in
 the
 filter drop down menu,&nbsp;
 to indicate that a custom filter has been applied. You should also set
 the <code>filterText</code> attribute. The table component updates the
 table title to
 indicate that a basic or custom
 filter has been applied by inserting the text <span
 style="font-style: italic;">&lt;filterText&gt;</span> Filter Applied. </p>
 <p style="color: rgb(0, 0, 0);">The
 default
 custom filter
 functionality depends on a specific value assigned to the
 Custom Filter item in the dropDown component. The table component
 provides a method named <code>getFilterOptions()</code> to add the
 item text and value for the custom filter option to the drop down list.
 You can use <code>getFilterOptions()</code> in your backing
 bean to append either the
 "Custom Filter" or "Custom Filter Applied" item to the basic filter
 items. <br>
 </p>
 <p style="color: rgb(0, 0, 0);">In the <a href="#Filter.java">Filter.java</a>
 util example, the
 "Custom Filter" and "Custom Filter Applied" items are
 assigned
 based on&nbsp;the
 boolean value <code style="text-decoration: line-through;"></code>
 provided
 to <code>getFilterOptions(</code><code>)</code>. If
 this&nbsp;value is true,
 the
 "Custom Filter Applied" item value is added. If the value is false,
 "Custom Filter" item value is added. The <code>filterMenuChanged</code>
 JavaScript function, assigned to the dropDown component's <code>onChange</code>
 event,&nbsp; behaves differently depending on
 which item is added.&nbsp; See the comments in <a href="#filters.js">filters.js&nbsp;</a>for
 more information. <br>
 </p>
 <p style="color: rgb(0, 0, 0);">The
 default custom filter functionality
 also depends on the id of the
 <code>webuijsf:dropDown</code> tag in the <code>filter</code>
 facet. Note that if you use the <code>webuijsf:dropDown</code> tag as the
 only component
 in the filter facet, the <code>filterId</code> is optional. If you use
 a custom
 component, or use the <code>webuijsf:dropDown</code> as a child component,
 you must
 specify a filterID.</p>
 <span style="color: rgb(0, 0, 0);">The table
 implements functionality to reset the dropDown menu. If you
 use the <code>filterId</code> attribute, the menu can be reset
 whenever the sort and preferences toggle buttons are clicked. You can
 also use the filterMenuChanged JavaScript function to reset the menu at
 some other time.&nbsp;&nbsp; Note:
 This functionality requires the </span><code
 style="color: rgb(0, 0, 0);">selected</code><span
 style="color: rgb(0, 0, 0);"> value of the <code>webuijsf:dropDown</code>
 tag to be set in order
 to
 restore the default selected value when the embedded filter panel is
 closed.</span><br style="color: rgb(0, 0, 0);">
 <span style="color: rgb(0, 0, 0);"><br>
 </span><span style="color: rgb(102, 102, 204);"><span
 style="color: rgb(0, 0, 0);">The filter
 code can be placed in a util class, as shown in the </span><a
 href="#Filter.java" style="color: rgb(0, 0, 0);">Filter.java</a><span
 style="color: rgb(0, 0, 0);"> example, or in a backing bean.</span><span
 style="font-weight: bold;"><br>
 </span></span><span style="color: rgb(102, 102, 204);"></span><br>
 <code>&lt;!-- Filter --&gt;<br>
 &lt;webuijsf:table id="table1"<br>
 &nbsp;&nbsp;&nbsp; filterText="#{TableBean.groupA.filter.filterText}"<br>
 &nbsp;&nbsp;&nbsp; paginateButton="true"<br>
 &nbsp;&nbsp;&nbsp; paginationControls="true"<br>
 &nbsp;&nbsp;&nbsp; title="Filter"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 binding="#{TableBean.groupA.tableRowGroup}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rows="5"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
 headerText="Last Name" rowHeader="true"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2" alignKey="first"
 headerText="First Name"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 <br>
 &nbsp; &lt;!-- Filter --&gt;<br>
 &nbsp; &lt;f:facet name="filter"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:dropDown submitForm="true" id="filter"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 action="#{TableBean.groupA.filter.applyBasicFilter}" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 items="#{TableBean.groupA.filter.filterOptions}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; onChange="if
 (filterMenuChanged() == false) return false"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupA.filter.basicFilter}"/&gt;<br>
 &nbsp; &lt;/f:facet&gt;<br>
 <br>
 &nbsp; &lt;!-- Filter Panel --&gt;<br>
 &nbsp; &lt;f:facet name="filterPanel"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;f:subview id="filterPanel"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jsp:include
 page="filterPanel.jsp"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/f:subview&gt;<br>
 &nbsp; &lt;/f:facet&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <br>
 <span style="font-weight: bold;">filterPanel.jsp</span><br>
 <br>
 This example shows the contents of the <code>filterPanel.jsp</code><span
 style="font-weight: bold;"> </span>file included in the JSP page in
 the example above.<br>
 <code><br>
 &lt;!-- Filter Panel --&gt;<br>
 &lt;webuijsf:textField id="customFilter"<br>
 &nbsp;&nbsp;&nbsp; columns="50"<br>
 &nbsp;&nbsp;&nbsp; label="Show only rows containing last name:"<br>
 &nbsp;&nbsp;&nbsp; labelLevel="2"<br>
 &nbsp;&nbsp;&nbsp; onKeyPress="if (event.keyCode==13) {var
 e=document.getElementById('form1:table1:filterPanel:submit'); if (e !=
 null) e.click(); return false}"<br>
 &nbsp;&nbsp;&nbsp; text="#{TableBean.groupA.filter.customFilter}"/&gt;<br>
 &lt;webuijsf:markup tag="div" styleClass="#{themeStyles.TABLE_PANEL_BUTTON_DIV}"&gt;<br>
 &nbsp; &lt;webuijsf:button id="submit"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 action="#{TableBean.groupA.filter.applyCustomFilter}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mini="true"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; primary="true"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text="OK"/&gt;<br>
 &nbsp; &lt;webuijsf:button id="cancel"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mini="true"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; onClick="toggleFilterPanel(); return
 false"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text="Cancel"/&gt;<br>
 &lt;/webuijsf:markup&gt;<br>
 <br>
 &lt;!-- Note: If the user presses the enter key while the text field
 has focus,<br>
 &nbsp;&nbsp;&nbsp;&nbsp; the page will be submitted incorrectly, unless
 we capture the onKeyPress<br>
 &nbsp;&nbsp;&nbsp;&nbsp; event and invoke the click method of the
 submit button. --&gt;</code><br>
 <br>
 <span style="font-weight: bold;"><a name="filters.js"></a>filters.js</span><br>
 <br>
 This example shows the contents of the <code>filters.js</code><span
 style="font-weight: bold;"> </span>file used in the <code>filterPanel.jsp<br>
 </code>example above. The <code>toggleFilterPanel()</code>
 JavaScript function is used with the <code>onClick</code> attribute of
 a <code>webuijsf:button</code> tag to allow the user to close the
 filter panel without specifying a filter.<br>
 <br>
 <code>// Toggle the filter panel from the filter menu.<br>
 //<br>
 // If the "Custom Filter" option has been selected, the filter panel is
 <br>
 // toggled. In this scenario, false is returned indicating the onChange
 event,<br>
 // generated by the filter menu, should not be allowed to continue.<br>
 // <br>
 // If the "Custom Filter Applied" option has been selected, no action
 is taken.<br>
 // Instead, the filter menu is reverted back to the original selection.
 In this<br>
 // scenario, false is also returned indicating the onChange event,
 generated by<br>
 // the filter menu, should not be allowed to continue.<br>
 //<br>
 // For all other selections, true is returned indicating the onChange
 event, <br>
 // generated by the filter menu, should be allowed to continue.<br>
 function filterMenuChanged() {<br>
 &nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
 &nbsp;&nbsp;&nbsp; return table.filterMenuChanged();<br>
 }<br>
 <br>
 // Use this function to toggle the filter panel open or closed. This<br>
 // functionality requires the filterId of the table component to be
 set. In <br>
 // addition, the selected value must be set as well to restore the
 default<br>
 // selected value when the embedded filter panel is closed.<br>
 function toggleFilterPanel() {<br>
 &nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
 &nbsp;&nbsp;&nbsp; table.toggleFilterPanel();<br>
 }</code><br>
 <h4><a name="TableActions"></a>Example 7: Table Actions<br>
 </h4>
 <span style="color: rgb(0, 0, 0);">This example shows how to add
 actions </span><span style="color: rgb(102, 102, 204);"><span
 style="color: rgb(0, 0, 0);">to a table by using the </span><code
 style="color: rgb(0, 0, 0);">actionsTop</code><span
 style="color: rgb(0, 0, 0);">
 and </span><code style="color: rgb(0, 0, 0);">actionsBottom</code><span
 style="color: rgb(0, 0, 0);">
 facets. Four buttons and a drop down menu are added to the Action Bar
 (top) and Action Bar (bottom). When the page is initially
 displayed, all actions
 are disabled. When the user selects at least one checkbox, the actions
 are enabled. If the user deselects all checkboxes, the actions are
 disabled again. </span><br>
 <br>
 <span style="color: rgb(0, 0, 0);">Note that this example defines a
 JavaScript function called </span><code style="color: rgb(0, 0, 0);">disableActions</code><span
 style="color: rgb(0, 0, 0);">, which is shown in </span><a
 href="table.html#actions.js" style="color: rgb(0, 0, 0);">actions.js.
 </a><span style="color: rgb(0, 0, 0);">The </span></span><code
 style="color: rgb(0, 0, 0);">disableActions</code><span
 style="color: rgb(0, 0, 0);"> function is
 defined by the developer, and is not part of the table component. </span><br
 style="color: rgb(0, 0, 0);">
 <br style="color: rgb(0, 0, 0);">
 <span style="color: rgb(0, 0, 0);">When the
 user clicks on a checkbox, a JavaScript <code>disableActions</code>
 function is invoked
 with the <code>onClick</code> event.&nbsp; The JavaScript <code>setTimeout</code>
 function
 is used to ensure checkboxes are selected immediately, instead of
 waiting for
 the JavaScript function to complete.
 See the <a href="#Actions.java">Actions.java</a> example, which
 provides functionality for table actions in this example.</span><br
 style="color: rgb(0, 0, 0);">
 <br>
 <code>&lt;!-- Actions --&gt;<br>
 &lt;webuijsf:table id="table1"<br>
 &nbsp;&nbsp;&nbsp; deselectMultipleButton="true"<br>
 &nbsp;&nbsp;&nbsp;
 deselectMultipleButtonOnClick="setTimeout('disableActions()', 0)"<br>
 &nbsp;&nbsp;&nbsp; paginateButton="true"<br>
 &nbsp;&nbsp;&nbsp; paginationControls="true"<br>
 &nbsp;&nbsp;&nbsp; selectMultipleButton="true"<br>
 &nbsp;&nbsp;&nbsp;
 selectMultipleButtonOnClick="setTimeout('disableActions()', 0)"<br>
 &nbsp;&nbsp;&nbsp; title="Actions"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 binding="#{TableBean.groupA.tableRowGroup}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rows="5"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupA.select.selectedState}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col0"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 sort="#{TableBean.groupA.select.selectedState}"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:checkbox id="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 onClick="setTimeout('initAllRows(); disableActions()', 0)"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupA.select.selected}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selectedValue="#{TableBean.groupA.select.selectedValue}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
 headerText="Last Name" rowHeader="true"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2" alignKey="first"
 headerText="First Name"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 <br>
 &nbsp; &lt;!-- Actions (Top) --&gt;<br>
 &nbsp; &lt;f:facet name="actionsTop"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;f:subview id="actionsTop"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jsp:include
 page="actionsTop.jsp"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/f:subview&gt;<br>
 &nbsp; &lt;/f:facet&gt;<br>
 <br>
 &nbsp; &lt;!-- Actions (Bottom) --&gt;<br>
 &nbsp; &lt;f:facet name="actionsBottom"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;f:subview id="actionsBottom"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jsp:include
 page="actionsBottom.jsp"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/f:subview&gt;<br>
 &nbsp; &lt;/f:facet&gt;<br>
 &lt;/webuijsf:table&gt;</code><code><br>
 <br>
 </code><span style="font-weight: bold;">actionsTop.jsp</span><br>
 <br>
 This example shows the contents of the <code>actionsTop.jsp</code><span
 style="font-weight: bold;"> </span>file included&nbsp; in the <code>actionsTop</code>
 facet in the JSP page in the example above.<br>
 <br>
 <code>&lt;!-- Actions (Top) --&gt;<br>
 &lt;webuijsf:button id="action1"<br>
 &nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.delete}"<br>
 &nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
 &nbsp;&nbsp;&nbsp; onClick="if (confirmDeleteSelectedRows() == false)
 return false"<br>
 &nbsp;&nbsp;&nbsp; text="Delete"/&gt;<br>
 &lt;webuijsf:button id="action2"<br>
 &nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.action}"<br>
 &nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
 &nbsp;&nbsp;&nbsp; onClick="if (confirmSelectedRows() == false) return
 false"<br>
 &nbsp;&nbsp;&nbsp; text="Action 2"/&gt;<br>
 &lt;webuijsf:button id="action3"<br>
 &nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.action}"<br>
 &nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
 &nbsp;&nbsp;&nbsp; onClick="if (confirmSelectedRows() == false) return
 false"<br>
 &nbsp;&nbsp;&nbsp; text="Action 3"/&gt;<br>
 &lt;webuijsf:button id="action4"<br>
 &nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.action}"<br>
 &nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
 &nbsp;&nbsp;&nbsp; onClick="if (confirmSelectedRows() == false) return
 false"<br>
 &nbsp;&nbsp;&nbsp; text="Action 4"/&gt;<br>
 &lt;webuijsf:dropDown submitForm="true" id="moreActions"<br>
 &nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.moreActions}"<br>
 &nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
 &nbsp;&nbsp;&nbsp;
 items="#{TableBean.groupA.actions.moreActionsOptions}"<br>
 &nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupA.actions.moreActions}"/&gt;</code><br>
 <br>
 <span style="font-weight: bold;">actionsBottom.jsp</span><br>
 <br>
 This example shows the contents of the <code>actionsBottom.jsp</code><span
 style="font-weight: bold;"> </span>file included&nbsp; in the <code>actionsBottom</code>
 facet in the JSP page in the example above.<br>
 <br>
 <code>&lt;!-- Actions (Bottom) --&gt;<br>
 &lt;webuijsf:button id="action1"<br>
 &nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.delete}"<br>
 &nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
 &nbsp;&nbsp;&nbsp; onClick="if (confirmDeleteSelectedRows() == false)
 return false"<br>
 &nbsp;&nbsp;&nbsp; text="Delete"/&gt;<br>
 &lt;webuijsf:button id="action2"<br>
 &nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.action}"<br>
 &nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
 &nbsp;&nbsp;&nbsp; onClick="if (confirmSelectedRows() == false) return
 false"<br>
 &nbsp;&nbsp;&nbsp; text="Action 2"/&gt;<br>
 &lt;webuijsf:button id="action3"<br>
 &nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.action}"<br>
 &nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
 &nbsp;&nbsp;&nbsp; onClick="if (confirmSelectedRows() == false) return
 false"<br>
 &nbsp;&nbsp;&nbsp; text="Action 3"/&gt;<br>
 &lt;webuijsf:button id="action4"<br>
 &nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.action}"<br>
 &nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
 &nbsp;&nbsp;&nbsp; onClick="if (confirmSelectedRows() == false) return
 false"<br>
 &nbsp;&nbsp;&nbsp; text="Action 4"/&gt;<br>
 &lt;webuijsf:dropDown submitForm="true" id="moreActions"<br>
 &nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.moreActions}"<br>
 &nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
 &nbsp;&nbsp;&nbsp;
 items="#{TableBean.groupA.actions.moreActionsOptions}"<br>
 &nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupA.actions.moreActions}"/&gt;</code><br>
 <br>
 <span style="font-weight: bold;">select.js</span><br>
 <br>
 This example shows the contents of the <code>select.js</code><span
 style="font-weight: bold;"> </span>file used in the example above.<br>
 <br>
 <code>// Use this function to initialize all rows displayed in the
 table when the<br>
 // state of selected components change (i.e., checkboxes or
 radiobuttons used to<br>
 // de/select rows of the table). This functionality requires the
 selectId <br>
 // property of the tableColumn component to be set.<br>
 // <br>
 // Note: Use setTimeout when invoking this function. This will ensure
 that <br>
 // checkboxes and radiobutton are selected immediately, instead of
 waiting for <br>
 // the onClick event to complete. For example: <br>
 //<br>
 // onClick="setTimeout('initAllRows(); disableActions()', 0)"<br>
 function initAllRows() {<br>
 &nbsp;&nbsp;&nbsp; // Disable table actions by default.<br>
 &nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
 &nbsp;&nbsp;&nbsp; table.initAllRows();<br>
 }</code><br>
 <br>
 <span style="font-weight: bold;"><a name="actions.js"></a></span><span
 style="font-weight: bold;">actions.js</span><br>
 <br>
 This example shows the contents of the <code>actions.js</code><span
 style="font-weight: bold;"> </span>file used in the example above.<br>
 <br>
 <code>// Set disabled state of table actions. If a selection has been
 made, actions<br>
 // are enabled. If no selection has been made, actions are disabled.<br>
 // <br>
 // Note: Use setTimeout when invoking this function. This will ensure
 that <br>
 // checkboxes and radiobutton are selected immediately, instead of
 waiting for <br>
 // the onClick event to complete. For example: <br>
 //<br>
 // onClick="setTimeout('initAllRows(); disableActions()', 0)"<br>
 function disableActions() {<br>
 &nbsp;&nbsp;&nbsp; // Disable table actions by default.<br>
 &nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
 &nbsp;&nbsp;&nbsp; var selections = table.getAllSelectedRowsCount(); //
 Hidden &amp; visible selections.<br>
 &nbsp;&nbsp;&nbsp; var disabled = (selections &gt; 0) ? false : true;<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set disabled state for top actions.<br>
 &nbsp;&nbsp;&nbsp;
 document.getElementById("form1:table1:actionsTop:action1").setDisabled(disabled);<br>
 &nbsp;&nbsp;&nbsp;
 document.getElementById("form1:table1:actionsTop:action2").setDisabled(disabled);<br>
 &nbsp;&nbsp;&nbsp;
 document.getElementById("form1:table1:actionsTop:action3").setDisabled(disabled);<br>
 &nbsp;&nbsp;&nbsp;
 document.getElementById("form1:table1:actionsTop:action4").setDisabled(disabled);<br>
 &nbsp;&nbsp;&nbsp;
 webui.suntheme.dropDown.setDisabled("form1:table1:actionsTop:moreActions", disabled);<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set disabled state for bottom actions.<br>
 &nbsp;&nbsp;&nbsp;
 document.getElementById("form1:table1:actionsBottom:action1").setDisabled(disabled);<br>
 &nbsp;&nbsp;&nbsp;
 document.getElementById("form1:table1:actionsBottom:action2").setDisabled(disabled);<br>
 &nbsp;&nbsp;&nbsp;
 document.getElementById("form1:table1:actionsBottom:action3").setDisabled(disabled);<br>
 &nbsp;&nbsp;&nbsp;
 document.getElementById("form1:table1:actionsBottom:action4").setDisabled(disabled);<br>
 &nbsp;&nbsp;&nbsp;
 webui.suntheme.dropDown.setDisabled("form1:table1:actionsBottom:moreActions",
 disabled);<br>
 }<br>
 <br>
 //<br>
 // Use this function to confirm the number of selected components
 (i.e., <br>
 // checkboxes or radiobuttons used to de/select rows of the table),
 affected by<br>
 // a delete action. This functionality requires the selectId property
 of the<br>
 // tableColumn component and hiddenSelectedRows property of the
 tableRowGroup<br>
 // component to be set.<br>
 // <br>
 // If selections are hidden from view, the confirmation message
 indicates the<br>
 // number of selections not displayed in addition to the total number of<br>
 // selections. If selections are not hidden, the confirmation message
 indicates<br>
 // only the total selections.<br>
 function confirmDeleteSelectedRows() {<br>
 &nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
 &nbsp;&nbsp;&nbsp; return table.confirmDeleteSelectedRows();<br>
 }<br>
 <br>
 // Use this function to confirm the number of selected components
 (i.e., <br>
 // checkboxes or radiobuttons used to de/select rows of the table),
 affected by<br>
 // an action such as edit, archive, etc. This functionality requires
 the <br>
 // selectId property of the tableColumn component and hiddenSelectedRows<br>
 // property of the tableRowGroup component to be set.<br>
 // <br>
 // If selections are hidden from view, the confirmation message
 indicates the<br>
 // number of selections not displayed in addition to the total number of<br>
 // selections. If selections are not hidden, the confirmation message
 indicates<br>
 // only the total selections.<br>
 function confirmSelectedRows() {<br>
 &nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
 &nbsp;&nbsp;&nbsp; return table.confirmSelectedRows("\n\nArchive all
 selections?");<br>
 }</code><br>
 <h3>faces_config.xml Entry for Managed Bean</h3>
 The previous examples are based on managed beans, such as the example
 below, added to the<code>
 faces_config.xml </code>file.<br>
 <br>
 <code>&lt;!DOCTYPE faces-config PUBLIC<br>
 &nbsp;&nbsp;&nbsp; '-//Sun Microsystems, Inc.//DTD JavaServer Faces
 Config 1.0//EN'<br>
 &nbsp;&nbsp;&nbsp; 'http://java.sun.com/dtd/web-facesconfig_1_1.dtd'&gt;<br>
 <br>
 &lt;faces-config&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;managed-bean&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;The
 backing bean for the table example&lt;/description&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-name&gt;TableBean&lt;/managed-bean-name&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-class&gt;table.TableBean&lt;/managed-bean-class&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-scope&gt;session&lt;/managed-bean-scope&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/managed-bean&gt;<br>
 &lt;/faces-config&gt;</code><br>
 <h3><a name="Example:_TableBean_"></a>TableBean<br>
 </h3>
 <code>package table;<br>
 <br>
 import com.sun.webui.jsf.component.Alarm;<br>
 <br>
 import java.util.ArrayList;<br>
 <br>
 import table.util.Group;<br>
 import table.util.Name;<br>
 <br>
 // Backing bean for table examples.<br>
 public class TableBean {<br>
 &nbsp;&nbsp;&nbsp; // Group util for table examples.<br>
 &nbsp;&nbsp;&nbsp; private Group groupA = null; // List (rows 0-19).<br>
 &nbsp;&nbsp;&nbsp; private Group groupB = null; // Array (rows 0-9).<br>
 &nbsp;&nbsp;&nbsp; private Group groupC = null; // Array (rows 10-19).<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Alarms.<br>
 &nbsp;&nbsp;&nbsp; private static final Alarm down = new
 Alarm(Alarm.SEVERITY_DOWN);<br>
 &nbsp;&nbsp;&nbsp; private static final Alarm critical = new
 Alarm(Alarm.SEVERITY_CRITICAL);<br>
 &nbsp;&nbsp;&nbsp; private static final Alarm major = new
 Alarm(Alarm.SEVERITY_MAJOR);<br>
 &nbsp;&nbsp;&nbsp; private static final Alarm minor = new
 Alarm(Alarm.SEVERITY_MINOR);<br>
 &nbsp;&nbsp;&nbsp; private static final Alarm ok = new
 Alarm(Alarm.SEVERITY_OK);<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Data for table examples.<br>
 &nbsp;&nbsp;&nbsp; protected static final Name[] names = {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("William",
 "Dupont", down),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Anna", "Keeney",
 critical),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Mariko", "Randor",
 major),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("John", "Wilson",
 minor),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Lynn",
 "Seckinger", ok),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Richard",
 "Tattersall", down),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Gabriella",
 "Sarintia", critical),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Lisa", "Hartwig",
 major),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Shirley", "Jones",
 minor),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Bill", "Sprague",
 ok),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Greg", "Doench",
 down),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Solange",
 "Nadeau", critical),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Heather",
 "McGann", major),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Roy", "Martin",
 minor),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Claude",
 "Loubier", ok),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Dan", "Woodard",
 down),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Ron", "Dunlap",
 critical),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Keith",
 "Frankart", major),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Andre", "Nadeau",
 minor),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Horace",
 "Celestin", ok),<br>
 &nbsp;&nbsp;&nbsp; };<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Default constructor.<br>
 &nbsp;&nbsp;&nbsp; public TableBean() {<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get Group util created with a List containing all
 names.<br>
 &nbsp;&nbsp;&nbsp; public Group getGroupA() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (groupA != null) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 return groupA;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create List with all
 names.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArrayList newNames = new
 ArrayList();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = names.length -
 1; i &gt;= 0; i--) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 newNames.add(names[i]);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (groupA = new
 Group(newNames));<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get Group util created with an array containing a
 subset of names.<br>
 &nbsp;&nbsp;&nbsp; public Group getGroupB() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (groupB != null) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 return groupB;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create an array with
 subset of names (i.e., 0-9).<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name[] newNames = new
 Name[10];<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.arraycopy(names, 0,
 newNames, 0, 10);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (groupB = new
 Group(newNames));<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get Group util created with an array containing a
 subset of names.<br>
 &nbsp;&nbsp;&nbsp; public Group getGroupC() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (groupC != null) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 return groupC;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create an array with
 subset of names (i.e., 10-19).<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name[] newNames = new
 Name[10];<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.arraycopy(names, 10,
 newNames, 0, 10);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (groupC = new
 Group(newNames));<br>
 &nbsp;&nbsp;&nbsp; }<br>
 }</code><br>
 <h3><a name="UtilityClasses"></a>Utility Classes used in the examples</h3>
 The following utility classes are used in the examples for the table
 tags:<code> webuijsf:table</code>, <code>webuijsf:tableRowGroup</code>, and <code>webuijsf:tableColumn.<br>
 </code><code></code>
 <p><a href="#Group.java">Group.java</a><br>
 <a href="#Actions.java">Actions.java</a><br>
 <a href="#Filter.java">Filter.java</a><br>
 <a href="#Name.java">Name.java</a><br>
 <a href="#Select.java">Select.java</a><br>
 <a href="#Preferences.java">Preferences.java</a><br>
 </p>
 <h4><a name="Group.java"></a>Group.java Utility Class<br>
 </h4>
 <code>package table.util;<br>
 <br>
 import com.sun.data.provider.TableDataProvider;<br>
 import com.sun.data.provider.impl.ObjectArrayDataProvider;<br>
 import com.sun.data.provider.impl.ObjectListDataProvider;<br>
 import com.sun.webui.jsf.component.Checkbox;<br>
 import com.sun.webui.jsf.component.TableRowGroup;<br>
 <br>
 import java.util.List;<br>
 <br>
 // This class contains data provider and util classes. Note that not
 all util<br>
 // classes are used for each example.<br>
 public class Group {<br>
 &nbsp;&nbsp;&nbsp; private TableRowGroup tableRowGroup = null; //
 TableRowGroup component.<br>
 &nbsp;&nbsp;&nbsp; private TableDataProvider provider = null; // Data
 provider.<br>
 &nbsp;&nbsp;&nbsp; private Checkbox checkbox = null; // Checkbox
 component.<br>
 &nbsp;&nbsp;&nbsp; private Preferences prefs = null; // Preferences
 util.<br>
 &nbsp;&nbsp;&nbsp; private Messages messages = null; // Messages util.<br>
 &nbsp;&nbsp;&nbsp; private Actions actions = null; // Actions util.<br>
 &nbsp;&nbsp;&nbsp; private Filter filter = null; // Filter util.<br>
 &nbsp;&nbsp;&nbsp; private Select select = null; // Select util.<br>
 &nbsp;&nbsp;&nbsp; private Clean clean = null; // Clean util.<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Default constructor.<br>
 &nbsp;&nbsp;&nbsp; public Group() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; actions = new Actions(this);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; filter = new Filter(this);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select = new Select(this);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clean = new Clean(this);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prefs = new Preferences();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; messages = new Messages();<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Construct an instance using given Object array.<br>
 &nbsp;&nbsp;&nbsp; public Group(Object[] array) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; provider = new
 ObjectArrayDataProvider(array);<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Construct an instance using given List.<br>
 &nbsp;&nbsp;&nbsp; public Group(List list) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; provider = new
 ObjectListDataProvider(list);<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get data provider.<br>
 &nbsp;&nbsp;&nbsp; public TableDataProvider getNames() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return provider;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get Actions util.<br>
 &nbsp;&nbsp;&nbsp; public Actions getActions() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return actions;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get Filter util.<br>
 &nbsp;&nbsp;&nbsp; public Filter getFilter() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return filter;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get Messages util.<br>
 &nbsp;&nbsp;&nbsp; public Messages getMessages() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return messages;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get Preferences util.<br>
 &nbsp;&nbsp;&nbsp; public Preferences getPreferences() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return prefs;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get Select util.<br>
 &nbsp;&nbsp;&nbsp; public Select getSelect() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return select;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get tableRowGroup component.<br>
 &nbsp;&nbsp;&nbsp; public TableRowGroup getTableRowGroup() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return tableRowGroup;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set tableRowGroup component.<br>
 &nbsp;&nbsp;&nbsp; public void setTableRowGroup(TableRowGroup
 tableRowGroup) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.tableRowGroup =
 tableRowGroup;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get checkbox component.<br>
 &nbsp;&nbsp;&nbsp; public Checkbox getCheckbox() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return checkbox;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set checkbox component.<br>
 &nbsp;&nbsp;&nbsp; public void setCheckbox(Checkbox checkbox) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.checkbox = checkbox;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 }</code><span style="font-family: monospace;"></span><br>
 <h4><a name="Actions.java"></a>Actions.java Utility Class<br>
 </h4>
 <code>package table.util;<br>
 <br>
 import com.sun.data.provider.FieldKey;<br>
 import com.sun.data.provider.RowKey;<br>
 import com.sun.data.provider.TableDataProvider;<br>
 import com.sun.data.provider.impl.ObjectListDataProvider;<br>
 import com.sun.webui.jsf.model.Option;<br>
 <br>
 import java.util.List;<br>
 import java.util.Map;<br>
 <br>
 import javax.faces.context.FacesContext;<br>
 <br>
 // This class provides functionality for table actions.<br>
 public class Actions {<br>
 &nbsp;&nbsp;&nbsp; private Group group = null; // Group util.<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Action menu items.<br>
 &nbsp;&nbsp;&nbsp; protected static final Option[] moreActionsOptions =
 {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new OptionTitle("More
 Actions"),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("ACTION1",
 "Action 1"),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("ACTION2",
 "Action 2"),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("ACTION3",
 "Action 3"),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("ACTION4",
 "Action 4"),<br>
 &nbsp;&nbsp;&nbsp; };<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Default constructor.<br>
 &nbsp;&nbsp;&nbsp; public Actions(Group group) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.group = group;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Action button event.<br>
 &nbsp;&nbsp;&nbsp; public void action() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = null;<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get hyperlink parameter
 used for embedded actions example.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Map map =
 FacesContext.getCurrentInstance().getExternalContext()<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 .getRequestParameterMap();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String param = (String)
 map.get("param");<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (param != null) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 message = "Embedded Action Selected: Parameter = " + param;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 message = "Table Action Selected";<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 group.getMessages().setMessage(message);<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Action to remove rows from ObjectListDataProvider.<br>
 &nbsp;&nbsp;&nbsp; public void delete() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Since mutiple examples
 are using the same beans, the binding<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // simply tells us that
 checkbox state is maintained arcoss pages.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
 (group.getSelect().isKeepSelected()) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
 If we got here, then we're maintaining state across pages.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 delete(group.getTableRowGroup().getSelectedRowKeys());<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
 If we got here, then we're using the phase listener and must<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
 take filtering, sorting, and pagination into account.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 delete(group.getTableRowGroup().getRenderedSelectedRowKeys());<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set disabled value for table actions.<br>
 &nbsp;&nbsp;&nbsp; public boolean getDisabled() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If there is at least one
 row selection, actions are enabled.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; boolean result = true;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (group.getTableRowGroup()
 == null) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 return result;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Since mutiple examples
 are using the same beans, the binding<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // simply tells us that
 checkbox state is maintained arcoss pages.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
 (group.getSelect().isKeepSelected()) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
 If we got here, then we're maintaining state across pages.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 result = group.getTableRowGroup().getSelectedRowsCount() &lt; 1;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
 If we got here, then we're using the phase listener and must<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
 take filtering, sorting, and pagination into account.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 result = group.getTableRowGroup().getRenderedSelectedRowsCount() &lt; 1;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get action.<br>
 &nbsp;&nbsp;&nbsp; public String getMoreActions() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Per the UI guidelines,
 always snap back to "More Actions...".<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "ACTION0";<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get action menu options.<br>
 &nbsp;&nbsp;&nbsp; public Option[] getMoreActionsOptions() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return moreActionsOptions;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Action menu event.<br>
 &nbsp;&nbsp;&nbsp; public void moreActions() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 group.getMessages().setMessage("More Actions Menu Selected");<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set action.<br>
 &nbsp;&nbsp;&nbsp; public void setMoreActions(String action) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Do nothing.<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; //
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>
 &nbsp;&nbsp;&nbsp; // Private methods<br>
 &nbsp;&nbsp;&nbsp; //
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Action to remove rows from ObjectListDataProvider.<br>
 &nbsp;&nbsp;&nbsp; private void delete(RowKey[] rowKeys) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (rowKeys == null) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 return;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TableDataProvider provider =
 group.getNames();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt;
 rowKeys.length; i++) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 RowKey rowKey = rowKeys[i];<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
 (provider.canRemoveRow(rowKey)) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 provider.removeRow(rowKey);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((ObjectListDataProvider)
 provider).commitChanges(); // Commit.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; group.getSelect().clear();
 // Clear phase listener.<br>
 &nbsp;&nbsp;&nbsp; }<br>
 }</code><br>
 <h4><a name="Filter.java"></a>Filter.java Utility Class<br>
 </h4>
 <code>package table.util;<br>
 <br>
 import com.sun.data.provider.FilterCriteria;<br>
 import com.sun.data.provider.impl.CompareFilterCriteria;<br>
 import com.sun.webui.jsf.component.Table;<br>
 import com.sun.webui.jsf.model.Option;<br>
 <br>
 // This class provides functionality for table filters.<br>
 //<br>
 // This util class sets filters directly on the TableRowGroup component
 using <br>
 // FilterCriteria; however, there is also a FilteredTableDataProvider
 class that<br>
 // can used for filtering outside of the table. The table will pick up
 what ever <br>
 // filter has been applied automatically, for example:<br>
 //<br>
 // // Some choice of TableDataProvider.<br>
 // TableDataProvider provider = new ...<br>
 //<br>
 // // This wraps and filters an existing TableDataProvider.<br>
 // FilteredTableDataProvider filteredProvider = new
 FilteredTableDataProvider();<br>
 // filteredProvider.setTableDataProvider(provider);<br>
 //<br>
 // // Set FilteredTableDataProvider in the TableRowGroup component.<br>
 // tableRowGroup.setSourceData(filteredProvider);<br>
 //<br>
 // The table component itself has no idea that there is any filtering
 going on, <br>
 // but the filtering functionality has been encapsulated in the data
 provider. <br>
 // The developer can then use different FilterCriteria types to apply
 filters,<br>
 // for example:<br>
 //<br>
 // CompareFilterCriteria cfc = new ...<br>
 // RegexFilterCriteria rxfc = new ...<br>
 // filteredProvider.setFilterCriteria(new FilterCriteria[] { cfc, fxfc
 });<br>
 public class Filter {<br>
 &nbsp;&nbsp;&nbsp; private String customFilter = null; // Custom filter.<br>
 &nbsp;&nbsp;&nbsp; private String basicFilter = null; // Basic filter
 menu option.<br>
 &nbsp;&nbsp;&nbsp; private String filterText = null; // Filter text.<br>
 &nbsp;&nbsp;&nbsp; private Group group = null; // Group util.<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Filter menu items.<br>
 &nbsp;&nbsp;&nbsp; protected static final Option[] filterOptions = {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("FILTER0", "All
 Items"),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("FILTER1",
 "Filter 1"),<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("FILTER2",
 "Filter 2"),<br>
 &nbsp;&nbsp;&nbsp; };<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Default constructor.<br>
 &nbsp;&nbsp;&nbsp; public Filter(Group group) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.group = group;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // UI guidelines state that a "Custom Filter" option
 should be added to the<br>
 &nbsp;&nbsp;&nbsp; // filter menu, used to open the table filter panel.
 Thus, if the <br>
 &nbsp;&nbsp;&nbsp; // CUSTOM_FILTER option is selected, Javascript
 invoked via the onChange<br>
 &nbsp;&nbsp;&nbsp; // event will open the table filter panel.<br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp; // UI guidelines also state that a "Custom Filter
 Applied" option should be <br>
 &nbsp;&nbsp;&nbsp; // added to the filter menu, indicating that a
 custom filter has been <br>
 &nbsp;&nbsp;&nbsp; // applied. In this scenario, set the selected
 property of the filter menu <br>
 &nbsp;&nbsp;&nbsp; // as CUSTOM_FILTER_APPLIED. This selection should
 persist until another <br>
 &nbsp;&nbsp;&nbsp; // menu option has been selected.<br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp; // Further, UI guidelines state that the table title
 should indicate that a <br>
 &nbsp;&nbsp;&nbsp; // custom filter has been applied. To add this text
 to the table title, set <br>
 &nbsp;&nbsp;&nbsp; // the filter property.<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Basic filter event.<br>
 &nbsp;&nbsp;&nbsp; public void applyBasicFilter() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
 (basicFilter.equals("FILTER1")) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 filterText = "Filter 1";<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if
 (basicFilter.equals("FILTER2")) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 filterText = "Filter 2";<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 filterText = null;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Clear all filters since
 we don't have an example here.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Note: TableRowGroup
 ensures pagination is reset per UI guidelines.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 group.getTableRowGroup().setFilterCriteria(null);<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Custom filter event.<br>
 &nbsp;&nbsp;&nbsp; public void applyCustomFilter() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; basicFilter =
 Table.CUSTOM_FILTER_APPLIED; // Set filter menu option.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; filterText = "Custom";<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Filter rows that do not
 match custom filter.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CompareFilterCriteria
 criteria = new CompareFilterCriteria(<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 group.getNames().getFieldKey("last"), customFilter);<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Note: TableRowGroup
 ensures pagination is reset per UI guidelines.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 group.getTableRowGroup().setFilterCriteria(<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new
 FilterCriteria[] {criteria});<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get basic filter.<br>
 &nbsp;&nbsp;&nbsp; public String getBasicFilter() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Note: the selected value
 must be set to restore the default selected<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // value when the embedded
 filter panel is closed. Further, the selected<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // value should never be set
 as "Custom Filter...".<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (basicFilter != null
 &amp;&amp; !basicFilter.equals(Table.CUSTOM_FILTER))<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ?
 basicFilter : "FILTER0";<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set basic filter.<br>
 &nbsp;&nbsp;&nbsp; public void setBasicFilter(String value) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; basicFilter = value;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get custom filter.<br>
 &nbsp;&nbsp;&nbsp; public String getCustomFilter() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return customFilter;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set custom filter.<br>
 &nbsp;&nbsp;&nbsp; public void setCustomFilter(String value) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; customFilter = value;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get filter menu options.<br>
 &nbsp;&nbsp;&nbsp; public Option[] getFilterOptions() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get filter options based
 on the selected filter menu option.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
 Table.getFilterOptions(filterOptions,<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 basicFilter == Table.CUSTOM_FILTER_APPLIED);<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get filter text.<br>
 &nbsp;&nbsp;&nbsp; public String getFilterText() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return filterText;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 }</code><br>
 <h4><a name="Name.java"></a>Name.java Utility Class<br>
 </h4>
 <code>package table.util;<br>
 <br>
 import com.sun.webui.jsf.component.Alarm;<br>
 import com.sun.webui.jsf.theme.ThemeImages;<br>
 <br>
 public class Name {<br>
 &nbsp;&nbsp;&nbsp; private String last = null; // Last name.<br>
 &nbsp;&nbsp;&nbsp; private String first = null; // First name.<br>
 &nbsp;&nbsp;&nbsp; private Alarm alarm = null; // Alarm.<br>
 &nbsp;&nbsp;&nbsp; <br>
 &nbsp;&nbsp;&nbsp; // Default constructor.<br>
 &nbsp;&nbsp;&nbsp; public Name(String first, String last) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.last = last;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.first = first;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Construct an instance with given alarm severity.<br>
 &nbsp;&nbsp;&nbsp; public Name(String first, String last, Alarm alarm) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this(first, last);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.alarm = alarm;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get first name.<br>
 &nbsp;&nbsp;&nbsp; public String getFirst() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return first;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set first name.<br>
 &nbsp;&nbsp;&nbsp; public void setFirst(String first) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.first = first;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get last name.<br>
 &nbsp;&nbsp;&nbsp; public String getLast() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return last;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set last name.<br>
 &nbsp;&nbsp;&nbsp; public void setLast(String last) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.last = last;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get alarm.<br>
 &nbsp;&nbsp;&nbsp; public Alarm getAlarm() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return alarm;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get alarm.<br>
 &nbsp;&nbsp;&nbsp; public void setAlarm(Alarm alarm) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.alarm = alarm;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get alarm severity.<br>
 &nbsp;&nbsp;&nbsp; public String getSeverity() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return alarm.getSeverity();<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get alarm severity.<br>
 &nbsp;&nbsp;&nbsp; public void setSeverity(String severity) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alarm.setSeverity(severity);<br>
 &nbsp;&nbsp;&nbsp; }<br>
 }</code><br>
 <h4><a name="Select.java"></a>Select.java Utility Class<br>
 </h4>
 <code>package table.util;<br>
 <br>
 import com.sun.data.provider.FieldKey;<br>
 import com.sun.data.provider.RowKey;<br>
 import com.sun.data.provider.TableDataProvider;<br>
 import com.sun.webui.jsf.event.TableSelectPhaseListener;<br>
 <br>
 import javax.faces.context.FacesContext;<br>
 import javax.faces.el.ValueBinding;<br>
 <br>
 // This class provides functionality for select tables.<br>
 //<br>
 // Note: UI guidelines recomend that rows should be unselected when no
 longer in<br>
 // view. For example, when a user selects rows of the table and
 navigates to<br>
 // another page. Or, when a user applies a filter or sort that may hide<br>
 // previously selected rows from view. If a user invokes an action to
 delete<br>
 // the currently selected rows, they may inadvertently remove rows not<br>
 // displayed on the current page. Using TableSelectPhaseListener ensures<br>
 // that invalid row selections are not rendered by clearing selected
 state<br>
 // after the render response phase.<br>
 public class Select {<br>
 &nbsp;&nbsp;&nbsp; private TableSelectPhaseListener tspl = null; //
 Phase listener.<br>
 &nbsp;&nbsp;&nbsp; private Group group = null; // Group util.<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Default constructor.<br>
 &nbsp;&nbsp;&nbsp; public Select(Group group) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.group = group;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tspl = new
 TableSelectPhaseListener();<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Clear selected state from phase listener (e.g.,
 when deleting rows).<br>
 &nbsp;&nbsp;&nbsp; public void clear() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tspl.clear();<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Test flag indicating that selected objects should
 not be cleared.<br>
 &nbsp;&nbsp;&nbsp; public boolean isKeepSelected() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return tspl.isKeepSelected();<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set flag indicating that selected objects should
 not be cleared.<br>
 &nbsp;&nbsp;&nbsp; public void keepSelected(boolean keepSelected) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 tspl.keepSelected(keepSelected);<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get selected property.<br>
 &nbsp;&nbsp;&nbsp; public Object getSelected() {<br>
 &nbsp;&nbsp;&nbsp; return tspl.getSelected(getTableRow());<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set selected property.<br>
 &nbsp;&nbsp;&nbsp; public void setSelected(Object object) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RowKey rowKey =
 getTableRow();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (rowKey != null) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 tspl.setSelected(rowKey, object);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get selected value property.<br>
 &nbsp;&nbsp;&nbsp; public Object getSelectedValue() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RowKey rowKey =
 getTableRow();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (rowKey != null) ?
 rowKey.getRowId() : null;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get the selected state -- Sort on checked state
 only.<br>
 &nbsp;&nbsp;&nbsp; public boolean getSelectedState() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Typically, selected state
 is tested by comparing the selected and <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // selectedValue properties.
 In this example, however, the phase <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // listener value is not
 null when selected.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
 getSelectedState(getTableRow());<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get the selected state.<br>
 &nbsp;&nbsp;&nbsp; public boolean getSelectedState(RowKey rowKey) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
 tspl.isSelected(rowKey);<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get current table row.<br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp; // Note: To obtain a RowKey for the current table
 row, the use the same <br>
 &nbsp;&nbsp;&nbsp; // sourceVar property given to the TableRowGroup
 component. For example, if <br>
 &nbsp;&nbsp;&nbsp; // sourceVar="name", use "#{name.tableRow}" as the
 expression string.<br>
 &nbsp;&nbsp;&nbsp; private RowKey getTableRow() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FacesContext context =
 FacesContext.getCurrentInstance();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ValueBinding vb =
 context.getApplication().createValueBinding(<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{name.tableRow}");<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (RowKey)
 vb.getValue(context);<br>
 &nbsp;&nbsp;&nbsp; }<br>
 }</code><br>
 <h4><a name="Preferences.java"></a>Preferences.java Utility Class<br>
 </h4>
 <code>package table.util;<br>
 <br>
 // This class provides functionality for table preferences.<br>
 public class Preferences {<br>
 &nbsp;&nbsp;&nbsp; private String preference = null; // Rows preference.<br>
 &nbsp;&nbsp;&nbsp; private int rows = 5; // Rows per page.<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Default constructor.<br>
 &nbsp;&nbsp;&nbsp; public Preferences() {<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Table preferences event.<br>
 &nbsp;&nbsp;&nbsp; public void applyPreferences() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int
 rows = Integer.parseInt(preference);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
 (rows &gt; 0) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 this.rows = rows;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch
 (NumberFormatException e) {}<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get rows per page.<br>
 &nbsp;&nbsp;&nbsp; public int getRows() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return rows;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get preference.<br>
 &nbsp;&nbsp;&nbsp; public String getPreference() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
 Integer.toString(rows);<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set preference.<br>
 &nbsp;&nbsp;&nbsp; public void setPreference(String value) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; preference = value;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 }
 </code>
 <br>
]]></description>
    </tag>

    <tag>
        <name>table2</name>

        <description><![CDATA[ Component that represents a table.
]]></description>
    </tag>

    <tag>
        <name>table2Column</name>

        <description><![CDATA[ Component that represents a table column.
]]></description>
    </tag>

    <tag>
        <name>table2RowGroup</name>

        <description><![CDATA[ Component that represents a group of table rows.
]]></description>
    </tag>

    <tag>
        <name>tableColumn</name>

        <description><![CDATA[ Use the <code>webuijsf:tableColumn</code>
 tag to define the column cells of a table, inside a <a
 href="tableRowGroup.html"><code>webuijsf:table</code></a>
 tag.&nbsp; A <code>webuijsf:tableRowGroup</code> must include at least one <code>webuijsf:tableColumn</code>
 tag.<br>
 <p><span style="color: rgb(0, 0, 0);">The <code>webuijsf:table</code>
 tag is
 used to define the structure and actions of the table, and is a
 container for <a href="tableRowGroup.html"><code>webuijsf:tableRowGroup</code></a>
 which define the rows of a table.&nbsp; The <code>webuijsf:tableRowGroup</code>
 tag is a container for <code></code></span><span
 style="color: rgb(0, 0, 0);"><code>webuijsf:tableColumn</code></span><span
 style="color: rgb(0, 0, 0);"><code></code>
 tags, which are used&nbsp;<code></code>to define the
 columns of the table.&nbsp;</span><span
 style="color: rgb(102, 102, 204);"><span style="color: rgb(0, 0, 0);">
 The </span><a href="table.html" style="color: rgb(0, 0, 0);">documentation
 for the <code>webuijsf:table</code> tag</a><span style="color: rgb(0, 0, 0);">
 contains detailed information
 about the table component.&nbsp; This page provides details about how
 to define table columns only.</span><br>
 </span></p>
 <p>
 </p>
 <p>
 </p>
 <h3>HTML Elements and Layout</h3>
 <span style="text-decoration: line-through;"></span><span
 style="color: rgb(0, 0, 0);">The tableColumn component is
 used to define attributes for XHTML <code>&lt;td&gt;</code>
 elements, which are used
 to display table data cells. However, the rendering of
 column headers and footers is handled by the tableRowGroup component.
 The <a href="#diagram">diagram</a> shows the table layout, and
 highlights the areas that are defined with the <code>webuijsf:tableColumn</code>
 tag. </span><br>
 <br>
 <a name="diagram"></a><br>
 <table style="text-align: left; width: 100%;" border="1" cellpadding="2"
 cellspacing="2">
 <tbody>
 <tr style="color: rgb(192, 192, 192);">
 <td
 style="vertical-align: top; background-color: rgb(153, 153, 153);"
 rowspan="1" colspan="1">Title
 Bar&nbsp;</td>
 </tr>
 <tr style="color: rgb(153, 153, 153);">
 <td
 style="vertical-align: top; background-color: rgb(208, 208, 208);"
 rowspan="1" colspan="1">Action
 Bar (top)&nbsp;&nbsp;</td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(210, 224, 235);">
 <table style="text-align: left; width: 100%;" border="1"
 cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;">Column Header <big><span
 style="color: rgb(0, 0, 0);"><small>(specified </small></span></big>with
 <code>headerText</code>
 attribute or <code>header</code> facet <big><span
 style="color: rgb(0, 0, 0);"><small>in first <code>webuijsf:tableColumn</code>
 tag in&nbsp; <code>webuijsf:tableRowGroup</code> tag)</small></span></big></td>
 <td style="vertical-align: top;">Column Header <big><span
 style="color: rgb(0, 0, 0);"><small>(specified </small></span></big>with
 <code>headerText</code>
 attribute or <code>header</code> facet <big><span
 style="color: rgb(0, 0, 0);"><small>in second <code>webuijsf:tableColumn</code>
 tag in <code>webuijsf:tableRowGroup</code> tag)</small></span></big></td>
 </tr>
 <tr style="color: rgb(153, 153, 153);">
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232);"
 rowspan="1" colspan="2">Group
 Header Bar&nbsp;</td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);"><span
 style="font-style: italic;">Table
 data</span> <code><br>
 <br>
 <br>
 <br>
 <br>
 </code></td>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);"><span
 style="font-style: italic;">Table
 data</span> <code></code></td>
 </tr>
 <tr>
 <td style="vertical-align: top;">Column Footer<span
 style="color: rgb(0, 0, 0);"> (specified </span>with <code>footerText</code>
 attribute or <code>footer</code>
 facet <span style="color: rgb(0, 0, 0);">in first <code>webuijsf:tableColumn</code>
 tag in <code>webuijsf:tableRowGroup</code> tag)</span></td>
 <td style="vertical-align: top;">Column Footer <span
 style="color: rgb(0, 0, 0);">(specified </span>with <code>footerText</code>
 attribute or <code>footer</code>
 facet <span style="color: rgb(0, 0, 0);">in second <code>webuijsf:tableColumn</code>
 tag in <code>webuijsf:tableRowGroup</code> tag)</span></td>
 </tr>
 <tr style="color: rgb(153, 153, 153);">
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232);"
 rowspan="1" colspan="2">Group
 Footer Bar&nbsp;</td>
 </tr>
 <tr>
 <td style="vertical-align: top;">Table
 Column Footer (specified with <code>tableFooterText</code>
 attribute <code></code>or <code>tableFooter</code> facet in <code>webuijsf:tableColumn</code>
 tag)</td>
 <td style="vertical-align: top;">Table
 Column Footer (specified with <code>tableFooterText</code>
 attribute <code></code>or <code>tableFooter</code> facet <code></code>in
 <code>webuijsf:tableColumn</code>
 tag)</td>
 </tr>
 </tbody>
 </table>
 <big><span style="color: rgb(0, 0, 0);"> </span></big></td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(208, 208, 208);"><span
 style="color: rgb(153, 153, 153);">Action
 Bar (bottom)&nbsp;</span><small> </small> </td>
 </tr>
 <tr style="color: rgb(192, 192, 192);">
 <td
 style="vertical-align: top; background-color: rgb(153, 153, 153);"
 rowspan="1" colspan="1">Footer<code></code><code> </code></td>
 </tr>
 </tbody>
 </table>
 <br style="color: rgb(102, 102, 204);">
 <h4 style="color: rgb(0, 0, 0);">Column Header</h4>
 <span style="color: rgb(0, 0, 0);">The Column Header area
 displays
 a header for each table column.&nbsp; If you specify the text of a
 column header with the <code>headerText</code> attribute in the <code>webuijsf:tableColumn</code>
 tag, the default implementation of the header is rendered. You can
 specify a separate component to provide column header content by using
 the <code>header</code>
 facet, which overrides the <code>headerText</code> attribute.&nbsp;
 You can add extra HTML code to the
 header's rendered<code> &lt;td&gt;</code> element with the <code>extraHeaderHtml</code>
 attribute.<br>
 <br>
 The following <code>webuijsf:tableColumn</code> attributes can be used to
 change
 the appearance and behavior for sorting of the Column Header:<br>
 </span>
 <ul style="color: rgb(0, 0, 0);">
 <li>
 <p><code>sort</code>
 specifies a sort key and makes a column sortable.&nbsp; </p>
 <p> </p>
 </li>
 <li>
 <p><code>sortIcon</code>
 specifies a theme identifier to select a different image to use as the
 sort icon that is displayed in the header of a sortable column.</p>
 </li>
 <li>
 <p><code>sortImageURL</code>
 specifies the path to an image to use as the sort icon that is
 displayed in the header of a
 sortable column.</p>
 </li>
 <li>
 <p><code>descending</code> when set to true causes the column
 to be sorted in descending order.</p>
 </li>
 <li><code>severity </code>specifies the severity of an alarm
 in each cell, and causes the column to&nbsp; sort on the severity value
 if used with the <code>sort</code> attribute. <code></code></li>
 </ul>
 <span style="color: rgb(0, 0, 0);">
 </span>
 <h4 style="color: rgb(0, 0, 0);">Column Footer</h4>
 <span style="color: rgb(0, 0, 0);">The Column Footers area
 displays a footer for each table column.
 If you specify the text of a column footer with the <code>footerText</code>
 attribute in the <code>webuijsf:tableColumn</code> tag, the default
 implementation of the footer is rendered. You can specify a separate
 component to provide footer content by using the <code>footer</code>
 facet, which overrides the <code>footerText</code> attribute.&nbsp;
 You can add extra HTML code to the
 footer's rendered<code> &lt;td&gt;</code> element with the <code>extraFooterHtml</code>
 attribute.<br>
 </span>
 <h4 style="color: rgb(0, 0, 0);">Table Column Footer</h4>
 <span style="color: rgb(0, 0, 0);">The Table Column
 Footers area displays column footers at the
 bottom of the table.
 The table column footers are useful in tables with multiple groups of
 rows. If you specify the text of table column footers with the <code>tableFooterText</code>
 attribute, the default implementation of the footer is rendered.&nbsp;
 You can specify a separate component to provide the content for a table
 column footer by
 using the <code>tableFooter</code> facet, which overrides the <code>tableFooterText</code>
 attribute.&nbsp; You
 can add extra HTML code to the table footer's rendered<code> &lt;td&gt;</code>
 element with the <code>extraTableFooterHtml</code> attribute.<br>
 </span>
 <h4 style="color: rgb(0, 0, 0);">Alignment and Formatting
 of Cells</h4>
 <span style="color: rgb(0, 0, 0);">In addition to defining the
 headers and footers for columns, the
 <code>webuijsf:tableColumn</code> tag can be used to set other aspects of the
 table's
 appearance and&nbsp; behavior.&nbsp; <br>
 <br>
 The following attributes affect
 the alignment of table cells:<br>
 </span>
 <ul style="color: rgb(0, 0, 0);">
 <li><code>align </code>specifies the horizontal alignment
 for
 the cell data in the
 column</li>
 <li><code>alignKey </code>specifies a particular data element on
 which to align the
 cell data <br>
 </li>
 <li><code>valign </code>specifies the vertical alignment
 for
 the content of each cell</li>
 </ul>
 <span style="color: rgb(0, 0, 0);">
 Attributes that can be used to make the column headers more accessible
 for adaptive technologies include:<br>
 </span>
 <ul style="color: rgb(0, 0, 0);">
 <li> <code>scope</code> set
 to a keyword to specify the portion of the table that this header
 applies to. <br>
 </li>
 <li><code>rowHeader</code>
 set to true to specify that the content of the column's cells applies
 to the row in which the
 cell is located. </li>
 </ul>
 <span style="color: rgb(0, 0, 0);">Attributes that affect other
 aspects of cells include:</span><br style="color: rgb(0, 0, 0);">
 <ul style="color: rgb(0, 0, 0);">
 <li><code>abbr</code>&nbsp;
 specifies an abbreviated form of the cell's content, to
 be used when the browser has little space to render the content.<br>
 </li>
 <li><code>embeddedActions</code>
 when set to true causes separators to be rendered
 between multiple action hyperlinks.</li>
 <li><code>emptyCell</code> when
 set to
 true causes an unexpectedly empty cell to be
 rendered with an appropriate image.</li>
 <li><code>spacerColumn</code> when
 set to true causes the column to be rendered as a blank column to
 enhance table spacing.<code><br>
 </code></li>
 <li><code>height </code>specifies
 the height of a column's cells.<code><br>
 </code></li>
 <li><code>width </code>specifies
 the width of a column's cells.<code><br>
 </code></li>
 <li><code>nowrap </code>prevents
 the content of the cell from wrapping to a new line.<br>
 </li>
 </ul>
 <h4 style="color: rgb(0, 0, 0);">Selection Column</h4>
 <span style="color: rgb(0, 0, 0);">To make table rows selectable,
 the first column of the table should display only checkboxes or radio
 buttons that the user clicks to select the row. When you set the <code>selectId</code>
 attribute in the <code>webuijsf:tableColumn</code> tag and include a <code>webuijsf:checkbox</code>
 or <code>webuijsf:radioButton</code> tag as a child of the <code>webuijsf:tableColumn</code></span><span
 style="color: rgb(102, 102, 204);"><span style="color: rgb(0, 0, 0);">
 tag, the first column is rendered
 appropriately.&nbsp; See the</span><a href="#SelectSingleRow"
 style="color: rgb(0, 0, 0);"> Select Single
 Row example </a><span style="color: rgb(0, 0, 0);">for more
 information. </span><br style="color: rgb(0, 0, 0);">
 <br>
 </span>
 <h3>Facets</h3>
 <span style="color: rgb(0, 0, 0);">The </span><code
 style="color: rgb(0, 0, 0);">webuijsf:tableColumn</code><span
 style="color: rgb(0, 0, 0);"> tag supports the following facets,
 which
 allow you to customize the
 layout of the component.</span><br style="color: rgb(0, 0, 0);">
 <br style="color: rgb(0, 0, 0);">
 <table style="width: 100%; color: rgb(0, 0, 0);" border="1"
 cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;"><span style="font-weight: bold;">Facet
 Name</span><code><br>
 </code></td>
 <td style="vertical-align: top; font-weight: bold;">Table Item
 Implemented by the Facet<br>
 </td>
 </tr>
 <tr>
 <td><code>footer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 <br>
 </code></td>
 <td>Footer that is displayed at the bottom of the column within
 the group of rows. The footer applies to the column of cells that are
 defined
 by the <code>webuijsf:tableColumn</code>
 tag.&nbsp; This facet can be used to replace the default footer for the
 column.<br>
 </td>
 </tr>
 <tr>
 <td><code>header</code></td>
 <td>Header that applies to the column of cells that are defined
 by the <code>webuijsf:tableColumn</code>
 tag. This facet can be used to replace the default header for the
 column. </td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>tableFooter<br>
 </code></td>
 <td style="vertical-align: top;">Footer that is displayed at the
 bottom of the table, below the last group of rows, above the Action Bar
 and overall table footer. The table footer content should apply to the
 column for all the groups of rows in the table.&nbsp; This facet can be
 used to replace the default table footer for the
 column. </td>
 </tr>
 </tbody>
 </table>
 <br style="color: rgb(0, 0, 0);">
 <h3 style="color: rgb(0, 0, 0);">Client Side JavaScript
 Functions</h3>
 <span style="color: rgb(0, 0, 0);">See the </span><a
 href="table.html#JavaScript" style="color: rgb(0, 0, 0);"><code>webuijsf:table</code>
 tag's
 JavaScript documentation</a><span style="color: rgb(0, 0, 0);">.&nbsp;
 The same functions are used for the
 <code>webuijsf:tableColumn</code> tag.</span><br>
 <br>
 <h3>Examples
 </h3>
 <span style="color: rgb(0, 0, 0);">The following examples use a
 backing bean called </span><a href="table.html#Example:_TableBean_"
 style="color: rgb(0, 0, 0);">TableBean</a><span
 style="color: rgb(0, 0, 0);">,
 which is shown in the <code>webuijsf:table</code> tag documentation. </span><a
 href="table.html#UtilityClasses" style="color: rgb(0, 0, 0);">Utility
 classes</a><span style="color: rgb(0, 0, 0);"> used in the examples are
 included
 in this page, after the examples.&nbsp;
 Additional examples are shown in the </span><code
 style="color: rgb(0, 0, 0);"><a href="table.html#Examples">webuijsf:table</a></code><span
 style="color: rgb(0, 0, 0);">
 and </span><code style="color: rgb(0, 0, 0);"><a
 href="tableRowGroup.html">webuijsf:tableRowGroup</a></code><span
 style="color: rgb(0, 0, 0);">
 documents.<br>
 <br>
 All examples assume that the <code>webuijsf:table</code> tag is contained
 within an HTML <code>&lt;form&gt;</code> element so that actions can
 submit form data. <br>
 </span><br style="color: rgb(0, 0, 0);">
 <span style="font-weight: bold; color: rgb(0, 0, 0);">Examples in
 this file:<br>
 <br>
 </span>
 <div style="margin-left: 40px; color: rgb(0, 0, 0);"><a
 href="tableColumn.html#SortableTable">Example
 1: Sortable Table</a><br>
 <p><a href="tableColumn.html#SelectSingleRow">Example
 2: Select Single
 Row</a><br>
 </p>
 <p><a href="tableColumn.html#SelectMultipleRows">Example
 3: Select
 Multiple Rows</a><br>
 </p>
 <p><a href="#HiddenSelectedRows">Example 4: Hidden Selected Rows</a><br>
 </p>
 <a href="#SpacerColumn">Example
 5: Spacer Columns</a><br>
 <p><a href="#EmptyCells">Example 6: Empty Cells</a><br>
 </p>
 <p><a href="#EmbeddedActions">Example 7:&nbsp; Embedded Actions</a><br>
 </p>
 <p><a href="#Alarms">Example 8: Alarms</a><br>
 </p>
 <p><a href="#MultiColumnHeaders">Example 9: Multiple Column Headers and
 Footers</a><br>
 </p>
 </div>
 <span style="font-weight: bold; color: rgb(0, 0, 0);">Supporting
 files:</span>
 <div style="margin-left: 40px;">
 <p style="color: rgb(0, 0, 0);"><a href="table.html#Example:_TableBean_">TableBean
 backing bean in <code>webuijsf:table</code> documentation<br>
 </a></p>
 <p><a href="table.html#UtilityClasses" style="color: rgb(0, 0, 0);">Utility
 classes in <code>webuijsf:table</code> documentation</a><a
 href="table.html#UtilityClasses"><span style="color: rgb(0, 0, 0);"> </span><br>
 </a></p>
 </div>
 <h3><a name="SortableTable"></a>Example 1: Sortable Table<br>
 </h3>
 <span style="text-decoration: line-through;"></span><span
 style="color: rgb(0, 0, 0);">This example shows how to
 implement table sorting, and uses the </span><a
 href="table.html#Example:_TableBean_" style="color: rgb(0, 0, 0);">TableBean</a><span
 style="color: rgb(0, 0, 0);"> and <a href="table.html#Name.java">Name.java</a>
 code shown in the <code>webuijsf:table</code> documentation. Notice that the
 <code>webuijsf:table</code>
 tag includes the <code>clearSortButton</code> attribute to enable
 users to clear any sorts applied to the table.<br>
 <br>
 The value binding objects that you assign to the <code>sort</code>
 attribute in <code>webuijsf:tableColumn</code> must be the proper data type
 for sorting to work as expected. For example, you should not use String
 objects for numeric data because the digits will be sorted according to
 their ASCII values. Sorting the numbers as strings causes the number 2
 to be displayed before the number 11, for example.&nbsp; Be sure to
 sort using objects such as Number, Character, Date, Boolean, etc.</span><br
 style="color: rgb(0, 0, 0);">
 <br style="color: rgb(0, 0, 0);">
 <span style="color: rgb(0, 0, 0);">You can use a FieldKey id or
 value binding to define criteria for sorting the contents of
 TableDataProvider. However, when sorting a column of checkboxes or
 radio buttons, you must use a value binding because values are external
 to the data (i.e., TableDataProvider does not contain FieldKey ids for
 a selected checkbox value).&nbsp; <br>
 <br>
 User interface
 guidelines recommend not setting a default initial sort. However, if
 you want to set a default initial sort, you can do so by using the <code>addSort(SortCriteria)</code>
 method of TableRowGroup. When the table is rendered, the data is sorted
 and the primary sort column is highlighted.&nbsp; </span><br
 style="color: rgb(0, 0, 0);">
 <br style="color: rgb(102, 102, 204);">
 <span style="color: rgb(102, 102, 204);"></span><code>&lt;!-- Sortable
 Table --&gt;<br>
 &lt;webuijsf:table id="table1" <br>
 &nbsp;&nbsp;&nbsp; clearSortButton="true"<br>
 &nbsp;&nbsp;&nbsp; sortPanelToggleButton="true"<br>
 &nbsp;&nbsp;&nbsp; title="Sortable Table"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"
 sourceVar="name"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Last Name"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowHeader="true"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="last"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="first"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="First Name"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="first"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <h3><a name="SelectSingleRow"></a>Example 2: Select Single Row</h3>
 <span style="text-decoration: line-through;"></span><span
 style="color: rgb(0, 0, 0);">This example shows a column of
 radioButton components that are used to select
 a single table row. Dynamic row highlighting is set by invoking an
 <code>initAllRows()</code> JavaScript function whenever the state of
 the radio button
 changes. The <code>initAllRows()</code>
 function is defined in <a href="#select.js"><code>select.js</code>
 shown below</a>. The
 radio button state is maintained through the <code>selected</code>
 attribute of the
 <code>webuijsf:tableRowGroup</code> tag. This example does not maintain state
 across paginated
 pages.</span><br style="color: rgb(0, 0, 0);">
 <br style="color: rgb(0, 0, 0);">
 <span style="color: rgb(0, 0, 0);">Note: UI guidelines recommend
 that items should not remain selected when they cannot be seen by the
 user. Using the
 <code>com.sun.webui.jsf.event.TableSelectPhaseListener</code> object
 ensures that rows that are hidden from view are
 deselected because the phase listener clears the selected state after
 the
 rendering phase. The <code>TableSelectPhaseListener</code>
 object is used in this example in </span><a
 href="table.html#Select.java" style="color: rgb(0, 0, 0);">Select.java
 in the <code>webuijsf:table</code> documentation</a><span
 style="color: rgb(0, 0, 0);">.&nbsp; Also refer to the JavaDoc
 for <code>TableSelectPhaseListener</code> for more information.&nbsp; </span><br
 style="color: rgb(0, 0, 0);">
 <br>
 <code>&lt;!-- Single Select Row --&gt;<br>
 &lt;webuijsf:table id="table1"<br>
 &nbsp;&nbsp;&nbsp; deselectSingleButton="true"<br>
 &nbsp;&nbsp;&nbsp; paginateButton="true"<br>
 &nbsp;&nbsp;&nbsp; paginationControls="true"<br>
 &nbsp;&nbsp;&nbsp; title="Select Single Row"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupA.select.selectedState}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name" rows="5"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col0"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 onClick="setTimeout('initAllRows()', 0)"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 sort="#{TableBean.groupA.select.selectedState}"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:radioButton id="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupA.select.selected}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selectedValue="#{TableBean.groupA.select.selectedValue}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
 headerText="Last Name" rowHeader="true"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2" alignKey="first"
 headerText="First Name"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <br>
 <span style="font-weight: bold;"><a name="select.js"></a>select.js</span><br>
 <br>
 This example shows the contents of the <code>select.js</code> file
 used in the
 example above.<br>
 <br>
 <code>// Use this function to initialize all rows displayed in the
 table when the<br>
 // state of selected components change (i.e., checkboxes or
 radiobuttons used to<br>
 // de/select rows of the table). This functionality requires the
 selectId <br>
 // property of the tableColumn component to be set.<br>
 // <br>
 // Note: Use setTimeout when invoking this function. This will ensure
 that <br>
 // checkboxes and radiobutton are selected immediately, instead of
 waiting for <br>
 // the onClick event to complete. For example: <br>
 //<br>
 // onClick="setTimeout('initAllRows(); disableActions()', 0)"<br>
 function initAllRows() {<br>
 &nbsp;&nbsp;&nbsp; // Disable table actions by default.<br>
 &nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
 &nbsp;&nbsp;&nbsp; table.initAllRows();<br>
 }</code><br>
 <h3><a name="SelectMultipleRows"></a>Example 3: Select Multiple Rows<br>
 </h3>
 <span style="text-decoration: line-through;"></span><span
 style="color: rgb(0, 0, 0);">This example shows a column of
 checkbox components that are used to select multiple table rows.
 Dynamic row highlighting is set by
 invoking an
 <code>initAllRows()</code> JavaScript function whenever the state of
 the checkbox
 changes. The <code>initAllRows()</code>
 function is defined in&nbsp; <a href="#select.js"><code>select.js </code>in
 the previous example</a>. The checkbox state is maintained
 through the <code>selected</code> attribute of the
 <code>webuijsf:tableRowGroup</code> tag. This example does not maintain state
 across paginated
 pages.</span><br style="color: rgb(0, 0, 0);">
 <span style="color: rgb(0, 0, 0);"><br>
 Note: UI guidelines recommend
 that items should not remain selected when they cannot be seen by the
 user. Using the
 <code>com.sun.webui.jsf.event.TableSelectPhaseListener</code> object
 ensures that rows that are hidden from view are
 deselected because the phase listener clears the selected state after
 the
 rendering phase. The <code>TableSelectPhaseListener</code>
 object is used in this example in </span><a
 href="table.html#Select.java" style="color: rgb(0, 0, 0);">Select.java</a><span
 style="color: rgb(0, 0, 0);">,
 shown in the </span><code style="color: rgb(0, 0, 0);">webuijsf:table</code><span
 style="color: rgb(0, 0, 0);"> documentation.&nbsp; Also refer to the
 JavaDoc
 for <code>TableSelectPhaseListener</code> for more information.&nbsp; </span><br>
 <br>
 <code>&lt;!-- Select Multiple Rows --&gt;<br>
 &lt;webuijsf:table id="table1"<br>
 &nbsp;&nbsp;&nbsp; deselectMultipleButton="true"<br>
 &nbsp;&nbsp;&nbsp; selectMultipleButton="true"<br>
 &nbsp;&nbsp;&nbsp; paginateButton="true"<br>
 &nbsp;&nbsp;&nbsp; paginationControls="true"<br>
 &nbsp;&nbsp;&nbsp; title="Select Multiple Rows"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupA.select.selectedState}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name" rows="5"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col0"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"
 sort="#{TableBean.groupA.select.selectedState}"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:checkbox id="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 onClick="setTimeout('initAllRows()', 0)"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupA.select.selected}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selectedValue="#{TableBean.groupA.select.selectedValue}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
 headerText="Last Name" rowHeader="true"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2" alignKey="first"
 headerText="First Name"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <span style="text-decoration: line-through;"></span>
 <h3><a name="HiddenSelectedRows"></a>Example 4: Hidden Selected Rows<br>
 </h3>
 <span style="text-decoration: line-through;"></span><span
 style="color: rgb(0, 0, 0);">This example is the same as <a
 href="#SelectMultipleRows">Example 3: Select Multiple Rows</a> except
 that it maintains state across paginated pages, and shows how to deal
 appropriately with the possibility of hiding rows that have been
 selected.&nbsp; As in the previous example, the first column is a
 column of checkboxes that can be used to select multiple rows. The
 checkbox state is maintained through the <code>selected</code>
 attribute of
 the
 <code>webuijsf:tableRowGroup</code> tag.&nbsp; Dynamic row highlighting is
 set by
 invoking an
 <code>initAllRows()</code> JavaScript function whenever the state of
 the checkbox
 changes. The <code>initAllRows()</code>
 function is defined in&nbsp; <a href="tableColumn.html#select.js"><code>select.js
 </code>in the previous example</a>. </span><br
 style="color: rgb(0, 0, 0);">
 <br style="color: rgb(0, 0, 0);">
 <span style="color: rgb(0, 0, 0);">If your table must maintain state,
 you must set the <code>hiddenSelectedRows</code> attribute to true in
 the <code>webuijsf:table</code> tag as shown in this example. The attribute
 causes text to be
 displayed in the table title and footer to indicate the number of
 selected rows that are currently hidden from view.&nbsp; See the </span><a
 href="table.html#Select.java" style="color: rgb(0, 0, 0);">Select.java</a><span
 style="color: rgb(0, 0, 0);">
 </span><span style="color: rgb(102, 102, 204);"><span
 style="color: rgb(0, 0, 0);">utility class in the </span><code
 style="color: rgb(0, 0, 0);">webuijsf:table</code><span
 style="color: rgb(0, 0, 0);">
 documentation.</span></span><br>
 <br>
 <code></code><span
 style="font-weight: bold; text-decoration: line-through;"></span><code>&lt;!--
 Hidden Selected Rows --&gt;<br>
 &lt;webuijsf:table id="table1"<br>
 &nbsp;&nbsp;&nbsp; deselectMultipleButton="true"<br>
 &nbsp;&nbsp;&nbsp;
 deselectMultipleButtonOnClick="setTimeout('disableActions()', 0)"<br>
 &nbsp;&nbsp;&nbsp; hiddenSelectedRows="true"<br>
 &nbsp;&nbsp;&nbsp; paginateButton="true"<br>
 &nbsp;&nbsp;&nbsp; paginationControls="true"<br>
 &nbsp;&nbsp;&nbsp; selectMultipleButton="true"<br>
 &nbsp;&nbsp;&nbsp;
 selectMultipleButtonOnClick="setTimeout('disableActions()', 0)"<br>
 &nbsp;&nbsp;&nbsp; title="Hidden Selected Rows"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 binding="#{TableBean.groupA.tableRowGroup}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupA.select.selectedState}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name" rows="5"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col0"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 sort="#{TableBean.groupA.select.selectedState}"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:checkbox id="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 binding="#{TableBean.groupA.checkbox}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 onClick="setTimeout('initAllRows(); disableActions()', 0)"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupA.select.selected}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selectedValue="#{TableBean.groupA.select.selectedValue}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
 headerText="Last Name" rowHeader="true"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2" alignKey="first"
 headerText="First Name"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 <br>
 &nbsp; &lt;!-- Actions (Top) --&gt;<br>
 &nbsp; &lt;f:facet name="actionsTop"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;f:subview id="actionsTop"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jsp:include
 page="actionsTop.jsp"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/f:subview&gt;<br>
 &nbsp; &lt;/f:facet&gt;<br>
 <br>
 &nbsp; &lt;!-- Actions (Bottom) --&gt;<br>
 &nbsp; &lt;f:facet name="actionsBottom"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;f:subview id="actionsBottom"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jsp:include
 page="actionsBottom.jsp"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/f:subview&gt;<br>
 &nbsp; &lt;/f:facet&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <h3><a name="SpacerColumn"></a>Example 5: Spacer Column<br>
 </h3>
 <span style="color: rgb(0, 0, 0);">This example shows how to
 create a blank column to use for spacing in a table. The spacer column
 is especially useful in two-column tables. A property table, which is
 used to display properties for a single object, typically includes two
 data columns. The
 first column identifies the properties of the object, and the second
 column displays the values for each of the properties. Because tables
 created with the <code>webuijsf:table</code> tag expand to the width of the
 browser window, the two data columns might become so wide that the
 properties and their values are not close together, and readability is
 reduced. To solve this problem, you can add a spacer column to one side
 of the table.<br>
 <br>
 In the example, the third column includes the <code>spacerColumn</code>
 attribute set to true, and the <code>width </code>attribute set to
 70%. The column has no header or footer text, and no data. This column
 acts to always keep
 the data
 of the first two columns in close proximity.&nbsp; If a column header
 and footer are required, provide an empty string for the <code>headerText</code>
 and
 <code>footerText</code> attributes. Set the width attribute to a value
 that achieves the desired spacing. </span><br>
 <br>
 <code>&lt;!-- Spacer Column --&gt;<br>
 &lt;webuijsf:table id="table1" title="Spacer Column"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"
 sourceVar="name"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="Column Footer"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Last Name"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowHeader="true"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="first"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="Column Footer"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="First Name"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col3" spacerColumn="true"
 width="70%"/&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <h3><a name="EmptyCells"></a>Example 6: Empty Cells<br>
 </h3>
 <span style="text-decoration: line-through;"></span><span
 style="color: rgb(0, 0, 0);">This example shows how to
 display a theme-specific icon that indicates an empty cell, when
 the content of a table cell is not applicable or is unexpectedly empty.
 UI guidelines
 suggest that the empty cell icon should not be used for a value that is
 truly null, such as an
 empty alarm cell or a comment field that is blank. In addition, the
 icon should not be used for cells that
 contain user interface elements such as checkboxes or drop-down lists
 when these elements are not applicable. Instead, the elements should
 not be displayed so the cell is left empty.</span><br
 style="color: rgb(0, 0, 0);">
 <br style="color: rgb(0, 0, 0);">
 <span style="color: rgb(0, 0, 0);">In this example, the <code>emptyCell
 </code>attribute is set to
 an expression that evaluates to true in every fifth row. In your
 application, it is up to you to decide how to
 test if the cell is truly empty. For example, you could use this
 syntax: <code>emptyCell="#{name.value.last == null}"</code></span><br
 style="color: rgb(0, 0, 0);">
 <code style="color: rgb(102, 102, 204);"></code><code><br>
 &lt;!-- Empty Cells --&gt;<br>
 &lt;webuijsf:table id="table1" title="Empty Cells"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupB.select.selectedState}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name" rows="5"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col0"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 emptyCell="#{name.tableRow.rowId % 5 == 0}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:checkbox id="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 onClick="setTimeout('initAllRows()', 0)"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupB.select.selected}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selectedValue="#{TableBean.groupB.select.selectedValue}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 emptyCell="#{name.tableRow.rowId % 5 == 0}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Last Name"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowHeader="true"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 emptyCell="#{name.tableRow.rowId % 5 == 0}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="first" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="First Name"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <h3><a name="EmbeddedActions"></a>Example 7: Embedded Actions<br>
 </h3>
 <span style="color: rgb(0, 0, 0);">This example shows how to add
 embedded actions to a table. If the
 </span><code style="color: rgb(0, 0, 0);">webuijsf:tableColumn</code><span
 style="color: rgb(0, 0, 0);"> tag contains more than one tag
 such as&nbsp;</span><code style="color: rgb(0, 0, 0);"></code><code
 style="color: rgb(0, 0, 0);">webuijsf:hyperlink</code><span
 style="color: rgb(0, 0, 0);"> that a</span><code
 style="color: rgb(0, 0, 0);"></code><span style="color: rgb(0, 0, 0);">re
 used as embedded actions, you
 should set the <code>webuijsf:tableColumn</code> tag's </span><code
 style="color: rgb(0, 0, 0);">embeddedActions </code><span
 style="color: rgb(0, 0, 0);">attribute to
 true. This attribute causes an action separator image to be displayed
 between each of the rendered hyperlinks, as recommended in UI
 guidelines.</span><br style="color: rgb(0, 0, 0);">
 <br>
 <code>&lt;!-- Embedded Actions --&gt;<br>
 &lt;webuijsf:table id="table1" title="Embedded Actions"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"
 sourceVar="name"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col0" embeddedActions="true"
 headerText="Actions"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:hyperlink id="action1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 action="#{TableBean.groupB.actions.action}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text="Action
 1"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;f:param name="param"
 value="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:hyperlink&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:hyperlink id="action2"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 action="#{TableBean.groupB.actions.action}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text="Action
 2"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;f:param name="param"
 value="#{name.tableRow.rowId}"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:hyperlink&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
 headerText="Last Name" rowHeader="true"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2" alignKey="first"
 headerText="First Name"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <h3><a name="Alarms"></a>Example 8: Alarms<br>
 </h3>
 <span style="text-decoration: line-through;"></span><span
 style="color: rgb(0, 0, 0);">This example shows how to add
 alarms to table data cells. The second </span><code
 style="color: rgb(0, 0, 0);">webuijsf:tableColumn</code><span
 style="color: rgb(0, 0, 0);"> tag includes a </span><code
 style="color: rgb(0, 0, 0);">webuijsf:alarm</code><span
 style="color: rgb(0, 0, 0);"> tag to render the alarm icon. The </span><code
 style="color: rgb(0, 0, 0);">webuijsf:tableColumn</code><span
 style="color: rgb(0, 0, 0);"> tag's </span><code
 style="color: rgb(0, 0, 0);">severity</code><span
 style="color: rgb(0, 0, 0);">&nbsp; attribute is set to true, which
 causes the
 table data cell to appear highlighted according to level of
 severity.&nbsp;
 Note also that the column
 is set to sort on the severity of the alarms. See
 the <a href="table.html#Example:_TableBean_">TableBean</a>
 backing bean
 and&nbsp; </span><a style="color: rgb(0, 0, 0);"
 href="table.html#Name.java">Name.java</a><span
 style="color: rgb(0, 0, 0);"> utlity class example in the </span><code
 style="color: rgb(0, 0, 0);">webuijsf:table</code><span
 style="color: rgb(0, 0, 0);"> documentation for the model data. </span><br
 style="color: rgb(255, 153, 0);">
 <br>
 <code>&lt;!-- Alarms --&gt;<br>
 &lt;webuijsf:table id="table1" title="Alarms"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1" <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"
 sourceVar="name"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Last Name"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowHeader="true"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="last"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="first"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="First Name"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 severity="#{name.value.severity}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="alarm"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:alarm id="alarm"
 severity="#{name.value.severity}" text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <h3><a name="MultiColumnHeaders"></a>Example 9: Multiple Column Headers
 &amp; Footers<br>
 </h3>
 This example shows how to use nested tableColumn components to create
 multiple headers and footers. The column header of the parent
 tableColumn component will span the nested tableColumn children. Not
 all attributes are supported in this configuration. Typically, only the
 header, footer, tableFooter, and sort would apply to a header and
 spaning multuple columns. Sorting is supported, but is recommended only
 for tableColumn children. Further, nesting tableColumn components will
 render; however, the styles used here support one level of nexting.<br>
 <br>
 <span style="color: rgb(0, 0, 0);">This example shows how to use
 nested <code>webuijsf:tableColumn</code> tags to create
 multiple headers and footers. The third <code>webuijsf:tableColumn</code>
 (col3) contains four nested columns col3a, col3b, col3c, and col3d. The
 column header specified in col3 spans the four nested columns.&nbsp;
 However, not
 all <code>webuijsf:tableColumn</code></span><span
 style="color: rgb(102, 102, 204);"><span style="color: rgb(0, 0, 0);">
 attributes are supported when the
 tags are nested. Typically, only the
 header, footer, tableFooter, and sort would apply to a header and
 spaning multiple columns. Sorting in the parent tableColumn is
 supported, but for usability, sorting is recommended only for
 tableColumn children. In addition, nesting of more than one level of
 tableColumn components will render, but the CSS styles only support one
 level of nesting.&nbsp;&nbsp;&nbsp;</span>
 <br style="color: rgb(0, 0, 0);">
 </span><br>
 <code>&lt;!-- Multiple Headers &amp;amp; Footers --&gt;<br>
 &lt;webuijsf:table id="table1"<br>
 &nbsp;&nbsp;&nbsp; clearSortButton="true"<br>
 &nbsp;&nbsp;&nbsp; deselectMultipleButton="true"<br>
 &nbsp;&nbsp;&nbsp;
 deselectMultipleButtonOnClick="setTimeout('disableActions()', 0)"<br>
 &nbsp;&nbsp;&nbsp; footerText="Table Footer"<br>
 &nbsp;&nbsp;&nbsp; paginateButton="true"<br>
 &nbsp;&nbsp;&nbsp; paginationControls="true"<br>
 &nbsp;&nbsp;&nbsp; selectMultipleButton="true"<br>
 &nbsp;&nbsp;&nbsp;
 selectMultipleButtonOnClick="setTimeout('disableActions()', 0)"<br>
 &nbsp;&nbsp;&nbsp; sortPanelToggleButton="true"<br>
 &nbsp;&nbsp;&nbsp; title="Multiple Headers &amp;amp; Footers"&gt;<br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 binding="#{TableBean.groupA.tableRowGroup}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 rows="#{TableBean.groupA.preferences.rows}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupA.select.selectedState}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col0"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 sort="#{TableBean.groupA.select.selectedState}"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:checkbox id="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 onClick="setTimeout('initAllRows(); disableActions()', 0)"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupA.select.selected}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selectedValue="#{TableBean.groupA.select.selectedValue}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Last Name"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowHeader="true"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="first"
 headerText="First Name"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col3" headerText="Task
 Status"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Nested Columns --&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col3a"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="A"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 footerText="ColFtrA"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="last"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 sortIcon="ALARM_CRITICAL_MEDIUM"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 tableFooterText="TblFtrA"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="a"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col3b"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="B"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 footerText="ColFtrB"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="first"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 sortIcon="ALARM_MAJOR_MEDIUM"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 tableFooterText="TblFtrB"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="b"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col3c"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="C"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 footerText="ColFtrC"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 sortIcon="ALARM_MINOR_MEDIUM"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 tableFooterText="TblFtrC"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="c"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col3d"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="D"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 footerText="ColFtrD"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 sortIcon="ALARM_DOWN_MEDIUM"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 tableFooterText="TblFtrD"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="d"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 &lt;/webuijsf:table&gt;</code><span style="font-family: monospace;"></span><br>
 <h3 style="color: rgb(0, 0, 0);">faces_config.xml Entry for
 Managed Beans</h3>
 <span style="color: rgb(0, 0, 0);">The examples use the <a
 href="table.html#Example:_TableBean_">TableBean</a>
 managed bean, which requires the following entry to be added to the </span><code
 style="color: rgb(0, 0, 0);">faces_config.xml</code><span
 style="color: rgb(0, 0, 0);"> file. </span><br>
 <br>
 <code>&lt;!DOCTYPE faces-config PUBLIC <br>
 &nbsp;&nbsp;&nbsp; '-//Sun Microsystems, Inc.//DTD JavaServer Faces
 Config 1.0//EN' <br>
 &nbsp;&nbsp;&nbsp; 'http://java.sun.com/dtd/web-facesconfig_1_1.dtd'&gt;<br>
 <br>
 &lt;faces-config&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;managed-bean&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;The
 backing bean for the table example&lt;/description&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-name&gt;TableBean&lt;/managed-bean-name&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-class&gt;table.TableBean&lt;/managed-bean-class&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-scope&gt;session&lt;/managed-bean-scope&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/managed-bean&gt;<br>
 &lt;/faces-config&gt;</code>
 <br>
]]></description>
    </tag>

    <tag>
        <name>tableRowGroup</name>

        <description><![CDATA[/**
 Use the <code>webuijsf:tableRowGroup</code>
 tag to define the rows of a table, inside a <a href="table.html"><code>webuijsf:table</code></a>
 tag.&nbsp; A table must include at least one tableRowGroup component to
 contain the table row content. <br>
 <p style="color: rgb(0, 0, 0);">The <code>webuijsf:table</code>
 tag is
 used to define the structure and actions of the table, and is a
 container for <code>webuijsf:tableRowGroup</code>
 tags.&nbsp; The <code>webuijsf:tableRowGroup</code> tag is a container for <code></code><a
 href="tableColumn.html"><code>webuijsf:tableColumn</code></a><code></code>
 tags, which are used&nbsp;<code></code>to define the
 columns of the table.&nbsp; The <a href="table.html">documentation
 for the <code>webuijsf:table</code> tag</a> contains detailed information
 about the table component.&nbsp; This page provides details about how
 to create table rows only.<br>
 </p>
 <p style="color: rgb(0, 0, 0);">When you use one <code>webuijsf:tableRowGroup</code>
 tag in the <code>webuijsf:table</code> tag, you create a basic table.&nbsp;
 Examples of basic tables are shown in the <a table.html=""><code>webuijsf:table</code>
 tag documentation</a>. When
 you use multiple <code>webuijsf:tableRowGroup</code> tags, you create a
 group table, which is discussed in detail in this document.<br>
 </p>
 <p style="color: rgb(0, 0, 0);">
 </p>
 <h3 style="color: rgb(0, 0, 0);">HTML Elements and Layout</h3>
 <span style="color: rgb(0, 0, 0);">The tableRowGroup component is used
 to define attributes for XHTML </span><code
 style="color: rgb(0, 0, 0);">&lt;tr&gt;</code>
 <span style="color: rgb(0, 0, 0);">&nbsp;
 elements, which
 are used
 to display&nbsp;rows of data. You can specify multiple <code>webuijsf:tableRowGroup</code>
 tags to create groups of rows. Each group is visually separate from the
 other groups, but all rows of the table can be sorted and filtered at
 once, within their respective groups. <br>
 <br>
 UI guidelines recommend
 that
 column headers and table column footers are
 only rendered
 once for each table. Column headers typically appear at the top of the
 table,
 below the Action Bar and above all row groups. Table column footers
 appear only at the
 bottom of the table, below all row groups. The column headers and
 table column footers are defined in the <code>headerText</code>
 and <code>tableFooterText</code> attributes of the <code>webuijsf:tableColumn</code>
 tags. To ensure that these headers and footers are rendered only once,
 you should define the&nbsp;
 <code>headerText</code>
 and <code>tableFooterText</code> attributes only in the <code>webuijsf:tableColumn</code>
 tags inside the
 first <code>webuijsf:tableRowGroup</code> tag in the
 table.&nbsp; See the </span><a href="tableColumn.html"
 style="color: rgb(0, 0, 0);"><code>webuijsf:tableColumn</code>
 documentation</a><span style="color: rgb(0, 0, 0);"> for more
 information. </span><br style="color: rgb(0, 0, 0);">
 <span style="color: rgb(0, 0, 0);"><br>
 The following <a href="tableRowGroup.html#diagram">diagram</a>
 shows the placement of the areas of a table, and highlights the areas
 that are defined with <code>webuijsf:tableRowGroup</code> tags. This diagram
 depicts two row groups.</span><br>
 <br>
 <a name="diagram"></a><br>
 <table style="text-align: left; width: 100%;" border="1" cellpadding="2"
 cellspacing="2">
 <tbody>
 <tr style="color: rgb(204, 204, 204);">
 <td
 style="vertical-align: top; background-color: rgb(153, 153, 153);"
 rowspan="1" colspan="1">Title
 Bar&nbsp;</td>
 </tr>
 <tr style="color: rgb(153, 153, 153);">
 <td
 style="vertical-align: top; background-color: rgb(208, 208, 208);"
 rowspan="1" colspan="1">Action
 Bar (top)&nbsp;&nbsp;</td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(210, 224, 235);">
 <table style="text-align: left; height: 223px; width: 100%;"
 border="1" cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
 Header <br>
 </td>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
 Header<br>
 </td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(210, 224, 235);"
 rowspan="1" colspan="2">Group
 Header Bar (specified with <code>headerText</code>
 attribute and <code>header</code> facet in first <code>webuijsf:tableRowGroup</code>
 tag) </td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(210, 224, 235);">Table
 data
 specified in <code>webuijsf:tableRowGroup</code><br>
 <code> <br>
 <br>
 <br>
 </code></td>
 <td
 style="vertical-align: top; background-color: rgb(210, 224, 235);">Table
 data
 specified in <code>webuijsf:tableRowGroup</code><br>
 </td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
 Footer</td>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
 Footer <br>
 </td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(210, 224, 235);"
 rowspan="1" colspan="2">Group
 Footer Bar&nbsp; <br>
 </td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(163, 184, 203);"
 rowspan="1" colspan="2">Group Header Bar<br>
 </td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(163, 184, 203);">Table
 data specified in <code>webuijsf:tableRowGroup</code><br>
 <br>
 <br>
 <br>
 <br>
 </td>
 <td
 style="vertical-align: top; background-color: rgb(163, 184, 203);">Table
 data specified in <code>webuijsf:tableRowGroup</code><br>
 </td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
 Footer<br>
 </td>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
 Footer</td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(163, 184, 203);"
 rowspan="1" colspan="2">Group Footer Bar<br>
 </td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Table
 Column Footer </td>
 <td
 style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Table
 Column Footer </td>
 </tr>
 </tbody>
 </table>
 <big><span style="color: rgb(0, 0, 0);"> </span></big></td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(208, 208, 208);"><span
 style="color: rgb(153, 153, 153);">Action
 Bar (bottom)&nbsp;</span><small> </small> </td>
 </tr>
 <tr>
 <td
 style="vertical-align: top; background-color: rgb(153, 153, 153);"
 rowspan="1" colspan="1"><span style="color: rgb(0, 0, 0);"><span
 style="color: rgb(204, 204, 204);">Footer</span><code></code></span><code>
 </code></td>
 </tr>
 </tbody>
 </table>
 <span style="text-decoration: line-through;"></span><br>
 <h4 style="color: rgb(0, 0, 0);">Group Header Bar</h4>
 <span style="color: rgb(0, 0, 0);">The Group Header Bar displays
 a header by default at the top of each group of rows.&nbsp; The text of
 the group header
 is specified with the <code>headerText</code> attribute. You can
 specify a separate component to provide header content by using the <code>header</code>
 facet, which overrides the <code>headerText</code> attribute.&nbsp;
 You can
 use the following <code>webuijsf:tableRowGroup</code> attributes to change
 the appearance of the group header:<br>
 </span>
 <ul style="color: rgb(0, 0, 0);">
 <li>
 <p><code>aboveColumnHeader</code>
 set to true makes the group header display above the column header.</p>
 </li>
 <li>
 <p><code>selectMultipleToggleButton</code>
 set to true adds a checkbox that allows users to
 select and deselect all rows in the group</p>
 </li>
 <li>
 <p><code>collapsed</code>
 set to true causes the group to be rendered with the rows hidden, and
 only the group header is visible.&nbsp; </p>
 <p> </p>
 </li>
 <li>
 <p><code>groupToggleButton</code>
 set to true adds a button image that allows users to expand and
 collapse
 the group of rows. When the group collapses, all the rows are hidden
 and only the header is visible. </p>
 <p> </p>
 </li>
 <li>
 <p><code>extraHeaderHtml</code>
 can be used to append HTML code to the <code>&lt;tr&gt;</code> element
 that is rendered for the group header</p>
 </li>
 </ul>
 <span style="color: rgb(0, 0, 0);">Note: Detailed descriptions of
 the
 attributes are in the attributes table at the end of this document.<br>
 </span>
 <h4 style="color: rgb(0, 0, 0);">Group Footer Bar</h4>
 <p style="color: rgb(0, 0, 0);">The Group Footer Bar
 displays an optional footer below each group of rows. The text of the
 group footer is specified with the <code>footerText</code> attribute.
 You can specify a separate component to provide the footer content by
 using the <code>footer</code> facet, which overrides the <code>footerText</code>
 attribute.&nbsp; You can use the following
 <code>webuijsf:tableRowGroup</code>
 attributes to change
 the appearance of the group footer:<br>
 <code><br>
 </code></p>
 <ul style="color: rgb(0, 0, 0);">
 <li><code>aboveColumnFooter</code>
 set to true makes the group footer display above the column footer.</li>
 <li>
 <p>&nbsp;<code>extraFooterHtml</code> can be used to
 append HTML code to the <code>&lt;tr&gt;</code> element that is
 rendered for the group footer</p>
 </li>
 </ul>
 <h4 style="color: rgb(0, 0, 0);">Table Data</h4>
 <p><span style="color: rgb(0, 0, 0);">The table data is specified with
 the <code>sourceData</code> and <code>sourceVar</code> attributes.
 The <code>sourceData</code> attribute specifies the source of the data
 that populates the table. The <code>sourceVar</code> attribute
 specifies the name of the request-scope variable to use for exposing
 the model data when iterating over table rows. Each table in a JSP page
 must use a unique <code>sourceVar</code> value. See the <a
 href="#Lifecycle">Life Cycle section </a>for more information about
 these attributes.&nbsp; &nbsp; </span><span
 style="color: rgb(102, 102, 204);"><span
 style="color: rgb(255, 153, 0);">
 </span></span><span style="color: rgb(102, 102, 204);"> </span></p>
 <h3>Facets</h3>
 <span style="color: rgb(0, 0, 0);">The </span><code
 style="color: rgb(0, 0, 0);">webuijsf:tableRowGroup</code><span
 style="color: rgb(0, 0, 0);"> tag supports the following facets,
 which
 allow you to customize the
 layout&nbsp; of the component.</span><br style="color: rgb(0, 0, 0);">
 <br style="color: rgb(0, 0, 0);">
 <table style="width: 100%; color: rgb(0, 0, 0);" border="1"
 cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;"><span style="font-weight: bold;">Facet
 Name</span><code><br>
 </code></td>
 <td style="vertical-align: top; font-weight: bold;">Table Item
 Implemented by the Facet<br>
 </td>
 </tr>
 <tr>
 <td><code>footer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 <br>
 </code></td>
 <td>Footer that applies to the group of rows defined by the <code>webuijsf:tableRowGroup</code>
 tag.&nbsp; This facet can be used to&nbsp; replace the default footer.<br>
 </td>
 </tr>
 <tr>
 <td><code>header</code></td>
 <td>Header that applies to the group of rows defined by the <code>webuijsf:tableRowGroup</code>
 tag. This facet can be used to replace the default header. </td>
 </tr>
 </tbody>
 </table>
 <br>
 <h3 style="color: rgb(0, 0, 0);">Client Side JavaScript
 Functions</h3>
 <span style="color: rgb(0, 0, 0);">See the </span><a
 href="table.html#JavaScript" style="color: rgb(0, 0, 0);"><code>webuijsf:table</code>
 tag's
 JavaScript documentation</a><span style="color: rgb(0, 0, 0);">.&nbsp;
 The same functions are used for the
 <code>webuijsf:tableRowGroup</code> tag.</span><br>
 <ul>
 </ul>
 <h3>Notes for the <code>webuijsf:tableRowGroup</code> tag</h3>
 All examples assume that<span style="color: rgb(102, 102, 204);"></span>
 the <code>webuijsf:table</code> tag is contained within a HTML <code>&lt;form&gt;</code>
 element so actions can<span style="text-decoration: line-through;"></span><span
 style="color: rgb(102, 102, 204);"></span> submit form data.
 For basic table and sort
 examples,<span style="text-decoration: line-through;"></span>
 see the <a href="table.html"><code>webuijsf:table</code>
 tag documentation</a>
 and <a href="tableColumn.html"><code>webuijsf:tableColumn</code>
 documentation</a>. <br>
 <h4><span style="font-weight: bold;"><a name="Lifecycle"></a>Life Cycle</span></h4>
 <span style="text-decoration: line-through;"></span>The <code>sourceData</code>
 property of tableRowGroup is invoked at
 least twice during
 the JavaServer Faces life cycle. The <code>sourceData</code> is
 invoked once during
 one of the Apply Request Values, Process Validations, or Update Model
 Values phases, and once during the Render Response phase. In order to
 process the
 previously displayed children during the Apply Request Values, Process
 Validations, or Update Model Values phases,
 the table
 must use the same DataProvider that was used to render the previous
 page. For
 example, suppose that sorting, filtering, and pagination were applied
 on the previous page, and
 rows 10-20 of 1000 were currently displayed. You want to update only
 the currently
 displayed components, rows 10-20. To do this, you must not update the
 DataProvider until the Invoke Application phase or Render Response
 phases, when it is safe to render new
 data.<br>
 <p style="color: rgb(0, 0, 0);">Note that if the underlying
 DataProvider has changed in any way, processing of the previously
 displayed children might not be possible during the Apply Request
 Values, Process
 Validations, or Update Model Values phases. In addition, if the
 DataProvider is null or empty, no children will be processed and
 their <code>processDecodes()</code>, <code>processValidators()</code>,
 and <code>processUpdates()</code> methods will not be invoked. If a
 component has not been decoded (in the Apply Request Values phase),
 action events might not be received and component properties such as
 hyperlink query parameters cannot be retrieved.&nbsp; Also, if a
 component has not been updated (in the Update Model Values phase),
 submitted values cannot be retrieved for checkboxes, radio buttons,
 etc. </p>
 <span style="color: rgb(0, 0, 0);">When obtaining data is
 expensive, consider caching the DataProvider. A cached DataProvider
 persists across requests if the backing bean uses session scope, or if
 the application uses server-side state saving and the <code>TableRowGroup.setSourceData</code>
 method is set. Note that a phase listener may be used to initialize the
 DataProvider during the Invoke Application Phase. However, when the
 underlying DataProvider has changed in any way, UI guidelines recommend
 that pagination is reset to the first page. You can use the
 tableRowGroup component's <code>setFirst()</code> method to set the
 first row to be displayed.<br>
 <br>
 </span>
 <h3 style="color: rgb(0, 0, 0);"><a name="Examples"></a>Examples</h3>
 <span style="color: rgb(0, 0, 0);">The following examples use a
 backing bean called </span><a href="table.html#Example:_TableBean_"
 style="color: rgb(0, 0, 0);">TableBean</a><span
 style="color: rgb(0, 0, 0);">,
 which is shown in the <code>webuijsf:table</code> tag documentation. </span><a
 href="tableRowGroup.html#UtilityClasses" style="color: rgb(0, 0, 0);">Utility
 classes</a><span style="color: rgb(0, 0, 0);"> used in the examples are
 included
 in this <code>webuijsf:tableRowGroup</code> page, after the examples.&nbsp;
 Additional examples are shown in the </span><code
 style="color: rgb(0, 0, 0);"><a href="table.html#Examples">webuijsf:table</a></code><span
 style="color: rgb(0, 0, 0);">
 and </span><code style="color: rgb(0, 0, 0);"><a
 href="tableColumn.html">webuijsf:tableColumn</a></code><span
 style="color: rgb(0, 0, 0);">
 documents.</span><br style="color: rgb(0, 0, 0);">
 <br style="color: rgb(0, 0, 0);">
 <span style="font-weight: bold; color: rgb(0, 0, 0);">Examples in
 this file:<br>
 <br>
 </span>
 <div style="margin-left: 40px; color: rgb(0, 0, 0);"><a
 href="#GroupTable">Example 1: Group Table</a><br>
 <p><a href="#DynamicTable">Example 2: Dynamic Table</a><br>
 </p>
 <p><a href="#DynamicGroupTable">Example 3: Dynamic Group Table</a><br>
 </p>
 </div>
 <span style="font-weight: bold; color: rgb(0, 0, 0);">
 </span>
 <p style="font-weight: bold; color: rgb(0, 0, 0);">Supporting
 files:</p>
 <div style="margin-left: 40px; color: rgb(0, 0, 0);">
 <p><a href="table.html#Example:_TableBean_">TableBean
 backing bean in <code>webuijsf:table</code> documentation<br>
 </a></p>
 <p><a href="tableRowGroup.html#UtilityClasses">Utility
 classes used in the examples</a></p>
 </div>
 <h4><a name="GroupTable"></a>Example 1: Group Table<br>
 </h4>
 <span style="text-decoration: line-through;"></span><span
 style="color: rgb(0, 0, 0);">This example shows how to
 create a group table. A group table contains rows of data that are
 arranged in discrete sections or groups
 within the table.&nbsp; In a
 basic table, each column typically has a header and perhaps a footer.
 However, in a group table, each group of rows can have its own header
 and footer. In addition, a group table can display table column footers
 and
 an overall table footer below all
 data groups.&nbsp; The table column footers are specified in <code>webuijsf:tableColumn</code>
 tags and the overall footer is specified in the <code>webuijsf:table</code>
 tag. See the <a href="#diagram">diagram </a>of the
 table areas. </span><br style="color: rgb(0, 0, 0);">
 <br style="color: rgb(0, 0, 0);">
 <span style="color: rgb(0, 0, 0);">Additional
 attributes should be
 used in the <code>webuijsf:tableColumn</code> tags within each <code>webuijsf:tableRowGroup</code>
 tag to specify
 functionality. For
 example, the <code>selectId</code> and <code>sort</code>&nbsp;
 attributes allow column
 headers to sort on all row groups at once.&nbsp; <br>
 <br>
 The example uses the backing bean called TableBean for the table data.
 See the
 </span><a href="table.html#Example:_TableBean_"
 style="color: rgb(0, 0, 0);">TableBean
 backing bean in <code>webuijsf:table</code> documentation</a><span
 style="color: rgb(0, 0, 0);">.</span><br style="color: rgb(0, 0, 0);">
 <br style="color: rgb(0, 0, 0);">
 <span style="color: rgb(0, 0, 0);">Note: UI guidelines recommend
 that items should not remain selected when they cannot be seen by the
 user. Using the
 <code>com.sun.webui.jsf.event.TableSelectPhaseListener</code> object
 ensures that rows that are hidden from view are
 deselected because the phase listener clears the table state after the
 rendering phase. Although
 pagination is not used for a group table, the <code>TableSelectPhaseListener</code>
 object is used in this example in the Select util, which is shown in </span><a
 href="table.html#Select.java" style="color: rgb(0, 0, 0);">Select.java
 in the <code>webuijsf:table</code> documentation</a><span
 style="color: rgb(0, 0, 0);">.&nbsp; Also refer to the JavaDoc
 for <code>TableSelectPhaseListener</code> for more information.&nbsp; </span><br
 style="color: rgb(0, 0, 0);">
 <br>
 <code>&lt;!-- Group Table --&gt;<br>
 &lt;webuijsf:table id="table1"<br>
 &nbsp;&nbsp;&nbsp; clearSortButton="true"<br>
 &nbsp;&nbsp;&nbsp; deselectMultipleButton="true"<br>
 &nbsp;&nbsp;&nbsp; selectMultipleButton="true"<br>
 &nbsp;&nbsp;&nbsp; sortPanelToggleButton="true"<br>
 &nbsp;&nbsp;&nbsp; footerText="Table Footer"&gt;<br>
 <br>
 &nbsp; &lt;!-- Title --&gt;<br>
 &nbsp; &lt;f:facet name="title"&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText text="Group Table"/&gt;<br>
 &nbsp; &lt;/f:facet&gt;<br>
 <br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 binding="#{TableBean.groupB.tableRowGroup}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="Group Footer"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Group Header"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupB.select.selectedState}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectMultipleToggleButton="true"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groupToggleButton="true"&gt;<br>
 <br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col0"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 extraHeaderHtml="nowrap='nowrap'"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 extraFooterHtml="nowrap='nowrap'"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 extraTableFooterHtml="nowrap='nowrap'"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="ColFtr"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 sort="#{TableBean.groupB.select.selectedState}"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:checkbox id="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 onClick="setTimeout('initAllRows()', 0)"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupB.select.selected}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selectedValue="#{TableBean.groupB.select.selectedValue}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 extraHeaderHtml="nowrap='nowrap'"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="Column Footer"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Last Name"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowHeader="true"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="last"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="first"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="Column Footer"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="First Name"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="first"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 <br>
 &nbsp; &lt;webuijsf:tableRowGroup id="rowGroup2"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 binding="#{TableBean.groupC.tableRowGroup}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; collapsed="true"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupC.select.selectedState}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectMultipleToggleButton="true"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupC.names}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groupToggleButton="true"&gt;<br>
 <br>
 &nbsp;&nbsp;&nbsp; &lt;!-- Row group header --&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;f:facet name="header"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:panelGroup id="groupHeader"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:markup tag="span"
 extraAttributes="class='#{themeStyles.TABLE_GROUP_HEADER_LEFT}'"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:staticText styleClass="#{themeStyles.TABLE_GROUP_HEADER_TEXT}" text="Group Header"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:markup&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:markup tag="span"
 extraAttributes="class='#{themeStyles.TABLE_GROUP_HEADER_RIGHT}'"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:staticText styleClass="#{themeStyles.TABLE_GROUP_MESSAGE_TEXT}" text="Right-Aligned
 Text"/&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:markup&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:panelGroup&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>
 <br>
 &nbsp;&nbsp;&nbsp; &lt;!-- Row group footer --&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;f:facet name="footer"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 styleClass="#{themeStyles.TABLE_GROUP_FOOTER_TEXT}" text="Group Footer"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>
 <br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col0"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 extraHeaderHtml="nowrap='nowrap'"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 extraFooterHtml="nowrap='nowrap'"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 extraTableFooterHtml="nowrap='nowrap'"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="ColFtr"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 sort="#{TableBean.groupC.select.selectedState}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 tableFooterText="TblColFtr"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:checkbox id="select"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 onClick="setTimeout('initAllRows()', 0)"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selected="#{TableBean.groupC.select.selected}"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 selectedValue="#{TableBean.groupC.select.selectedValue}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col1"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="Column Footer"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowHeader="true"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="last"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tableFooterText="Table
 Column Footer"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.last}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:tableColumn id="col2"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="first"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="Column Footer"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="first"<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tableFooterText="Table
 Column Footer"&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:staticText
 text="#{name.value.first}"/&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:tableColumn&gt;<br>
 &nbsp; &lt;/webuijsf:tableRowGroup&gt;<br>
 &lt;/webuijsf:table&gt;</code><br>
 <br>
 <span style="font-weight: bold;">select.js</span><br>
 <br>
 This example shows the contents of the <code>select.js</code><span
 style="font-weight: bold;"> </span>file used in the example above.<br>
 <code><br>
 // Use this function to initialize all rows displayed in the table when
 the<br>
 // state of selected components change (i.e., checkboxes or
 radiobuttons used to<br>
 // de/select rows of the table). This functionality requires the
 selectId <br>
 // property of the tableColumn component to be set.<br>
 // <br>
 // Note: Use setTimeout when invoking this function. This will ensure
 that <br>
 // checkboxes and radiobutton are selected immediately, instead of
 waiting for <br>
 // the onClick event to complete. For example: <br>
 //<br>
 // onClick="setTimeout('initAllRows(); disableActions()', 0)"<br>
 function initAllRows() {<br>
 &nbsp;&nbsp;&nbsp; // Disable table actions by default.<br>
 &nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
 &nbsp;&nbsp;&nbsp; table.initAllRows();<br>
 }</code><br>
 <h4><a name="DynamicTable"></a>Example 2: Dynamic Table<br>
 </h4>
 <span style="color: rgb(0, 0, 0);">This example shows how to use
 the <code>webuijsf:table</code> tag to create a binding to a backing
 bean to
 dynamically create a table layout. The dynamic table is created as
 needed and can be changed each time the page is rendered.&nbsp;&nbsp; </span><br
 style="color: rgb(0, 0, 0);">
 <br style="color: rgb(0, 0, 0);">
 <code style="color: rgb(0, 0, 0);">&lt;webuijsf:table id="table1"
 binding="#{DynamicTableBean.table}"/&gt;<br>
 <br>
 <br>
 </code><span style="color: rgb(0, 0, 0);">The backing bean,
 DynamicTableBean, is
 shown in the following </span><a href="#DynamicTableBean"
 style="color: rgb(0, 0, 0);"><code>DynamicTableBean.java</code></a><span
 style="color: rgb(0, 0, 0);"> class. This bean is used only to
 create the table layout, and shows how to use the tableRowGroup
 component directly
 through Java code instead of through the JSP tag&nbsp; </span><code
 style="color: rgb(0, 0, 0);">webuijsf:tableRowGroup.</code><span
 style="color: rgb(0, 0, 0);"> The <a href="#Dynamic.java">Dynamic.java</a>
 utility class provides the functionality for adding properties to the
 table.&nbsp; The table
 also uses methods that are
 defined in the </span><a href="table.html#Example:_TableBean_"
 style="color: rgb(0, 0, 0);">TableBean
 shown in the <code>webuijsf:table</code> documentation</a><span
 style="color: rgb(0, 0, 0);">.</span><br>
 <h4><code style="color: rgb(102, 102, 204);"><a name="DynamicTableBean"></a><span
 style="color: rgb(0, 0, 0);"></span></code><span
 style="color: rgb(0, 0, 0);">DynamicTableBean.java Backing Bean</span><br>
 </h4>
 <h4><code style="font-weight: normal;">package table;<br>
 <br>
 import com.sun.webui.jsf.component.Table;<br>
 import com.sun.webui.jsf.component.TableRowGroup;<br>
 <br>
 import table.util.Dynamic;<br>
 <br>
 // Backing bean for dynamic table examples.<br>
 //<br>
 // Note: To simplify the example, this bean is used only to create the
 table <br>
 // layout. The resulting table will use methods already defined in
 TableBean.<br>
 public class DynamicTableBean {<br>
 &nbsp;&nbsp;&nbsp; private Dynamic dynamic = null; // Dynamic util.<br>
 &nbsp;&nbsp;&nbsp; private Table table = null; // Table component.<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Default constructor.<br>
 &nbsp;&nbsp;&nbsp; public DynamicTableBean() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dynamic = new Dynamic();<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get Table component.<br>
 &nbsp;&nbsp;&nbsp; public Table getTable() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (table == null) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
 Get table row group.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 TableRowGroup rowGroup1 = dynamic.getTableRowGroup("rowGroup1",<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupB.names}",<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupB.select.selectedState}", null);<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
 Set table row group properties.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 dynamic.setTableRowGroupChildren(rowGroup1,<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupB.select.selectedState}",<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupB.select.selected}",<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupB.select.selectedValue}",<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupB.actions.action}", true);<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
 Get table.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 table = dynamic.getTable("table1", "Dynamic Table");<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 table.getChildren().add(rowGroup1);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return table;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set Table component.<br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp; // @param table The Table component.<br>
 &nbsp;&nbsp;&nbsp; public void setTable(Table table) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.table = table;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 }</code><br>
 </h4>
 <code>
 </code>
 <h4><a name="DynamicGroupTable"></a>Example 3: Dynamic Group Table<br>
 </h4>
 This example shows how to<span style="color: rgb(0, 0, 0);"> use
 the <code>webuijsf:table</code> tag to create a binding to a backing
 bean to
 dynamically create a group table layout. </span><span
 style="text-decoration: line-through; color: rgb(0, 0, 0);"></span><span
 style="color: rgb(0, 0, 0);">The dynamic group table is created
 as
 needed and can be changed each time the page is rendered.</span><br
 style="color: rgb(0, 0, 0);">
 <br style="color: rgb(0, 0, 0);">
 <code style="color: rgb(0, 0, 0);">&lt;webuijsf:table id="table1"
 binding="#{DynamicGroupTableBean.table}"/&gt;<br>
 <br>
 </code><span style="color: rgb(0, 0, 0);">The backing bean,
 DynamicGroupTableBean, is
 shown in the following </span><a href="#DynamicGroupTableBean"
 style="color: rgb(0, 0, 0);"><code>DynamicGroupTableBean.java</code></a><span
 style="color: rgb(0, 0, 0);"> class. This bean is used only to
 create the table layout, and shows how to use the tableRowGroup
 component directly
 through Java code instead of through the JSP tag&nbsp; </span><code
 style="color: rgb(0, 0, 0);">webuijsf:tableRowGroup.</code><span
 style="color: rgb(0, 0, 0);"> The <code><a
 href="tableRowGroup.html#Dynamic.java">Dynamic.java</a></code>
 utility
 class provides the functionality for adding
 properties to the table.&nbsp; The table also
 uses methods that are
 defined in the </span><a href="table.html#Example:_TableBean_"
 style="color: rgb(0, 0, 0);">TableBean
 shown in the <code>webuijsf:table</code> documentation</a><span
 style="color: rgb(0, 0, 0);">.</span><br>
 <h4><code style="color: rgb(102, 102, 204);"><a
 name="DynamicGroupTableBean"></a><span style="color: rgb(0, 0, 0);"></span></code><span
 style="color: rgb(0, 0, 0);">DynamicGroupTableBean.java Backing Bean</span></h4>
 <code>package table;<br>
 <br>
 import table.util.Dynamic;<br>
 <br>
 import com.sun.webui.jsf.component.StaticText;<br>
 import com.sun.webui.jsf.component.Table;<br>
 import com.sun.webui.jsf.component.TableRowGroup;<br>
 <br>
 // Backing bean for dynamic group table examples.<br>
 //<br>
 // Note: To simplify the example, this bean is used only to create the
 table <br>
 // layout. The resulting table will use methods already defined in
 TableBean.<br>
 public class DynamicGroupTableBean {<br>
 &nbsp;&nbsp;&nbsp; private Dynamic dynamic = null; // Dynamic util.<br>
 &nbsp;&nbsp;&nbsp; private Table table = null; // Table component.<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Default constructor.<br>
 &nbsp;&nbsp;&nbsp; public DynamicGroupTableBean() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dynamic = new Dynamic();<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get Table component.<br>
 &nbsp;&nbsp;&nbsp; public Table getTable() {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (table == null) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
 Get table row group.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 TableRowGroup rowGroup1 = dynamic.getTableRowGroup("rowGroup1",<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupB.names}",<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupB.select.selectedState}",<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "Group Header");<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 TableRowGroup rowGroup2 = dynamic.getTableRowGroup("rowGroup2",<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupC.names}",<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupC.select.selectedState}",<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "Group Header");<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
 Set table row group properties.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 dynamic.setTableRowGroupChildren(rowGroup1, <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupB.select.selectedState}", <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupB.select.selected}",<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupB.select.selectedValue}", null, true);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 dynamic.setTableRowGroupChildren(rowGroup2, <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupC.select.selectedState}", <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupC.select.selected}",<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{TableBean.groupC.select.selectedValue}", null, false);<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
 Set select and row group toggle buttons.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 rowGroup1.setSelectMultipleToggleButton(true); <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 rowGroup2.setSelectMultipleToggleButton(true); <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 rowGroup1.setGroupToggleButton(true);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 rowGroup2.setGroupToggleButton(true);<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
 Get table.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 table = dynamic.getTable("table1", null);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 table.getChildren().add(rowGroup1);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 table.getChildren().add(rowGroup2);<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
 Add title facet.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 StaticText title = new StaticText();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 title.setText("Dynamic Group Table");<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 table.getFacets().put(Table.TITLE_FACET, title);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return table;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set Table component. <br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp; // @param table The Table component.<br>
 &nbsp;&nbsp;&nbsp; public void setTable(Table table) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.table = table;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 }</code><br>
 <h3 style="color: rgb(0, 0, 0);">faces_config.xml Entry for
 Managed Beans</h3>
 The examples are based on managed beans, such as the example
 below, added to the
 <code>faces_config.xml</code> file.<br>
 <span style="color: rgb(255, 153, 0);"><br>
 </span><code>&lt;!DOCTYPE faces-config PUBLIC <br>
 &nbsp;&nbsp;&nbsp; '-//Sun Microsystems, Inc.//DTD JavaServer Faces
 Config 1.0//EN' <br>
 &nbsp;&nbsp;&nbsp; 'http://java.sun.com/dtd/web-facesconfig_1_1.dtd'&gt;<br>
 <br>
 &lt;faces-config&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;managed-bean&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;Backing
 bean for the group table example&lt;/description&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-name&gt;TableBean&lt;/managed-bean-name&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-class&gt;table.TableBean&lt;/managed-bean-class&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-scope&gt;session&lt;/managed-bean-scope&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/managed-bean&gt;<br>
 <br>
 &nbsp;&nbsp;&nbsp; &lt;managed-bean&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;Backing
 bean for the dynamic table example&lt;/description&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-name&gt;DynamicTableBean&lt;/managed-bean-name&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-class&gt;table.DynamicTableBean&lt;/managed-bean-class&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-scope&gt;session&lt;/managed-bean-scope&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/managed-bean&gt;<br>
 <br>
 &nbsp;&nbsp;&nbsp; &lt;managed-bean&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;Backing
 bean for the dynamic group table example&lt;/description&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-name&gt;DynamicGroupTableBean&lt;/managed-bean-name&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-class&gt;table.DynamicGroupTableBean&lt;/managed-bean-class&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;managed-bean-scope&gt;session&lt;/managed-bean-scope&gt;<br>
 &nbsp;&nbsp;&nbsp; &lt;/managed-bean&gt;<br>
 &lt;/faces-config&gt;</code><br>
 <h3><a name="UtilityClasses"></a>Utility Classes used in the examples</h3>
 The&nbsp; following utility class is used in the group table
 examples shown in this page.<br>
 <p><a href="table.html#Group.java"><code></code></a></p>
 <a href="tableRowGroup.html#Dynamic.java">Dynamic.java</a><br>
 <br>
 The following utility classes are shown in the <code>webuijsf:table</code>
 documentation, and used in the examples for the table
 tags<code> webuijsf:table</code>, <code>webuijsf:tableRowGroup</code>, and <code>webuijsf:tableColumn.<br>
 </code><br>
 <code></code><a href="table.html#Group.java">Group.java
 </a><br>
 <a href="table.html#Name.java">Name.java
 </a><a href="table.html#Group.java"><code></code></a><br>
 <a href="table.html#Select.java">Select.java
 </a><br>
 <h4><a name="Dynamic.java"></a><span style="color: rgb(0, 0, 0);">Dynamic.java
 Utility Class</span><br>
 </h4>
 <code>package table.util;<br>
 <br>
 import com.sun.webui.jsf.component.Checkbox;<br>
 import com.sun.webui.jsf.component.Hyperlink;<br>
 import com.sun.webui.jsf.component.StaticText;<br>
 import com.sun.webui.jsf.component.Table;<br>
 import com.sun.webui.jsf.component.TableColumn;<br>
 import com.sun.webui.jsf.component.TableRowGroup;<br>
 <br>
 import javax.faces.context.FacesContext;<br>
 import javax.faces.component.UIComponent;<br>
 import javax.faces.component.UIParameter;<br>
 import javax.faces.el.ValueBinding;<br>
 <br>
 // This class provides functionality for dynamic tables.<br>
 public class Dynamic {<br>
 &nbsp;&nbsp;&nbsp; public static final String CHECKBOX_ID = "select";<br>
 &nbsp;&nbsp;&nbsp; public static final String HYPERLINK_ID = "link";<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Default constructor.<br>
 &nbsp;&nbsp;&nbsp; public Dynamic() {<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Note: When using tags in a JSP page,
 UIComponentTag automatically creates<br>
 &nbsp;&nbsp;&nbsp; // a unique id for the component. However, when
 dynamically creating <br>
 &nbsp;&nbsp;&nbsp; // components, via a backing bean, the id has not
 been set. In this <br>
 &nbsp;&nbsp;&nbsp; // scenario, allowing JSF to create unique Ids may
 cause problems with<br>
 &nbsp;&nbsp;&nbsp; // Javascript and components may not be able to
 maintain state properly. <br>
 &nbsp;&nbsp;&nbsp; // For example, if a component was assigned "_id6"
 as an id, that means <br>
 &nbsp;&nbsp;&nbsp; // there were 5 other components that also have
 auto-generated ids. Let us <br>
 &nbsp;&nbsp;&nbsp; // assume one of those components was a complex
 component that, as part of <br>
 &nbsp;&nbsp;&nbsp; // its processing, adds an additional non-id'd child
 before redisplaying the<br>
 &nbsp;&nbsp;&nbsp; // view. Now, the id of this component will be
 "_id7" instead of "_id6". <br>
 &nbsp;&nbsp;&nbsp; // Assigning your own id ensures that conflicts do
 not occur.<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get Table component. <br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp; // @param id The component id.<br>
 &nbsp;&nbsp;&nbsp; // @param title The table title text.<br>
 &nbsp;&nbsp;&nbsp; public Table getTable(String id, String title) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get table.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table table = new Table();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 table.setDeselectMultipleButton(true); // Show deselect multiple button.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 table.setSelectMultipleButton(true); // Show select multiple button.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; table.setTitle(title); //
 Set title text.<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return table;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get TableRowGroup component with header.<br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp; // @param id The component id.<br>
 &nbsp;&nbsp;&nbsp; // @param sourceData Value binding expression for
 model data.<br>
 &nbsp;&nbsp;&nbsp; // @param selected Value binding expression for
 selected property.<br>
 &nbsp;&nbsp;&nbsp; // @param header Value binding expression for row
 group header text.<br>
 &nbsp;&nbsp;&nbsp; public TableRowGroup getTableRowGroup(String id,
 String sourceData,<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 String selected, String header) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get table row group.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TableRowGroup rowGroup = new
 TableRowGroup();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowGroup.setId(id); // Set
 id.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 rowGroup.setSourceVar("name"); // Set source var.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 rowGroup.setHeaderText(header); // Set header text.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(rowGroup,
 "selected", selected); // Set row highlight.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(rowGroup,
 "sourceData", sourceData); // Set source data.<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return rowGroup;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get TableColumn component.<br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp; // @param id The component id.<br>
 &nbsp;&nbsp;&nbsp; // @param sort Value binding expression for column
 sort.<br>
 &nbsp;&nbsp;&nbsp; // @param align The field key for column alignment.<br>
 &nbsp;&nbsp;&nbsp; // @param header The column header text.<br>
 &nbsp;&nbsp;&nbsp; // @param selectId The component id used to select
 table rows.<br>
 &nbsp;&nbsp;&nbsp; public TableColumn getTableColumn(String id, String
 sort, String align,<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 String header, String selectId) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get table column.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TableColumn col = new
 TableColumn();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; col.setId(id); // Set id.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; col.setSelectId(selectId);
 // Set id used to select table rows.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; col.setHeaderText(header);
 // Set header text.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; col.setAlignKey(align); //
 Set align key.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(col, "sort",
 sort); // Set sort.<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return col;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get Checkbox component used for select column.<br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp; // @param id The component id.<br>
 &nbsp;&nbsp;&nbsp; // @param selected Value binding expression for
 selected property.<br>
 &nbsp;&nbsp;&nbsp; // @param selectedValue Value binding expression for
 selectedValue property.<br>
 &nbsp;&nbsp;&nbsp; public Checkbox getCheckbox(String id, String
 selected, <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 String selectedValue) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get checkbox.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Checkbox cb = new Checkbox();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cb.setId(id); // Set id here
 and set row highlighting below.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 cb.setOnClick("setTimeout('initAllRows()', 0)");<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(cb,
 "selected", selected); // Set selected.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(cb,
 "selectedValue", selectedValue); // Set selected value.<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return cb;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get Hyperlink component.<br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp; // @param id The component id.<br>
 &nbsp;&nbsp;&nbsp; // @param text Value binding expression for text.<br>
 &nbsp;&nbsp;&nbsp; // @param action Method binding expression for
 action.<br>
 &nbsp;&nbsp;&nbsp; // @param parameter Value binding expression for
 parameter.<br>
 &nbsp;&nbsp;&nbsp; public Hyperlink getHyperlink(String id, String
 text, String action,<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 String parameter) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get hyperlink.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hyperlink hyperlink = new
 Hyperlink();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hyperlink.setId(id); // Set
 id.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(hyperlink,
 "text", text); // Set text.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setMethodBinding(hyperlink,
 "action", action); // Set action.<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create paramerter.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIParameter param = new
 UIParameter();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; param.setId(id + "_param");<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; param.setName("param");<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(param,
 "value", parameter); // Set parameter.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 hyperlink.getChildren().add(param);<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return hyperlink;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Get StaticText component.<br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp; // @param text Value binding expression for text.<br>
 &nbsp;&nbsp;&nbsp; public StaticText getText(String text) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get static text.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StaticText staticText = new
 StaticText();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(staticText,
 "text", text); // Set text.<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return staticText;<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Set TableRowGroup children.<br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp; // @param rowGroup The TableRowGroup component.<br>
 &nbsp;&nbsp;&nbsp; // @param cbSort Value binding expression for cb
 sort.<br>
 &nbsp;&nbsp;&nbsp; // @param cbSelected Value binding expression for cb
 selected property.<br>
 &nbsp;&nbsp;&nbsp; // @param cbSelectedValue Value binding expression
 for cb selectedValue property.<br>
 &nbsp;&nbsp;&nbsp; // @param action The Method binding expression for
 hyperlink action.<br>
 &nbsp;&nbsp;&nbsp; // @param showHeader Flag indicating to display
 column header text.<br>
 &nbsp;&nbsp;&nbsp; public void setTableRowGroupChildren(TableRowGroup
 rowGroup, String cbSort,<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String cbSelected, String
 cbSelectedValue, String action,<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 boolean showHeader) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // UI guidelines recomend no
 headers for second row group.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String header1 = showHeader
 ? "Last Name" : null;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String header2 = showHeader
 ? "First Name" : null;<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get columns.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TableColumn col1 =
 getTableColumn(<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "col0", cbSort, null, null, CHECKBOX_ID);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TableColumn col2 =
 getTableColumn(<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "col1", "#{name.value.last}", "last", header1,
 null);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TableColumn col3 =
 getTableColumn(<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "col2", "#{name.value.first}", "first", header2, null);<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get column components.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Checkbox cb =
 getCheckbox(CHECKBOX_ID, cbSelected, cbSelectedValue);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StaticText firstName =
 getText("#{name.value.first}");<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If action was provided,
 add a hyperlink; otherwise, use static text.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (action != null) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 Hyperlink lastName = getHyperlink(HYPERLINK_ID, <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{name.value.last}", action,<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 "#{name.value.last}");<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 col2.getChildren().add(lastName);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 StaticText lastName = getText("#{name.value.last}");<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 col2.getChildren().add(lastName);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add Children.<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; col1.getChildren().add(cb);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 col3.getChildren().add(firstName);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 rowGroup.getChildren().add(col1);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 rowGroup.getChildren().add(col2);<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 rowGroup.getChildren().add(col3);<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Helper method to set value bindings.<br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp; // @param component The UIComponent to set a value
 binding for.<br>
 &nbsp;&nbsp;&nbsp; // @param name The name of the value binding.<br>
 &nbsp;&nbsp;&nbsp; // @param value The value of the value binding.<br>
 &nbsp;&nbsp;&nbsp; protected void setValueBinding(UIComponent
 component, String name, <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 String value) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value == null) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 return;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FacesContext context =
 FacesContext.getCurrentInstance();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 component.setValueBinding(name, context.getApplication().<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 createValueBinding(value));<br>
 &nbsp;&nbsp;&nbsp; }<br>
 <br>
 &nbsp;&nbsp;&nbsp; // Helper method to set method bindings.<br>
 &nbsp;&nbsp;&nbsp; //<br>
 &nbsp;&nbsp;&nbsp; // @param component The UIComponent to set a value
 binding for.<br>
 &nbsp;&nbsp;&nbsp; // @param name The name of the method binding.<br>
 &nbsp;&nbsp;&nbsp; // @param action The action of the method binding.<br>
 &nbsp;&nbsp;&nbsp; protected void setMethodBinding(UIComponent
 component, String name,<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 String action) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (action == null) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 return;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FacesContext context =
 FacesContext.getCurrentInstance();<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 component.getAttributes().put(name, context.getApplication().<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 createMethodBinding(action, new Class[0]));<br>
 &nbsp;&nbsp;&nbsp; }<br>
 }</code><br>
 <br>
]]></description>
    </tag>

    <tag>
        <name>textArea</name>

        <description><![CDATA[ <p>Use the <code>webuijsf:textArea</code> tag to create a multiple-line
     input field for text.</p>    
 <h3>HTML Elements and Layout</h3>
 <p>The textArea component renders an HTML &lt;textarea&gt; element.</p> 
     <h3>Configuring the <code>webuijsf:textArea</code> Tag</h3>
 <p>Use the <code>text</code> attribute to associate
 the component with a model object that represents the current value,
 by setting the attribute's value to a JavaServer Faces EL expression
     that evaluates to a backing bean or a backing bean property.</p>
     <p>To optionally specify a label for the component, use the
     <code>label</code> attribute, or specify a label facet.</p>
     <h3>Facets</h3>
     <ul>
     <li><code>label</code>: use this facet to specify a custom 
     component for the label.</li>
     <li><code>readOnly</code>: use this facet to specify a custom 
     component for displaying the readOnly value of this component.</li>
     </ul>
     <h3>Theme Identifiers</h3> 
     <p>The input element has a style class "TxtAra", or "TxtAraDis"
     when the field is disabled. If a label attribute is specified, the
     label element's class attribute is set to "LstAln" followed by
     "LblLvl1Txt", "LblLvl2Txt" or "LblLvl3Txt" depending on the label
     level.</p>  
     <h3>Client-side JavaScript functions</h3>
     <p>In all the functions below, <code>&lt;id&gt;</code> should be
     the generated id of the TextArea component. 
     <table cellpadding="2" cellspacing="2" border="1" 
            style="text-align: left; width: 100%;">
     <tbody>
     <tr>
     <td style="vertical-align">
     <code>field_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>
     </td>
     <td style="vertical-align: top">
     Enable/disable the field. Set <code>&lt;disabled&gt;</code>
     to true to disable the component, or false to enable it.
     </td>
     </tr>
     <tr>
     <td style="vertical-align: top">
     <code>field_setValue(&lt;id&gt;, &lt;newValue&gt;)</code>
     </td>
     <td style="vertical-align: top">
     Set the value of the field to <code>&lt;newValue&gt;</code>.
     </td>
     </tr>
     <tr>
       <td style="vertical-align: top">
     <code>field_getValue(&lt;id&gt;)</code>
   </td>
     <td style="vertical-align: top">Get the value of the field.</td>
     </tr>
     <tr>
       <td style="vertical-align: top">
     <code>field_getInputElement(&lt;id&gt;)</code></td>
     <td style="vertical-align: top">
     Get hold of a reference to the textArea element rendered by this
     component.
     </td>
     </tr>
     <tr>
       <td style="vertical-align: top">
     <code>component_setVisible(&lt;id&gt;)</code>
   </td>
       <td style="vertical-align: top">Hide or show this component.
       </td>
     </tr>
   </tbody>
 </table>
     <h3>Examples</h3>
 <p> This example uses a backing bean <code>FieldTest</code> with a property
     string. The tag generates a textarea with a label "Comment:". The
     rows and columns attributes have been set, to ensure that the
     component has the same size on all browsers. </p> 
 <pre>
      &lt;webuijsf:textArea id="textarea" type="textarea"
                label="Comment:" 
                text="#{FieldTest.string}"
                rows="5" columns="50"/&gt;
 </pre>
]]></description>
    </tag>

    <tag>
        <name>textField</name>

        <description><![CDATA[

<p> Use the <code>webuijsf:textField</code>  tag to create an input field for a single line of text.</p> 

    <h3>HTML Elements and Layout</h3>

<p>The textField component renders an XHTML <code>&lt;input
    type="text"&gt;</code>element.</p>  

    <h3>Configuring the <code>webuijsf:textField</code> Tag</h3>

<p>Use the <code>text</code> attribute to associate the component with
a model object that represents the current value, by setting the
attribute's value to an EL expression that corresponds to a property
of a backing bean.</p>

    <p>To optionally specify a label for the component, use the
    <code>label</code> attribute, or specify a label facet. </p>

    <h3>Facets</h3>

    <ul>
    <li><code>label</code>: use this facet to specify a custom 
    component for the label.</li>
    <li><code>readOnly</code>: use this facet to specify a custom 
    component for displaying the value of this component when it is
    marked as readonly. The default is a <code>webuijsf:staticText</code>. </li>
    </ul>


    <h3>Client-side JavaScript functions</h3>

    <p>In all the functions below, <code>&lt;id&gt;</code> should be
    the generated id of the TextField component. </p>

    <table cellpadding="2" cellspacing="2" border="1" 
           style="text-align: left; width: 100%;">
    <tbody>
    <tr>
    <td style="vertical-align">
    <code>field_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Enable/disable the field. Set <code>&lt;disabled&gt;</code>
    to true to disable the component, or false to enable it.
    </td>
    </tr>
    <tr>
    <td style="vertical-align: top">
    <code>field_setValue(&lt;id&gt;, &lt;newValue&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Set the value of the field to <code>&lt;newValue&gt;</code>.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getValue(&lt;id&gt;)</code>
  </td>
    <td style="vertical-align: top">Get the value of the field.</td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getInputElement(&lt;id&gt;)</code></td>
    <td style="vertical-align: top">
    Get hold of a reference to the input element rendered by this
    component.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>component_setVisible(&lt;id&gt;)</code>
  </td>
      <td style="vertical-align: top">Hide or show this component.
      </td>
    </tr>
  </tbody>
</table>


    <h3>Examples</h3>

<h4>Example 1: Text field with label and required icon</h4>

<p>This example uses a backing bean <code>FieldTest</code> with a
property <code>string</code>. The tag generates a label followed by
text input field. The required attribute is set to true, which causes
an icon to be rendered next to the label to indicate that the
application user must enter a value in the text field. The icon, label
  and input elements are enclosed by a span.</p>
<pre>
     &lt;webuijsf:textField id="textfield" label="Enter a value:" 
               text="#{FieldTest.string}" 
               required="true"/&gt;
</pre>

<h4>Example 2:  Text field using a validator</h4> 

<p>
This example uses a backing bean <code>FieldTest</code> with a
    property <code>number</code>. The number property is an
    <code>int</code>, which means that the value must be converted to
    be displayed. It is not necessary to specify a Converter instance,
    however, since standard JSF conversion deals with this case. A
    Validator has been set to verify that any value entered by the
    user is within a certain range. The HTML elements are rendered as
    in example 1.</p> 

<pre>
     &lt;webuijsf:textField id="test2" label="Enter a number:" 
               text="#{FieldTest.number}" 
               validator="#{FieldTest.checkNumberRange}"/&gt;
</pre>
]]></description>
    </tag>

    <tag>
        <name>themeLinks</name>

        <description><![CDATA[
    Use this tag to render references to theme resource files on a
    page where the <code>webuijsf:head</code> component cannot be used. 

    <h3>Configuring the <code>webuijsf:themeLinks</code> Tag</h3>

<p>If no attributes are specified, the component renders a
    <code>link</code> to the CSS stylesheet class(es) and a
    <code>script</code> element with a reference to the JavaScript
    functions definition file required by the Sun Java Web UI
    Components. </p> 

<p>To suppress rendering of the <code>script</code> element, set the 
<code>javaScript</code> attribute value to false. </p> 

<p>To suppress rendering of the <code>link</code> element, set the 
<code>styleSheet</code> attribute value to false. </p> 

<p>To render a style element with an inline import of the stylesheet
    definitions, set the 
<code>styleSheetInline</code> attribute value to true. </p> 

    <h3>Example</h3>

<pre> 
&lt;head&gt;
&lt;title&gt;ThemeLinks test&lt;/title&gt;
&lt;webuijsf:themeLinks styleSheetInline="true"/&gt;
&lt;/head&gt;
</pre>
]]></description>
    </tag>

    <tag>
        <name>timeStamp</name>

        <description><![CDATA[ <p>Use the <code>webuijsf:timeStamp</code> tag to display a text string that
 contains a time stamp, which indicates the date and time that the current page was
 last updated or displayed. This tag is typically specified as
 part of the <code>webuijsf:masthead</code> 
 tag's <code>statusArea</code> facet. The <code>webuijsf:timeStamp</code> tag produces a
 date/time display that is identical to the <code>webuijsf:masthead</code> tag's <code>dateTime</code>
 attribute.</p>
 <p>
 The <code>statusArea</code> facet overrides the masthead's status area attributes. 
 The <code>webuijsf:timeStamp</code> tag enables you to include the time stamp in the 
 status area, along with your custom components.  The 
 <a href="jobStatus.html"><code>webuijsf:jobStatus</code></a>,
 <a href="notificationPhrase.html"><code>webuijsf:notificationPhrase</code></a>, and <a
 href="alarmStatus.html"><code>webuijsf:alarmStatus</code></a>
 tags enable you to include the other standard status area components as
 well. 
 </p>
 <p>Note that when you use the <code>webuijsf:masthead</code>
 attributes, spacing between the components is handled
 automatically. When you use the 
 <code>webuijsf:alarmStatus</code>, <code>webuijsf:jobStatus</code>, <code>webuijsf:timeStamp</code>,
 and <code>webuijsf:notificationPhrase</code> tags in the <code>statusArea</code> facet,
 you may have to add code to handle the spacing between the components,
 as demonstrated in the example below. </p>
 <h3>HTML Elements and Layout</h3>
 <p>
 The rendered HTML page includes a <code>&lt;span&gt;</code> element
 that contains the text label, date, and time. In the <code>&lt;span&gt;</code>
 element, the class and style attribute values are set to the values
 specified with the <code>webuijsf:timeStamp </code>tag's
 styleclass and style attributes.
 </p>
 <h3>Theme Identifiers</h3>
 <p>None.</p>
 <h3>Client Side Javascript Functions</h3>
 <p>None.</p>
 <h3>Examples</h3>
 <h4>Example 1: Display a time stamp as part of the masthead statusArea facet</h4>
 <p>This example uses <code>webuijsf:panelGroup</code>
 to enclose the tags for the status items. The components
 are also enclosed in <code>f:verbatim</code>
 tags that specify <code>&lt;div&gt;</code>
 elements with a class selector that applies the correct spacing around
 the component in the masthead. </p>
 <pre><code>&lt;webuijsf:masthead id="Masthead" productImageURL="../images/webconsole.png"
         productImageDescription="Java Web Console" userInfo="user_name" 
         serverInfo="server_name"&gt;
      &lt;f:facet name="statusArea"&gt;
        &lt;webuijsf:panelGroup id="statusPanel" separator=""&gt;
          &lt;webuijsf:markup tag="div" styleClass="#{themeStyles.MASTHEAD_STATUS_DIV}"&gt;
            &lt;webuijsf:notificationPhrase text="Important info goes here" /&gt;
            &lt;webuijsf:image icon="DOT" border="0" width="20" height="1" /&gt;
            &lt;webuijsf:jobStatus numJobs="1" /&gt;
          &lt;/webuijsf:markup&gt;
          &lt;webuijsf:markup tag="div" styleClass="#{themeStyles.MASTHEAD_TIME_DIV}"&gt;
            &lt;webuijsf:timeStamp /&gt;
          &lt;/webuijsf:markup&gt;
          &lt;webuijsf:markup tag="div" styleClass="#{themeStyles.MASTHEAD_ALARM_DIV}"&gt;
            &lt;webuijsf:alarmStatus numDownAlarms="0" numCriticalAlarms="1" numMajorAlarms="2" numMinorAlarms="3" /&gt;
          &lt;/webuijsf:markup&gt;
        &lt;/webuijsf:panelGroup&gt;
      &lt;/f:facet&gt;
 &lt;/webuijsf:masthead&gt;
 </code></pre>
]]></description>
    </tag>

    <tag>
        <name>tree</name>

        <description><![CDATA[ <p> Use the <code>webuijsf:tree</code> tag to display a tree structure in the
 	rendered HTML page. The nodes of the tree are defined with 
         <a href="treeNode.html"><code>webuijsf:treeNode</code></a> tags.
         Trees are often used for navigating in a web application.</p>
     <h3>HTML Elements and Layout</h3>
     <p>	The Tree component defines and renders a tree structure. A tree
 	structure is commonly used for navigation through data, as in file
 	system navigators.  The base, or root, of the tree is shown at the top,
 	with the branches going downward. The <code>webuijsf:tree</code> tag defines 
         the root of the tree.</p>
     <p>	The tree is rendered with <code>&lt;div&gt;</code> XHTML elements which
 	define rows as well as nesting within the tree.</p>
     <p> The <code>webuijsf:tree</code> tag is the root of the tree, and is also a 
 	container for the <a href="treeNode.html"><code>webuijsf:treeNode</code></a> tags. The
 	<code>webuijsf:treeNode</code> tags add branches, or nodes, to the tree. The 
         <code>webuijsf:tree</code> tag is also a special type of <code>webuijsf:treeNode</code>
         that has the ability to create a title bar for the root. The root of the tree 
         is only visible when it includes a title bar. </p>
     <p> In the rendered web page, a node can be 
         expanded and collapsed when you click on the small icon next to the node,
         or when you click the node's hyperlink text. 
         In addition, the node is
 	highlighted when you click on the node's hyperlink to indicate the node
 	has focus. 
         <p>When the root of the tree is visible, it does not have handle icons, and cannot be
         expanded and collapsed.</p>
  <h3>Configuring the webuijsf:tree Tag</h3>
     <p> The <code>webuijsf:tree</code> tag creates the topmost tree node and can 
         optionally render a title bar. If the title bar is not rendered,
         the tree component is not visible in the rendered HTML page. See 
         <a href="#DefineTitleBar">Defining a Title Bar</a>
         for more information.</p> 
     <p>	The <code>webuijsf:tree</code> tag provides the ability to render the tree
 	root in any of the following ways:</p>
     <ul><li><p>As a single root, with a title bar to make the root visible. 
             You must specify attributes or facets in the
 	    <code>webuijsf:tree</code> tag to allow the title bar to be rendered. 
             See <a href="#DefineTitleBar">Defining a Title Bar</a>
             for more information.</p></li>
         <li><p>As a single root, without a title bar. The root is invisible, 
             and a treeNode component is used as a single "root". 
             This treeNode is like any other container node in the tree, and
             includes handle icons for expanding and collapsing.  
             You must omit attributes and
 	    facets in the <code>webuijsf:tree</code> tag, and specify a single
 	    <code>webuijsf:treeNode</code> as the root node, with other
 	    <code>webuijsf:treeNode</code> tags contained within the first
 	    <code>webuijsf:treeNode</code>.</p></li>
 	<li><p>As a multi-root tree, without a title bar. There is no single top
 	    node, but two or more at the same level. You must omit attributes
 	    and facets in the <code>webuijsf:tree</code> tag and include multiple
 	    <code>webuijsf:treeNode</code> tags. See 
             <a href="#DefineMultiRoot">Defining a Tree with Multiple Roots</a> 
             for more information.</p></li></ul>
     <h4><a name="DefineTitleBar"></a>Defining a Title Bar</h4>
     <p>	The title bar consists of the following elements:</p>
     <ul><li>A shaded background color determined by the theme.</li>
 	<li>An optional graphic to the left of the title bar's text.</li>
 	<li>Text or a hyperlink for the content of the title bar.</li></ul>
     <p>	The title bar can be defined with either <code>webuijsf:tree</code> tag
 	attributes or facets. The title bar is rendered if the
 	tree component includes <code>imageURL</code> property for the graphic,
 	the <code>text</code> property for the title text, the
 	<code>content</code> facet, or the <code>image</code> facet.</p>
     <p> The title bar can be defined with either <code>webuijsf:tree</code> tag
 attributes or facets. The title bar is rendered if the tree component
 includes any of the following: the <code>imageURL</code> attribute for
 the graphic, the <code>text</code> attribute for the title text, 
 the <code>content</code> facet, or the <code>image</code> facet.</p>
     <h4><a name="DefineMultiRoot"></a>Defining a Tree with Multiple Roots</h4>
     <p>	To define a tree that has multiple roots rather than a single top root,
 	you must use the <code>webuijsf:tree</code> tag only as a container. You
 	should not specify attributes for the graphic or title text, or use
 	facets in the <code>webuijsf:tree</code> tag.</p>
     <p>	You can use <code>webuijsf:treeNode</code> tags as containers for other
 	<code>webuijsf:treeNode</code> tags, but should not use one to contain all
 	the others to avoid the appearance of a single root.</p>
           <h4>Client-side and Server-side Trees</h4>
     <p>The <code>webuijsf:tree</code> tag can be used to create a client-side tree or server-side tree.  
      By default the rendered tree is a server-side tree, and a request will be made 
      to the server each time the tree is expanded or collapsed. Set the <code>clientSide</code>
      attribute to true to create a tree that handles expanding and collapsing in the
      browser. Client-side trees are most useful for navigating through the application.</p>
      <p>If your tree needs to maintain its state across requests, you should 
      use the server side tree. The server side tree also provides the ability to fire
      events when the node handles are clicked.</p>
          <h4>Dynamically Adding and Removing Tree Nodes</h4>
     <p>The <code>webuijsf:tree</code> and <code>webuijsf:treeNode</code> tags can be used to 
     dynamically populate tree structures, by using the binding attribute to 
     create Tree and TreeNode component instances programmatically through
     a backing bean.  This approach is useful when tree data is not static,  
     but must be calculated when the page is rendered. Another reason
     to dynamically populate a tree is to decrease the time needed to
     initially render a tree by waiting until a user opens a folder before
     adding the folder's child nodes.   
     See the <a href="#Examples">Examples</a> section for sample code
     that implements dynamic nodes.</p>
     <h3>Facets</h3>
     <p> The Tree component supports the following facets: </p>
 <table style="text-align: left; width: 849px; height: 60px;" border="1"
 cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;"><code>content</code></td>
 <td style="vertical-align: top;">Replaces the default title bar with a custom component. 
 When the <code>content</code> facet is used, the <code>action</code>, <code>target</code>, 
 <code>text</code>, 
 <code>url</code>, and <code>toolTip</code> attributes are ignored.</td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>image</code></td>
 <td style="vertical-align: top;">Specifies the image area. When the <code>image</code> 
 facet is used, the <code>imageURL</code>, <code>action</code>, <code>target</code>, 
 <code>url</code>, and <code>toolTip</code> attributes are ignored.</td>
 </tr>
 </tbody>
 </table>
 <h3>Theme Identifiers</h3>
 <p>The following image keys might be useful for including theme images in tree nodes.
 To use these keys, use the <code>image</code> facet with a child component that supports
 the <code>icon</code> attribute, such as <code>webuijsf:image</code> and <code>webuijsf:imageHyperlink</code>.</p> 
 <pre>
 TREE_BLANK
 TREE_DOCUMENT
 TREE_FOLDER
 TREE_FOLDER_ALARM_MINOR
 TREE_FOLDER_ALARM_MAJOR
 TREE_FOLDER_ALARM_DOWN
 TREE_FOLDER_ALARM_CRITICAL
 TREE_SERVER
 TREE_SERVER_CRITICAL
 TREE_SERVER_DOWN
 TREE_SERVER_MAJOR
 TREE_SERVER_MINOR
 TREE_STORAGE
 TREE_STORAGE_MAJOR</pre>
     <h3>Theme Identifiers</h3>
     <p>	The following identifiers are written as class values in the html.
 	The locations are described below.</p>
     <ul><li><code>Tree</code> for the outer <code>&lt;div&gt;</code> around the
 	    tree component.</li>
 	<li><code>TreeContent</code> for the <code>&lt;div&gt;</code> around the
 	    content area of the tree (or tree node) component.  This is the same
 	    area that may be replaced by the <code>content</code> facet.</li>
 --	<li><code>TreeParentLink</code> </li> --
 --	<li><code>TreeLink</code> </li> --
 --	<li><code>TreeLinkSpace</code> </li> --
 --	<li><code>TreeImg</code> </li> --
 	<li><code>TreeImgHeight</code> ensures each tree row is the correct
 	    height.</li>
 	<li><code>TreeRootRow</code> for the <code>&lt;div&gt;</code> around
 	    the title bar.</li>
 	<li><code>TreeRootRowHeader</code> for the <code>&lt;div&gt;</code>
 	    above the title bar.  This may be used to make the title bar
 	    taller.</li>
 	<li><code>TreeRow</code> for the <code>&lt;div&gt;</code> around each
 	    tree node component.  This includes the tree node and all its child
 	    tree nodes.</li>
 --	<li><code>TreeSelLink</code> </li> --
 --	<li><code>TreeSelRow</code> </li> --
 --	<li><code>TreeSelText</code> </li> --
 	</ul>
 -->
     <h3>Client Side Javascript Functions</h3>
 <p>When the component is rendered, a DOM object corresponding to the
 component is created. To manipulate the component on the client side,
 you may invoke functions on the DOM object. With reference to the DOM
 id, to obtain a the tree containing the given node, invoke 
 <code>document.getElementById(id).getTree(treeNode)</code>.
 </p>
     <table style="width: 100%; text-align: left;" border="1" cellpadding="2"
 cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;"><code>clearHighlight(treeNode)</code></td>
 <td style="vertical-align: top;">This function clears the
 highlighting for a particular TreeNode. The <code>treeNode</code>
 passed in is the id of the <code>&lt;div&gt;</code> element that
 surrounds the HTML code for the TreeNode.
 This id can be obtained by calling <code>getElementById("&lt;TreeNode.getClidentId()&gt;")</code>.</td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>expandCollapse(treeNode,
 event)</code></td>
 <td style="vertical-align: top;">This function expands or
 collapses the given tree node. The function expects the source of the
 given event object to be a tree handle image. The function swaps images
 that depict the node as expanded or collapsed. The handle image points
 right when the node is collapsed, and points down when the node is
 expanded.&nbsp; This implementation requires the file names of the
 images to include the strings "tree_handleright" and "tree_handledown"
 to enable the images to be accurately displayed by swapping "right" and
 "down" in the name of the image file that is rendered.<br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>getParentTreeNode(treeNode)</code></td>
 <td style="vertical-align: top;">This function returns the
 parent TreeNode of the given TreeNode.</td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>getSelectedTreeNode(treeId)</code></td>
 <td style="vertical-align: top;">This function returns the
 selected TreeNode given the treeId of the Tree.</td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>getTree(treeNode)</code></td>
 <td style="vertical-align: top;">This function provides access
 to the Tree object containing the given TreeNode.</td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>highlight(treeNode)</code></td>
 <td style="vertical-align: top;">This function highlights the
 given TreeNode.The <code>treeNode</code>
 passed in is the id of the <code>&lt;div&gt;</code> element that
 surrounds the HTML code for the TreeNode.
 This id can be obtained by calling <code>getElementById("&lt;TreeNode.getClidentId()&gt;")</code>.</td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>highlightParent(treeNode)</code></td>
 <td style="vertical-align: top;">This function highlights the
 parent TreeNode of the given TreeNode, only if the given
 TreeNode is <b>not</b> visible. The parent is considered the first
 visible parent of this TreeNode. The <code>treeNode</code>
 passed in is the id of the <code>&lt;div&gt;</code> element that
 surrounds the HTML code for the child TreeNode.
 This id can be obtained by calling <code>getElementById("&lt;TreeNode.getClidentId()&gt;")</code>.</td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>isAnHref(event)</code></td>
 <td style="vertical-align: top;">This function checks to see if
 the event target is an href, or if any of the parent nodes which
 contain it is an href. To be considered an href, the target or parent
 node must be an <code>&lt;a&gt;</code> element with an <code>href="..."&nbsp;</code>
 attribute that contains at least four characters. (Note:
 Browsers will add on the protocol if you supply a relative URL such as
 one starting with a '#', '/', or filename).</td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>isTreeHandle(event)</code></td>
 <td style="vertical-align: top;">This function determines if the
 event source is a tree handle image. This implementation depends on
 the tree handle image file name containing "tree_handle". No other
 images can contain this string. <br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>onTreeNodeClick(treeNode, event)</code></td>
 <td style="vertical-align: top;">This function handles TreeNode
 onClick events. The <code>treeNode</code>
 passed in is the id of the <code>&lt;div&gt;</code> element that
 surrounds the TreeNode that was clicked, in order to process the
 highlighting changes that are necessary. This id can be obtained by
 calling <code>getElementById("&lt;TreeNode.getClidentId()&gt;")</code>.
 If this function is invoked from the TreeNode <code>&lt;div&gt;</code>
 object itself (as is the case when this method is implicitly called),
 the TreeNode
 object is simply the <code>this</code> variable.</td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>selectTreeNode(treeNode)</code></td>
 <td style="vertical-align: top;">This function may be used to
 select the given TreeNode. The function clears the previous TreeNode
 and
 selects the given one.</td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>treeNodeIsExpanded(treeNode)</code></td>
 <td style="vertical-align: top;">This function determines if the
 given TreeNode is expanded. The function returns <code>true</code> if
 the node is expanded, or <code>false</code>
 if collapsed. <br>
 </td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>unhighlightParent(treeNode)</code></td>
 <td style="vertical-align: top;">This function removes parent
 highlighting from the parent TreeNode of the given TreeNode, only if
 the given TreeNode is <b>not</b> visible. The parent is
 considered the first visible parent of this TreeNode. The <code>treeNode</code>
 passed in is the id of the <code>&lt;div&gt;</code> element that
 surrounds the HTML code for the child TreeNode. This id can be obtained
 by calling <code>getElementById("&lt;TreeNode.getClidentId()&gt;")</code>.</td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>updateHightlight(id)</code></td>
 <td style="vertical-align: top;">This function updates the
 highlighting for the given Tree client id. This function provides a way
 to restore the highlighting when a Tree is reloaded in a window
 (necessary for each page load).</td>
 </tr>
 </tbody>
 </table>
 <h3><a name="Examples"></a>Examples</h3>
 <p>The following examples are included:</p>
 <ul>
 <li><a href="#MultiRootTree">Example 1: Multi-Root Tree</a></li>
 <li><a href="#ClientSideTree">Example 2: Client-Side Tree with <code>image</code> Facet</a></li>
 <li><a href="#ServerSideTree">Example 3: Server-Side Tree with <code>content</code> Facet</a></li>
 <li><a href="#DynamicTree">Example 4: Dynamic Tree</a></li>
 <li><a href="#TestTreeBean">TestTreeBean.java Backing Bean</a></li>
 </ul>
 <h4><a name="MultiRootTree"></a>Example 1: Multi-Root Tree</h4>
 <p>This example shows a simple multiple root tree.</p>
 <code>&lt;webuijsf:tree id="TreeExample1" &gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&lt;webuijsf:treeNode id="node0"
 expanded="false" text="Accessibility" url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:treeNode id="node0_1" text="Access Key" url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&lt;webuijsf:treeNode id="node1"
 expanded="false" text="Getting Started with Solaris" url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:treeNode id="node1_1" text="Registering with Sun Microsystems,
 Inc." url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&lt;webuijsf:treeNode id="node2"
 expanded="true" text="Storage Management" url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:treeNode id="node2_1" text="Getting Started with Storage"
 url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&lt;webuijsf:treeNode id="node2_1_1" text="Checking Volume Status"
 url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:treeNode id="node2_2" text="Storage Hardware" url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:treeNode id="node2_3" text="RAID Levels" url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:treeNode id="node2_4" text="Choosing Storage" url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:treeNode id="node2_5" text="Random I/O" url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:treeNode&gt;<br>
 <br>
 &lt;/webuijsf:tree&gt;</code>
 <h4><a name="ClientSideTree"></a>Example 2: Client-side Tree</h4>
 <p>This example shows a client-side tree with nodes that use actions, urls, or static
 text. The example also uses the image facet to use a theme icon in the tree title bar.</p>
 <code>
 &nbsp;&lt;webuijsf:tree id="TreeExample1" text="Client-side Tree"
 url="#" clientSide="true"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;f:facet name="image"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:image
 id="image" icon="TREE_FOLDER_ALARM_CRITICAL" /&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;/f:facet&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;webuijsf:treeNode id="node0" expanded="true" <br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; text="Node with action set to navigation rule" action="hyperlinkPage"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &lt;f:facet
 name="image"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;webuijsf:image
 id="image" icon="TREE_FOLDER_ALARM_CRITICAL" /&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/f:facet&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:treeNode id="node1" expanded="true" <br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; text="Node with action set to managed bean method" <br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;action="#{HyperlinkBean.success}"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;f:facet
 name="image"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:image id="image"
 icon="TREE_FOLDER_ALARM_CRITICAL" /&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&lt;/f:facet&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&lt;webuijsf:treeNode id="node1_1" text="Node with static text"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;f:facet name="image"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&lt;webuijsf:image id="image" icon="TREE_SERVER" /&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&lt;webuijsf:treeNode id="node1_2" text="Node with a URL"
 url="http://www.google.com/"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;f:facet name="image"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&lt;webuijsf:image id="image" icon="TREE_SERVER_CRITICAL" /&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:treeNode id="node2" text="Building 10" url="#"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;f:facet
 name="image"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:image id="image" icon="TREE_FOLDER"
 /&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&lt;/f:facet&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&lt;webuijsf:treeNode id="node1_2" text="Skippy" url="#"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;f:facet name="image"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&lt;webuijsf:image id="image" icon="TREE_SERVER" /&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;webuijsf:treeNode id="node3"
 expanded="true" text="Building 2" url="#"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &lt;f:facet
 name="image"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;webuijsf:image
 id="image" icon="TREE_FOLDER" /&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/f:facet&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:treeNode id="node3_1" text="Arizona" url="#"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;f:facet
 name="image"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp;&nbsp; &lt;webuijsf:image id="image" icon="TREE_SERVER"
 /&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&lt;/f:facet&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &lt;/webuijsf:tree&gt;
 </code>  
 <h4><a name="ServerSideTree"></a>Example 3: Server-Side Tree with <code>content</code> Facet</h4>
 <p>This example shows a server-side tree that uses a <code>webuijsf:dropDown</code> tag
 to create the content area in the title bar of the tree.  </p>
 <code>
 &nbsp;&lt;webuijsf:tree id="TreeExample3" url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;f:facet name="content"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;webuijsf:dropDown id="airport" submitForm="true" items="#{BackingFileChoice.airports}" /&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;webuijsf:treeNode id="node0"
 expanded="true" text="Paducah" url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;f:facet
 name="image"&gt;<br>
 &nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;webuijsf:image id="image" icon="TREE_FOLDER_ALARM_MINOR" /&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;/f:facet&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;webuijsf:treeNode id="node1" expanded="true" text="Building 1" url="#"&gt;<br>
 &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;f:facet name="image"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:image id="image"
 icon="TREE_FOLDER_ALARM_MINOR" /&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
 &lt;/f:facet&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;webuijsf:treeNode id="node1_1" text="Kenga"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;f:facet name="image"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:image id="image" icon="TREE_SERVER" /&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;/f:facet&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;webuijsf:treeNode id="node1_2" text="Crocker" url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;f:facet name="image"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:image id="image" icon="TREE_SERVER_MINOR"
 /&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;/f:facet&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br>
 &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &lt;webuijsf:treeNode id="node5"
 expanded="true" text="Building 4" url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;f:facet
 name="image"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;webuijsf:image id="image" icon="TREE_FOLDER_ALARM_MAJOR" /&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;/f:facet&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &lt;webuijsf:treeNode
 id="node5_1" text="Neptune" url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
 &lt;f:facet name="image"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:image id="image" icon="TREE_STORAGE_MAJOR"
 /&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;
 &lt;/f:facet&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;webuijsf:treeNode id="node5_2" text="Zeus" url="#"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;f:facet
 name="image"&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:image id="image" icon="TREE_STORAGE" /&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;/f:facet&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &lt;/webuijsf:treeNode&gt;<br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;/webuijsf:treeNode&gt; &nbsp;&nbsp;
 <br>
 &nbsp;&lt;/webuijsf:tree&gt;
 </code>  
 <h4><a name="DynamicTree"></a>Example 4: Dynamic Tree</h4>
 <p>This example shows how to dynamically add or remove nodes from the tree. It also shows
 one way to dynamically add nodes to a folder when that folder is expanded. Each time a user 
 expands Folder 3, three new nodes are added to it. The backing bean used in this example
 is included after the example.</p>
 <p>Note that you cannot delete nodes that are declared in the JSP. In this example, you cannot
 delete the root node (defined by <code>webuijsf:tree</code>) and the first three child nodes, folder1,
 folder2, and folder3 (defined by <code>webuijsf:treeNode</code> tags).
 </p>
 <code>
 &lt;webuijsf:tree id="dynamicTree" binding="#{TestTreeBean.dynamicTree}"&gt;
 <br>
 &nbsp; &lt;webuijsf:treeNode id="folder1" binding="#{TestTreeBean.folder1}"
 /&gt;&nbsp;&nbsp;&nbsp; <br>
 &nbsp; &lt;webuijsf:treeNode id="folder2" binding="#{TestTreeBean.folder2}"
 /&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
 &nbsp; &lt;webuijsf:treeNode id="folder3" text="Folder3" url="#"
 actionListener="#{TestTreeBean.nodeExpanded}" &gt;
 <br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:treeNode id="folder3Child1" text="Folder 3
 Child 1" url="#" /&gt;
 <br>
 &nbsp; &lt;/webuijsf:treeNode&gt;
 <br>
 &lt;/webuijsf:tree&gt;
 <br>
 <br>
 &lt;webuijsf:button id="addButton" text="Add Child to Selected Node"
 action="#{TestTreeBean.addNode}" /&gt;
 <br>
 &lt;webuijsf:button id="deleteButton" text="Delete Selected Node"
 action="#{TestTreeBean.deleteNode}" /&gt;<br>
 </code>
 <h4><a name="TestTreeBean"></a>TestTreeBean.java Backing Bean</h4>
 <p>The following backing bean is used by the Dynamic Tree example.</p>
 <code>
 public class TestTreeBean {
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; ... other code removed for readability ....
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; private Tree dynamicTree = null;
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; public Tree getDynamicTree() {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (dynamicTree == null) {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 dynamicTree = new Tree();
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 dynamicTree.setText("Dynamic Tree Behavior Test");
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return dynamicTree;
 <br>
 &nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; public void setDynamicTree(Tree t) {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dynamicTree = t;
 <br>
 &nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; private TreeNode folder1 = null;
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; public TreeNode getFolder1() {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (folder1 == null) {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 folder1 = new TreeNode();
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 folder1.setUrl("#");
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 folder1.setText("Folder 1");
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 folder1.setExpanded(true);
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return folder1;
 <br>
 &nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; public void setFolder1(TreeNode n) {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; folder1 = n;
 <br>
 &nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; private TreeNode folder2 = null;
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; public TreeNode getFolder2() {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (folder2 == null) {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 folder2 = new TreeNode();
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 folder2.setUrl("#");
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 folder2.setText("Folder 2");
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 folder2.setExpanded(true);
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return folder2;
 <br>
 &nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; public void setFolder2(TreeNode n) {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; folder2 = n;
 <br>
 &nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; // int counter to name new nodes with
 <br>
 &nbsp;&nbsp;&nbsp; int i = 0;
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; &frasl;**
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp; * This action listener method will be called
 when Folder 3's
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp; * turner IconHyperlink is clicked.
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp; *&frasl;
 <br>
 &nbsp;&nbsp;&nbsp; public void nodeExpanded(ActionEvent event) {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TreeNode node = (TreeNode)
 event.getComponent();
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!node.isExpanded()) {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for
 (int j = 0; j &lt; 3; j++) {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 TreeNode newNode = createNode(i++);
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 node.getChildren().add(newNode);
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>
 &nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; private TreeNode createNode(int id) {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TreeNode node = new
 TreeNode();
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; node.setId("node" + i);
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; node.setText("Node " + i);
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; node.setUrl("#");
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return node;
 <br>
 &nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; &frasl;**
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp; * This action method is called when the "Add
 Child to Selected
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp; * Node" button is pressed.
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp; *&frasl;
 <br>
 &nbsp;&nbsp;&nbsp; public String addNode() {
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String nodeId =
 getDynamicTree().getSelected();
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (nodeId == null) {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 return "";
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIComponent node =
 getDynamicTree().findComponent(":" + nodeId);
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (node != null) {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 TreeNode newNode = createNode(i++);
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 node.getChildren().add(newNode);
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";
 <br>
 &nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp; &frasl;**
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp; * This action method is called when the
 "Delete Selected Node"
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp; * button is pressed.
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp; *&frasl;
 <br>
 &nbsp;&nbsp;&nbsp; public String deleteNode() {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String nodeId = (String)
 getDynamicTree().getSelected();
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (nodeId == null) {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 return "";
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIComponent node =
 getDynamicTree().findComponent(":" + nodeId);
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (node != null) {
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 UIComponent parent = node.getParent();
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List
 kids = parent.getChildren();
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 kids.remove((Object) node);
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
 <br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "";
 <br>
 &nbsp;&nbsp;&nbsp; }</code>
 <p>Auto-generated component class.
 Do <strong>NOT</strong> modify; all changes
 <strong>will</strong> be lost!</p>
]]></description>
    </tag>

    <tag>
        <name>treeNode</name>

        <description><![CDATA[ <p>Use the <code>webuijsf:treeNode</code>
 tag to insert a node in a tree structure. The <code>webuijsf:treeNode</code> tag can be used within a <a href="tree.html"><code>webuijsf:tree</code></a> tag or another <code>webuijsf:treeNode</code>
 tag.</p>
 <p> The <code>webuijsf:treeNode</code> tag is used as a child of a <code>webuijsf:tree</code> 
 component or another <code>webuijsf:treeNode</code> component to form a
 tree structure. When the tree structure is rendered, the TreeNode
 component represents a node in the tree. 
 <h3>HTML Elements and Layout</h3>
 <p>
 The TreeNode component renders the following:</p>
 <ul>
 <li>
 <p>A row of the tree lines that connect to other tree nodes.</p>
 </li>
 <li>
 <p>Small graphic images of "handles" that are used to open and close branches of
 the tree. The TreeNode component calls the imageHyperlink component,
 which displays clickable handle icons that are used to expand and collapse the
 node. The handle icons are rendered only if the TreeNode contains
 other TreeNodes.</p>
 </li>
 <li>
 <p>Optional graphic images that pertain to the content of the tree
 node, such as a folder image. The TreeNode component calls the
 imageHyperlink component to render the image. Images are rendered if you 
 specify the <code>image</code> attribute or use the <code>image</code> facet. <br>
 </p>
 </li>
 <li>
 <p>Text or a hyperlink for the content of the TreeNode. The default display of
 the content is rendered when you specify the <code>text</code> and <code>url</code> 
 attributes. You can use the <code>content</code> facet to specify a component to 
 render custom content for the node.</p>
 </li>
 </ul>
 <h3>Using the webuijsf:treeNode tag</h3>
 <p>Use the <code>text</code> attribute to provide the content of the node in the default static 
 text. Use the <code>url</code> attribute with the <code>text</code> attribute to make the content a hyperlink.
 The <code>expanded</code> attribute can be set to true to display a node in the expanded state 
 on initial rendering of the tree. You can use the <code>action</code> attributes to perform
 an action when the user clicks the text hyperlink. You can use the <code>actionListener</code> 
 attributes to perform an action when the user clicks the handle image hyperlink.
 <h3>Facets</h3>
 <p> The Tree component supports the following facets: </p>
 <table style="text-align: left;" border="1" cellpadding="2" cellspacing="2">
 <tbody>
 <tr>
 <td style="vertical-align: top;"><code>content</code></td>
 <td style="vertical-align: top;"> Specifies the text or
 url for the node. The <code>content</code> facet overrides the <code>text
 </code>and <code>url</code> attributes.</td>
 </tr>
 <tr>
 <td style="vertical-align: top;"><code>image</code></td>
 <td style="vertical-align: top;"> Specifies the optional graphic displayed
 with the node. The <code>image</code> facet overrides the <code>imageURL</code>
 attribute.</td>
 </tr>
 </tbody>
 </table>
 <h3>Theme Identifiers</h3>
 <p>The following image keys might be useful for including theme images in tree nodes.
 To use these keys, use the <code>image</code> facet with a child component that supports
 the icon attribute, such as <code>webuijsf:image</code> and <code>webuijsf:imageHyperlink</code>.</p> 
 <pre>
 TREE_BLANK
 TREE_DOCUMENT
 TREE_FOLDER
 TREE_FOLDER_ALARM_MINOR
 TREE_FOLDER_ALARM_MAJOR
 TREE_FOLDER_ALARM_DOWN
 TREE_FOLDER_ALARM_CRITICAL
 TREE_SERVER
 TREE_SERVER_CRITICAL
 TREE_SERVER_DOWN
 TREE_SERVER_MAJOR
 TREE_SERVER_MINOR
 TREE_STORAGE
 TREE_STORAGE_MAJOR</pre>
 <h3>Client Side Javascript Functions</h3>
 <p>The TreeNode component does not provide JavaScript functions. 
 See the documentation for the <code>&lt;webuijsf:tree&gt;</code> tag for
 JavaScript functions supported by the Tree component.
 </p>
 <h3>Example</h3>
     <p>See the <code>&lt;webuijsf:tree&gt;</code>documentation.</p>
 <p>Auto-generated component class.
 Do <strong>NOT</strong> modify; all changes
 <strong>will</strong> be lost!</p>
]]></description>
    </tag>

    <tag>
        <name>upload</name>

        <description><![CDATA[
<p>Use the webuijsf:upload tag to create a component that can be used to
browse the local file system for a file, and upload a copy of the
file's contents to the web application.</p> 


<h3>HTML Elements and Layout</h3> 

<p>The Upload component produces an XHTML &lt;input type="file"&gt;
    element, which displays a text input field with an adjacent Browse button.
    The user can type a file name or click the Browse button to select
    a file.  When the form is submitted, the file is uploaded.  Note
    that this tag requires the use of a filter.</p> 


<h3>Configuring the UploadFilter</h3> 

<p>In order for the <code>webuijsf:upload</code> tag to work, you must
    configure the web application to use the
    <code>com.sun.webui.jsf.util.UploadFilter</code>. 
Configure the filter by declaring a filter element in the web application's
 deployment descriptor, <code>web.xml</code>.</p> 
 <pre> 
  &lt;filter&gt;
    &lt;filter-name&gt;UploadFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;com.sun.webui.jsf.util.UploadFilter&lt;/filter-class&gt;
  &lt;/filter&gt;
 </pre>
<p>Map the filter to the FacesServlet by adding the following filter
    mapping in the same file, for example</p>
<pre>
  &lt;filter-mapping&gt;
    &lt;filter-name&gt;UploadFilter&lt;/filter-name&gt;
    &lt;servlet-name&gt;FacesServlet&lt;/servlet-name&gt;
  &lt;/filter-mapping&gt;
 </pre> 
<p>The UploadFilter uses the Apache commons fileupload package. You
    can optionally configure the parameters of the DiskFileUpload
    class by specifying init parameters on the UploadFilter. The
    following parameters are available: 
<ul> 
<li><code>maxSize</code> The maximum allowed upload size in bytes. 
If negative, there is no maximum. The default value is 1,000,000.</li> 

<li><code>sizeThreshold</code>The implementation of the uploading 
 functionality uses temporary storage of the file contents before the 
 Upload component stores them per its configuration. In the temporary 
 storage, smaller files are stored in memory while larger files are 
 written directly to disk . Use this parameter 
 to specify an integer value of the cut-off where files should be 
 written to disk. The default value is 4096 bytes.</li> 
<li><code>tmpDir</code> Use this directory to specify the directory to 
be used for temporary storage of files. The default behaviour is to use
the directory specified in the system property "java.io.tmpdir". </li> 
</ul> 

    <h3>The <code>UploadedFile</code> model object</h3>

<p>The contents of the uploaded file, together with some information
about it are stored in an instance of
<code>com.sun.webui.jsf.model.UploadedFile</code>. Using this object you
can get the content of the file as a String or write the contents to
disk, as well as get properties such as the name and the size of the
file. In the interest of conserving memory, the contents and file data
are only available during the HTTP request in which the file was
uploaded.</p>

<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF">
<TH ALIGN="left" COLSPAN="2">
<B>UploadedFile Method Summary</B></TH>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><code>dispose</code></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dispose of the resources associated with the file upload (this will
 happen automatically when the resource is garbage collected).</TD>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><code>getAsString</code></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use this method to retrieve the contents of the file as a String</TD>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><code>getBytes</code></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use this method to retrieve the contents of the file as an array of bytes.</TD>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><code>getContentType</code></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the content-type that the browser communicated with the request
 that included the uploaded file.</TD>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.io.InputStream</CODE></FONT></TD>
<TD><CODE><B><code>getInputStream</code></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a <CODE>InputStream</CODE> for reading the file.</TD>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><code>getOriginalName</code></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use this method to retrieve the name that the file has on the web 
 application user's local system.</TD>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><code>getSize</code></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The size of the file in bytes</TD>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><code>write</code></B>(java.io.File&nbsp;file)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Write the contents of the uploaded file to a file on the server host.</TD>
</TR>
</TABLE>
&nbsp;
<P>

    <h3>Configuring the  <code>webuijsf:upload</code> tag</h3>


<p>To access the contents of the uploaded file from the
    <code>webuijsf:upload</code> tag you have two
    options:</p> 
<ul> 
<li>Bind the <code>uploadedFile</code> attribute to managed bean
    property of type <code>com.sun.webui.jsf.model.UploadedFile</code>. 
    Have the setter or an action method process the file.</li> 
<li>Specify a valueChangeListener on the Upload component. 
    The method invoked by the value change listener has access to the
    new value of the component.</code>
    method. </li> 
</ul> 

    <p>To optionally specify a label for the component, use the
    <code>label</code> attribute, or specify a label facet. </p>

<h3>Client Side Javascript Functions</h3>

    <p>In all the functions below, <code>&lt;id&gt;</code> should be
    the generated id of the Upload component. 

    <table cellpadding="2" cellspacing="2" border="1" 
           style="text-align: left; width: 100%;">
    <tbody>
    <tr>
    <td style="vertical-align">
    <code>field_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Enable/disable the field. Set <code>&lt;disabled&gt;</code>
    to true to disable the component, or false to enable it.
    </td>
    </tr>
    <tr>
    <td style="vertical-align: top">
    <code>field_setValue(&lt;id&gt;, &lt;newValue&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Set the value of the field to <code>&lt;newValue&gt;</code>.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getValue(&lt;id&gt;)</code>
  </td>
    <td style="vertical-align: top">Get the value of the field.</td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getInputElement(&lt;id&gt;)</code></td>
    <td style="vertical-align: top">
    Get hold of a reference to the input element rendered by this
    component.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>component_setVisible(&lt;id&gt;)</code>
  </td>
      <td style="vertical-align: top">Hide or show this component.
      </td>
    </tr>
  </tbody>
</table>


<h3>Examples</h3>

<h4>Get the contents of the file as a String (using a managed bean)</h4>

<p>On the form that controls the upload:</p> 
<pre> 
&lt;webuijsf:upload id="upload2"
           uploadedFile = "#{FileUploadBean.uploadedFile}"
           label="Choose a file: "
           required="true"/&gt;
</pre> 

<p>On the page that displays the results of the upload:</p> 
<pre> 
&lt;webuijsf:staticText id="text"
               text ="File contents are bound to string: " &gt;
&lt;webuijsf:staticText id="text"
               text ="#{FileUploadBean.stringContent}"/&gt;

</pre> 
<p> The managed bean looks like this:</p> 
<pre> 
import java.io.Serializable;
import com.sun.webui.jsf.model.UploadedFile;

public class FileUploadBean implements Serializable {
        
     //
     // Holds value of property uploadedFile.
     //
    transient private UploadedFile uploadedFile;

     //
     // Getter for property stringContent.
     // @return Value of property stringContent.
     //
    public String getStringContent() {
        return uploadedFile.getAsString();
    }

     //
     // Getter for property uploadedFile.
     // @return Value of property uploadedFile.
     //
    public UploadedFile getUploadedFile() {
        return this.uploadedFile;
    }

     //
     // Setter for property uploadedFile.
     // @param uploadedFile New value of property uploadedFile.
     //
    public void setUploadedFile(UploadedFile uploadedFile) {
        this.uploadedFile = uploadedFile;
    }
}
</pre> 

<h4>Write the contents of the file to disk (using a ValueChangeListener)</h4>

<p>On the form that controls the upload:</p> 
<pre> 
&lt;webuijsf:upload id="upload1"
           label="Choose a file: "
           valueChangeListener="#{FileUploadedListener.processValueChange}"/&gt;
</pre> 

<p>Code for the ValueChangeListener</p> 
<pre>
import java.io.File; 
import java.io.Serializable;
import javax.faces.event.AbortProcessingException; 
import javax.faces.event.ValueChangeEvent;
import com.sun.webui.jsf.model.UploadedFile;

public class FileUploadedListener implements ValueChangeListener, Serializable {
    
        public void processValueChange(ValueChangeEvent event) 
        throws AbortProcessingException {
        Object value = event.getNewValue(); 
        if(value != null && value instanceof UploadedFile) {
            UploadedFile uploadedFile = (UploadedFile)value;
                     
            String name = uploadedFile.getOriginalName();
            if(name == null || name.length() == 0) {
                name = "tmp.tmp";
            }
            String suffix = name.substring(name.indexOf("."));
            if(suffix.length() == 0) {
                suffix = ".tmp";
            }
            String prefix = name.substring(0, name.indexOf("."));
            try {
                File tmpFile = File.createTempFile(prefix, suffix);
                uploadedFile.write(tmpFile);
            } catch(Exception ex) {
                // report the problem
            }         
        }
    }
}
</pre>
]]></description>
    </tag>

    <tag>
        <name>versionPage</name>

        <description><![CDATA[ <p>Use the <code>&lt;webuijsf:versionPage&gt;</code> tag to display a version page. <br>
 A version page is usually launched in a popup window from the masthead (see <code>webuijsf:masthead</code>).
 </p>
 <h3>HTML Elements and Layout</h3>
 A version page consists of:
 <ul>
 <li>a product name image</li>
 <li>a version string</li>
 <li>copyright information</li>
 <li>a close button</li>
 </ul>
 <p>
 The application version and copyright can be specified in directly on the jsp page or within a version information file.<br>
 </p>
 <p>&nbsp;</p>
 <h3>Client Side Javascript Functions</h3>
 none.
 <p>Auto-generated component class.
 Do <strong>NOT</strong> modify; all changes
 <strong>will</strong> be lost!</p>
]]></description>
    </tag>

    <tag>
        <name>wizard</name>

        <description><![CDATA[ <p>
 Use the <code>webuijsf:wizard </code> tag to create a
 popup wizard. A popup wizard is a secondary
 window that displays a series of steps in a user task. The wizard
 leads the user through the task one step at a time, requesting a series
 of responses and finally executing the task based on those
 responses.</p>
 <p>The <code>webuijsf:wizard</code> tag is the container
 for the <code>webuijsf:wizardStep</code> tags, which define the
 content of each step in the task. Simple wizards can be implemented
 with the <code>webuijsf:wizard</code> and <code>webuijsf:wizardStep</code>
 tags. See <a href="wizardStep.html" target="tagFrame">webuijsf:wizardStep</a>
 for details on using the <code>webuijsf:wizardStep</code>
 tag.</p>
 <p>
 More complex wizards can be implemented to include steps that
 branch, in which the user's response determines which of two or more
 paths to take in completing a task. Use the <a
  href="wizardSubstepBranch.html" target="tagFrame">webuijsf:wizardSubstepBranch</a>,
 <a href="wizardBranch.html" target="tagFrame">webuijsf:wizardBranch</a>,
 and <a href="wizardBranchSteps.html" target="tagFrame">webuijsf:wizardBranchSteps</a>
 for building more complex wizards with steps that branch.
 <p>The wizard component implements Sun's user interface (UI) guidelines for web
 application wizards. The guidelines describe in detail how a wizard
 should appear and behave. The wizard component's default behavior implements
 the UI guidelines.<br>
 </p>
 <p>Note: You should launch the wizard from a page in your
 application. For example, you could include a <code>webuijsf:button</code>
 tag whose <code>onClick</code>
 attribute is set to a JavaScript function that opens a popup to display
 the wizard JSP page. See the <a href="#Examples">Examples</a>
 section for more information.<br>
 </p>
 <h3>HTML Elements and Layout</h3>
 <p>The wizard component is rendered with <code>&lt;div&gt;</code>
 and <code>&lt;table&gt;</code> XHTML elements, and
 within those elements are any number of XHTML elements that
 vary according to the components specified in the individual
 steps of the wizard. </p>
 <p>The default wizard contains the following areas: </p>
 <ul>
   <li>
     <p>Wizard Title -  The wizard title occupies the
 first row of the wizard and spans the width of the wizard. The title text is specified
 with the <code>webuijsf:wizard</code> tag's <code>title</code> attribute.</p>
   </li>
   <li>
     <p>Steps Pane - The Steps pane, displayed on the left side of
 the wizard, enumerates the steps of the wizard to show the
 user's current position in the wizard task, and to provide links
 back to preceding steps. The current step is indicated with an arrow
 displayed to the left of the step's number. Steps that precede the
 current step are displayed as hyperlinks, and the steps following are displayed
 as static text. The text displayed in the Steps pane for each step is
 specified with the <code>summary</code> attribute of each <code>webuijsf:wizardStep</code>
 tag.</p>
     <p>The Steps pane can also display help for the
 wizard, if you specify the <code>help</code> attribute
 in any of the wizard's <code>webuijsf:wizardStep</code>
 tags. When the <code>help</code> attribute is specified,
 the following tabs are displayed: </p>
   </li>
   <ul>
     <li>
       <p> Steps tab - The tab is displayed in the left
 side of the Steps pane, and is selected by default. The Steps
 tab contains the same content that was described for the Steps
 pane. </p>
     </li>
     <li>
       <p> Help tab - The tab is displayed to the right side of
 the Steps page, and shows the text
 that is assigned to the <code>help</code> attribute for
 the current step. The supplied text should provide information about
 completing the step.</p>
     </li>
   </ul>
 <p>If no <code>help</code>
 attributes are specified in any of the steps, no tabs
 are displayed and only a steps list appears in the Steps pane. </p>
 </ul>
 <ul>
   <li>
     <p>Step Content - The step content area consists of the
 following
 areas:</p>
 </li>
 <ul>
     <li>
       <p>Step Title - The title of the step, with the <span
  style="font-weight: bold;">Step</span> <span
  style="font-style: italic;">x</span><span
  style="font-weight: bold;">: </span>step number
 prefix. For example: <span style="font-weight: bold;">Step
 1: Title of the First Step</span>. The
 text for the step title ("Title of the First Step") is specified with
 the <code>webuijsf:wizardStep</code> tag's <code>title</code> attribute, while the step number
 prefix is automatically generated by the wizard component. </p>
     </li>
     <li>
       <p>Step Detail  -  Brief instructions or
 statements about the step, specified with the <code>webuijsf:wizardStep</code>
 tag's <code>detail</code> attribute</p>
     </li>
     <li>
       <p>Step Input Controls - The input controls used to
 gather input from the user, such as text input fields, checkboxes,
 radiobuttons, drop down lists. See the <code><a href="wizardStep.html">webuijsf:wizardStep</a></code>
 documentation for more more information about the step content.</p>
     </li>
   </ul>
 </ul>
 <ul>
   <li>
     <p>Navigation Controls - The navigation buttons include
 Previous, Next or Finish, and Cancel or Close, which control the progression
 of the wizard steps. The <code>finish</code>
 attribute of the <code>webuijsf:wizardStep</code> tag
 causes the Finish button to be displayed instead of the Next button.
 The <code>results</code> attributes of the <code>webuijsf:wizardStep</code>
 tag causes the Close button to be displayed instead of the Cancel
 button.</p>
   </li>
 </ul>
 <p> The following diagram shows the relative location of the
 wizard areas. The areas that are controlled with the <code>webuijsf:wizard</code>
 tag are highlighted in light blue. The grayed out areas
 are controlled
 with <code>webuijsf:wizardStep</code> tags, but are shown here
 for context. </p>
 <p>
 <table style="text-align: left; width: 100%;" border="1"
  cellpadding="2" cellspacing="2">
   <tbody>
     <tr>
       <td colspan="2" rowspan="1"
  style="background-color: rgb(210, 224, 235);">Wizard Title (<code>title</code>
 attribute)</td>
     </tr>
     <tr>
       <td
  style="vertical-align: top; background-color: rgb(237, 237, 237); color: rgb(153, 153, 153);"
  colspan="1" rowspan="1"><span
  style="color: rgb(102, 102, 102);">Steps
 Pane</span><br>
       <table style="text-align: left; width: 100%;" border="0"
  cellpadding="2" cellspacing="4">
         <tbody>
           <tr>
             <td style="width: 77px;"><span
  style="color: rgb(102, 102, 102);">Steps Tab<br>
             <br>
             <br>
             <br>
             <br>
             <br>
             <br>
             </span></td>
             <td style="width: 66px; vertical-align: top;"><span
  style="color: rgb(102, 102, 102);">Help Tab</span><br>
             </td>
           </tr>
         </tbody>
       </table>
       </td>
       <td
  style="background-color: rgb(237, 237, 237); color: rgb(102, 102, 102);">Step
 Content Pane<br>
       <table style="text-align: left; width: 100%;" border="1"
  cellpadding="2" cellspacing="2">
         <tbody>
           <tr style="color: rgb(102, 102, 102);">
             <td>Step Title</td>
           </tr>
           <tr style="color: rgb(102, 102, 102);">
             <td>Step Detail</td>
           </tr>
           <tr>
             <td><span style="color: rgb(102, 102, 102);">Step
 Input Controls<br>
             <br>
             <br>
             </span></td>
           </tr>
         </tbody>
       </table>
       </td>
     </tr>
     <tr>
       <td colspan="2" rowspan="1"
style="background-color: rgb(210, 224, 235);">Navigation
Controls &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp;</td>
     </tr>
   </tbody>
 </table>
 </p>
 <h3>Using the <code>webuijsf:wizard</code> Tag</h3>
 <p>The <code>webuijsf:wizard</code> tag and its child tags are intended to be used in a JSP page whose
sole purpose is to define a popup wizard. The JSP page should not include a masthead
or breadcrumbs, for example, because the wizard will not render as desired when these
components are used in the page.</p>
 <p>For the simplest wizards, which gather data to be used by the
 web application, you can simply define wizardSteps that
 contain their own child component tags. The child components' attributes 
 can be bound to backing beans that store data entered by the
 user. When the wizard closes, that data is available to the application.</p>
 <p>Less simple wizards might require
 some action to be taken when the wizard closes. For example, you might
 want the wizard to send a request to the page that launched the wizard,
 to redirect the browser or refresh the page. The <code>onPopupDismiss</code>
 attribute can be used to perform this
 function. The value of <code>onPopupDismiss </code>must
 be a JavaScript statement that is executed during
 the response to a request that closes the window. The close request
 might occur as a result of the user clicking the
 Close, Cancel, Finish buttons, or some controlled application event
 that causes the the wizard to complete.</p>
 <p><span style="font-weight: bold;">Note:</span>
 The JavaScript attributes (such as <code>onCancel</code>, <code>onClose</code>) must
 not be used to close the
 wizard popup window. Doing so will prevent the application from
 receiving the request that informs the application and the wizard
 framework that it should continue or exit (close, cancel) gracefully. 
 The <code>onPopupDismiss</code> attribute
 is available for performing application-specific behavior on the client
 when the wizard is complete. The JavaScript attributes are useful for
 processing of data from actions the user has taken on the current step,
 such as client side validation.</p>
 <h3>Wizard Buttons</h3>
 <p>The wizard component handles the creation of  the appropriate
 navigation buttons in each wizard step. For example, the
 first step is rendered with a disabled Previous button, a highlighted
 Next button, and an enabled Cancel button that is not highlighted. You
 must create an event listener to respond to events generated when the
 user clicks the buttons.  You can also use tag attributes to
 specify JavaScript that is executed when a particular button is
 clicked. </p>
 <h3><a name="EventListeners"></a>Event
 Listeners</h3>
 Events are executed as the user leaves the step.
 The <code>webuijsf:wizard</code> tag's <code>eventListener</code>
 attribute is used to specify the wizard event
 listener.  The <code>eventListener</code>
 attribute must be bound
 to a value binding that evaluates to an object instance that implements
 the <code>com.sun.webui.jsf.event.WizardEventListener</code>
 interface.  Note that the <code>webuijsf:wizardStep</code>
 tag also provides an <code>eventListener</code> attribute.
  You can choose to use the <code>eventListener </code>attribute
 on either or both the wizard or wizardStep component. The wizardStep
 event listener implementation might be more efficient.  If you
 use event listeners on both the wizard and wizardStep components, the
 wizardStep's event listener is called first, and then the wizard's
 event listener is called. See the Examples section for an
 <a href="#wizardEventListener">example of a wizard event
 listener class</a>.</p>
 <h3>Client-side JavaScript Functions</h3>
 <p>When the component is rendered, a DOM object corresponding to the
 component is created. To manipulate the component on the client side,
 you may invoke functions on the DOM object. With reference to the DOM
 id, to close the wizard popup window, invoke 
 <code>document.getElementById(id).closePopup()</code>.
 </p>
 <p>The wizard component supports the following JavaScript
 functions, which can be used with the <code>onPopupDismiss</code>
 attribute.  <br>
 </p>
 <table style="text-align: left; width: 100%;" border="1"
  cellpadding="2" cellspacing="2">
   <tbody>
     <tr>
       <td><span style="font-weight: bold;">Function</span></td>
       <td><span style="font-weight: bold;">Purpose</span></td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>closeAndForward(openerForm,submitTo,clearState)</code></td>
       <td>Close the wizard popup window and forward a request
 	  to the specified page.  This function accepts three arguments:
       <ul>
         <li><code>openerForm</code> is a form that must exist in the window
 	that opened the wizard popup window</li>
         <li><code>submitTo</code> is a URI
 	    that will replace the <code>action</code>
 	    property of the <code>openerForm</code> form.</li>
 	<li><code>clearState</code> is a flag that should be set to
 	<code>true</code> if the application is configured for client side
 	state saving, and <code>submitTo</code> is a different page than
 	the page that contains the <code>openerForm</code> form.
 	</li>
       </ul>
       </td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>closePopup()</code></td>
       <td>Close the wizard popup window.  This
 	function should only be used with popup wizards.</td>
     </tr>
     <tr>
       <td style="vertical-align: top;"><code>wizOnLoad()</code></td>
       <td>This method must be assigned to the onload handler of the onLoad 
           attribute of the ui:body tag if the wizard is to operate properly
           on IE.
     </td>
     </tr>
   </tbody>
 </table>
 <br>
 For example, to alter the behavior
 when the
 wizard popup closes, specify the following JavaScript as the value of
 the <code>onPopupDismiss</code> attribute:
 <p> <code><pre>onPopupDismiss="document.getElementById('form1:wizard1').closeAndForward('openerForm',
 '/app/faces/wizardResults.jsp',true);"</pre></code></p>
 <p style="color: rgb(255, 102, 0);"><code><pre>
 </pre></code>
 </p>
 <p> This JavaScript invokes the JavaScript wizard
 object's <code>closeAndForward()</code>
 method with a form DOM id from the window that opened the popup, and
 submits that form with the action set to the specified
 JSP page.<br>
 </p>
 <h4>JavaScript Function for Correct Wizard Rendering on
 IE 6</h4>
 If your web application will be used in Internet Explorer 6, you must
 specify the <code>document.getElementById('form1:wizard1').wizOnLoad()</code> function in the <code>webuijsf:body</code> tag
 in your JSP page. This function enables the wizard to be rendered correctly. For example: 
 <p>
 <code>
 &lt;webuijsf:body
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; onLoad="document.getElementById('form1:wizard1').wizOnLoad()"&gt;
 </code>
 <p>The argument to the <code>document.getElementById('form1:wizard1').wizOnLoad()</code>
 function is the DOM id that results from the ids of the form and wizard components. <br>
 </p>
 <h3><a name="Examples"></a>Examples</h3>
 <p>
 The example shown here is for creating a simple wizard.  This
 example includes:
 <ul>
 <li>the <a href="#emailaccount.jsp">emailaccount.jsp</a> that uses the <code>webuijsf:wizard</code> tag
 <li><a href="#wizardEventListener">emailAccount backing bean</a>, which
 contains an implementation of the wizard event listener </li>
 <li>a <a href="#LaunchWizard">JSP page</a> that launches a wizard.</li>
 </ul>
 <p>
 The <a href="./wizardBranch.html">webuijsf:wizardBranch</a>
 documentation shows an example of a more complex wizard. </p>
 <h4>Example 1: Simple Popup Wizard</h4>
 <p>This example shows a complete JSP page that uses a
 simple wizard. This wizard has no overview page or results page,
 and contains no branching or substeps.
 Notice that the <code>webuijsf:body</code> tag includes the
 attribute <code>onload="document.getElementById('form1:wizard1').wizOnLoad()"</code>,
 which is needed for the wizard to display correctly in Internet
 Explorer. </p>
 <a name="emailaccount.jsp"></a>
 <pre>&lt;jsp:root version="1.2"
           xmlns:jsp="http://java.sun.com/JSP/Page"
           xmlns:f="http://java.sun.com/jsf/core"
           xmlns:h="http://java.sun.com/jsf/html"
           xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;
 &lt;jsp:directive.page contentType="text/html;charset=UTF-8"
                     pageEncoding="UTF-8"/&gt;
 &lt;f:view&gt;
     &lt;webuijsf:page&gt;
 	&lt;webuijsf:html&gt;
 	    &lt;webuijsf:head title="Wizard Example" /&gt;
 	    <code>&lt;webuijsf:body
                  onLoad="document.getElementById('form1:wizard1').wizOnLoad()"&gt;</code>		
             &lt;webuijsf:form id="form1"&gt;
 &lt;!-- Simplest Wizard 
     Order of steps is order of evaluation of children.
     No Overview page.
     No Results page.
     Demonstrates how a wizard step's content is defined.
     Value bindings are supported. --&gt;
     &lt;webuijsf:wizard id="wizard1"
 	title="Create Account"&gt;
 	&lt;webuijsf:wizardStep id="step1"
 	    summary="Choose Account Type"
 	    title="New Account Setup"
 	    detail="Select the type of account you would like to set up:"
 	    help="In order to receive messages, you first need to set up a Mail or Newsgroup account. 
                   This Wizard will collect the information necessary to set up a Mail or Newsgroup 
                   account. If you do not know the information requested, please contact your System 
                   Administrator or Internet Service Provider."&gt;
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;
 	    &lt;webuijsf:radioButton id="email" name="account"
 		label="Email account"
 		selectedValue="EmailAccount"
 		selected="#{emailAccount.acctType}"/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:radioButton id="movemail" name="account"
 		label="Movemail"
 		selectedValue="MoveMail"
 		selected="#{emailAccount.acctType}"/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:radioButton id="rss" name="account"
 		label="RSS News and Blogs"
 		selectedValue="RSSNewsAndBlogs"
 		selected="#{emailAccount.acctType}"/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:radioButton id="news" name="account"
 		label="Newsgroup account"
 		selectedValue="Newsgroup"
 		selected="#{emailAccount.acctType}"/&gt;
 	    &lt;/webuijsf:markup&gt;
 	&lt;/webuijsf:wizardStep&gt;
 	&lt;webuijsf:wizardStep id="step2"
 	    summary="Specify Email Identity"
 	    title="Identity"
 	    detail="Enter outgoing email name and email address."
 	    help="Each account has an identity, which is the information that identifies 
                   you to others when they receive your messages. Enter the name you would 
                   like to appear in the From field of your outgoing messages, for example, 
                   John Smith. Then enter your email address. This is the address others 
                   will use to send email to you, for example john.smith@example.com."&gt;
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;
 	    &lt;webuijsf:label id="namelbl" text="Your Name"/&gt;
 	    &lt;webuijsf:textField id="namefld"
 		required="true"
 		validator='#{emailAccount.validate}'
 		text='#{emailAccount.userName}'/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:label id="eaddrlbl" text="Email Address"/&gt;
 	    &lt;webuijsf:textField id="eaddrfld"
 		required="true"
 		validator='#{emailAccount.validate}'
 		text='#{emailAccount.emailAddr}'/&gt;
 	    &lt;/webuijsf:markup&gt;
 	&lt;/webuijsf:wizardStep&gt;
 	&lt;webuijsf:wizardStep id="step3"
 	    summary="Specify Email Server"
 	    title="Email Server Information"
 	    detail="Select the type of incoming server and server name."
 	    help="Select the type of the incoming server you are using. 
                   Then enter the name of your incoming server, for example, mail.example.com."&gt;
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;
 	    &lt;webuijsf:radioButton id="pop" name="mailservertype"
 		label="POP"
 		selectedValue="Pop"
 		selected="#{emailAccount.serverType}"/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
             &lt;webuijsf:radioButton id="imap" name="mailservertype"
 		label="IMAP"
 		selectedValue="Imap"
 		selected="#{emailAccount.serverType}"/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:label id="inserverlbl" text="Incoming Server"/&gt;
 	    &lt;webuijsf:textField id="inserverfld"
 		required="true"
 		validator='#{emailAccount.validate}'
 		text='#{emailAccount.inServer}'/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:label id="outserverlbl" text="Outgoing Server"/&gt;
 	    &lt;webuijsf:textField id="outserverfld"
 		required="true"
 		validator='#{emailAccount.validate}'
 		text='#{emailAccount.outServer}'/&gt;
 	    &lt;/webuijsf:markup&gt;
 	&lt;/webuijsf:wizardStep&gt;
 	&lt;webuijsf:wizardStep id="step4"
 	    summary="Specify User Name"
 	    title="User Names"
 	    detail="Enter email provider assigned user name."
 	    help="Enter your existing outgoing and incoming (SMTP) username, 
              for example jsmith. You can modify outgoing server settings by choosing 
               Account Settings from the Tools menu."&gt;
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;
 	    &lt;webuijsf:label id="innamelbl" text="Incoming User Name"/&gt;
 	    &lt;webuijsf:textField id="innamefld"
 		required="true"
 		validator='#{emailAccount.validate}'
 		text='#{emailAccount.inName}'/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:label id="outnamelbl" text="Outgoing User Name"/&gt;
             &lt;webuijsf:textField id="outnamefld"
 		required="true"
 		validator='#{emailAccount.validate}'
 		text='#{emailAccount.outName}'/&gt;
 	    &lt;/webuijsf:markup&gt;
 	&lt;/webuijsf:wizardStep&gt;
 	&lt;webuijsf:wizardStep id="step5"
 	    summary="Specify Account Name"
 	    title="Account Name"
 	    detail="The name of the account."
 	    help="Enter the name by which you would like to refer to this account, 
                for example Work Account, Home Account, or News Account, etc."&gt;
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;
 	    &lt;webuijsf:label id="acctnamelbl" text="Account Name"/&gt;
 	    &lt;webuijsf:textField id="acctnamefld"
 		required="true"
 		validator='#{emailAccount.validate}'
 		text='#{emailAccount.acctName}'/&gt;
 	    &lt;/webuijsf:markup&gt;
 	&lt;/webuijsf:wizardStep&gt;
 	&lt;webuijsf:wizardStep id="step6"
 	    summary="Verify Information"
 	    title="Verify Account Information"
 	    detail="Verify the information below is correct."
 	    help="Click finish to create the account and previous if corrections are required."
             finish="true"&gt;
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;
 	    &lt;webuijsf:label id="v_accttypelbl" text="Accout Type:"/&gt;
 	    &lt;webuijsf:staticText id="v_accttypetxt"
 		text='#{emailAccount.acctType}'/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:label id="v_usernamelbl" text="User Name:"/&gt;
 	    &lt;webuijsf:staticText id="v_usernametxt"
 		text='#{emailAccount.userName}'/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:label id="v_acctnamelbl" text="Account Name:"/&gt;
 	    &lt;webuijsf:staticText id="v_acctnametxt"
 		text='#{emailAccount.acctName}'/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:label id="v_eaddrlbl" text="Email Address:"/&gt;
 	    &lt;webuijsf:staticText id="v_eaddrtxt"
 		text='#{emailAccount.emailAddr}'/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:label id="v_innamelbl" text="Incoming User Name:"/&gt;
 	    &lt;webuijsf:staticText id="v_innametxt"
 		text='#{emailAccount.inName}'/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:label id="v_insrvnamelbl" text="Incoming Server Name:"/&gt;
 	    &lt;webuijsf:staticText id="v_insrvnametxt"
 		text='#{emailAccount.inServer}'/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:label id="v_insrvtypelbl" text="Incoming Server Type:"/&gt;
 	    &lt;webuijsf:staticText id="v_insrvtypetxt"
 		text='#{emailAccount.serverType}'/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:label id="v_outnamelbl" text="Outgoing User Name:"/&gt;
 	    &lt;webuijsf:staticText id="v_outnametxt"
 		text='#{emailAccount.outName}'/&gt;
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;
 	    &lt;webuijsf:label id="v_outsrvnamelbl" text="Outgoing Server Name:"/&gt;
 	    &lt;webuijsf:staticText id="v_outsrvnametxt"
 		text='#{emailAccount.outServer}'/&gt;
 	    &lt;/webuijsf:markup&gt;
 	&lt;/webuijsf:wizardStep&gt;
     &lt;/webuijsf:wizard&gt;
 		&lt;/webuijsf:form&gt;
 	    &lt;/webuijsf:body&gt;
         &lt;/webuijsf:html&gt;
     &lt;/webuijsf:page&gt;
 &lt;/f:view&gt;
 &lt;/jsp:root&gt;
 </pre>
 <h4><span style="font-weight: bold;"></span><a
  name="wizardEventListener"></a>EmailAccount.java
 Backing Bean</h4>
 The <code>emailAccount</code> backing bean is used by the
 example JSP
 shown in the previous section. The bean defines getters and
 setters for the component properties and defines the <code>EmailAccountWizardEventListener</code>,
 which implements the <code>WizardEventListener</code>
 interface.<br>
 <br>
 <pre wrap="">package wizard;
 import javax.faces.application.FacesMessage;
 import javax.faces.context.FacesContext;
 import javax.faces.component.UIComponent;
 import javax.faces.validator.Validator;
 import javax.faces.validator.ValidatorException;
 import com.sun.webui.jsf.event.WizardEvent;
 import com.sun.webui.jsf.event.WizardEventListener;
 import com.sun.webui.jsf.component.Wizard;
 import com.sun.webui.jsf.component.WizardStep;
 public class EmailAccountBean {
     private String acctType;
     private String userName;
     private String acctName;
     private String emailAddr;
     private String inName;
     private String inServer;
     private String serverType;
     private String outName;
     private String outServer;
     private boolean globalInbox = true;
     private Validator wizardValidator;
     public EmailAccountBean() {
 	this.acctType = "EmailAccount";
 	this.serverType= "Pop";
 	this.wizardValidator = new WizardValidator();
     }
     public void validate(FacesContext context,
 	    UIComponent component, Object value) 
 	    throws ValidatorException {
 	wizardValidator.validate(context, component, value);
     }
     public String getAcctType() {
 	return acctType;
     }
     public String getUserName() {
 	return userName;
     }
     public String getAcctName() {
 	return acctName;
     }
     public String getEmailAddr() {
 	return emailAddr;
     }
     public String getInName() {
 	return inName;
     }
     public String getInServer() {
 	return inServer;
     }
     public String getServerType() {
 	if (acctType.equals("MoveMail")) {
 	    return "MoveMail";
 	} else {
 	    return serverType;
 	}
     }
     public String getOutName() {
 	if (acctType.equals("MoveMail") || acctType.equals("Newsgroup")) {
 	    return emailAddr.substring(0, emailAddr.indexOf("@"));
 	} else {
 	    return outName;
 	}
     }
     public String getOutServer() {
 	return outServer;
     }
     // One of 
     // "EmailAccount"
     // "MoveMail"
     // "RSSNewsAndBlogs"
     // "Newsgroup"
     //
     public void setAcctType(String acctType) {
 	if (acctType != null &amp;&amp; acctType.length() != 0) {
 	    this.acctType = acctType;
 	}
     }
     public void setUserName(String userName) {
 	this.userName = userName;
     }
     public void setAcctName(String acctName) {
 	this.acctName = acctName;
     }
     public void setEmailAddr(String emailAddr) {
 	this.emailAddr = emailAddr;
     }
     public void setInName(String inName) {
 	this.inName = inName;
     }
     public void setInServer(String inServer) {
 	this.inServer = inServer;
     }
     public void setServerType(String serverType) {
 	if (serverType != null &amp;&amp; serverType.length() != 0) {
 	    this.serverType = serverType;
 	}
     }
     public void setOutName(String outName) {
 	this.outName = outName;
     }
     public void setOutServer(String outServer) {
 	this.outServer = outServer;
     }
     public void setGlobalInbox(boolean globalInbox) {
 	this.globalInbox = globalInbox;
     }
     public boolean getglobalInbox() {
 	return globalInbox;
     }
     public WizardEventListener getWizardEventListener() {
 	return new EmailAccountWizardEventListener();
     }
     public WizardEventListener getWizardStepEventListener() {
 	return new EmailAccountWizardEventListener();
     }
 }
 class EmailAccountWizardEventListener implements WizardEventListener {
 	// If this method returns false, the event is not forwarded to 
 	// the wizard model and the wizard will remain on the same
 	// step that triggered this event.
 	//
 	// The step event listener is called first then the 
 	// wizard's event listener. If the wizard's event listener
 	// returns false, even if the step listener returned true,
 	// the wizard will remain on the same step that triggered
 	// this event.
 	//
 	// If an exception is thrown, the wizard model is forwarded
 	// the WizardEvent.CANCEL event, and the wizard behaves as
 	// if the user clicked the cancel button.
 	//
     public boolean handleEvent(WizardEvent event) {
 	WizardStep step = event.getStep();
 	Wizard wizard = event.getWizard();
 	switch (event.getNavigationEvent()) {
 	// The START and COMPLETE events are special events that are only 
 	// broadcast to the wizard's event listener.
 	// 
 	// The START event is broadcast only once when the wizard is first
 	// rendered. This event will only be broadcast again, if the
 	// same Wizard component instance is rendered again after having
 	// broadcast the COMPLETE event.
 	//
 	case WizardEvent.START:
 	break;
 	// The COMPLETE event is broadcast only once after the wizard's
 	// last response is written, and the wizard popup has been 
 	// closed. If this Wizard component instance is rendered again, the 
 	// START event will be broadcast.
 	//
 	case Wizardevent.COMPLETE:
 	    // These statements might be necessary if the application
 	    // is configured with server side state saving.
 	    // 
 	    // In some situations a value entered by a user may "stick"
 	    // across different wizard sessions. It can happen if a
 	    // user enters data into an input field and then cancels
 	    // the wizard session or something occurs that causes
 	    // the wizard to skip the validation phase and then the
 	    // wizard is cancelled. The next time the wizard is rendered
 	    // it may display the previous value. 
 	    //
 	    // One way to remedy this situation is to perform the following
 	    // during the COMPLETE event.
 	    //
 	    // This works because new instances of the wizard's step
 	    // components are recreated. The step children are not 
 	    // typically recreated when an application is configured
 	    // with server side state saving.
 	    //
 	    Wizard wizard = (Wizard)event.getSource();
 	    wizard.getChildren().clear();
 	break;
 	case WizardEvent.NEXT:
 	break;
 	case WizardEvent.PREVIOUS:
 	break;
 	case WizardEvent.CANCEL:
 	break;
 	case WizardEvent.FINISH:
 	break;
 	case WizardEvent.CLOSE:
 	break;
 	case WizardEvent.HELPTAB:
 	break;
 	case WizardEvent.STEPSTAB:
 	break;
 	case WizardEvent.GOTOSTEP:
 	    String gotoStepId = event.getGotoStepId();
 	break;
 	case WizardEvent.NOEVENT:
 	break;
 	}
 	return true;
     }
     public void setTransient(boolean transientFlag) {
     }
     public Object saveState(FacesContext context) {
 	return null;
     }
     public void restoreState(FacesContext context, Object state) {
     }
     public boolean isTransient() {
 	return false;
     }
 }
 </pre>
 <h4><a name="LaunchWizard"></a>JSP for
 Launching the Wizard</h4>
 This example shows how you might launch a wizard, using JavaScript
 enabled buttons. <br>
 <br>
 <pre>&lt;jsp:root version="1.2"
           xmlns:jsp="http://java.sun.com/JSP/Page"
           xmlns:f="http://java.sun.com/jsf/core"
           xmlns:h="http://java.sun.com/jsf/html"
           xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;
 &lt;jsp:directive.page contentType="text/html;charset=UTF-8"
                     pageEncoding="UTF-8"/&gt;
 &lt;f:view&gt;
     &lt;webuijsf:page&gt;
 	&lt;webuijsf:html&gt;
 	    &lt;webuijsf:head title="Wizard Example" /&gt;
 	    &lt;webuijsf:body&gt;
 	    &lt;webuijsf:form id="form1"&gt;
 		&lt;webuijsf:breadcrumbs id="breadcrumbs"&gt;
 		    &lt;webuijsf:hyperlink url="../faces/index.jsp"
 			text="TestApp Index"/&gt;
 		    &lt;webuijsf:hyperlink url="../faces/wizard/index.jsp"
 		    text="Wizard"/&gt;
 		&lt;/webuijsf:breadcrumbs&gt;
 		&lt;f:verbatim&gt;&lt;![CDATA[
 		&lt;script type="text/javascript"&gt;
 	    function golden_mean_top(height) {
 		return ((screen.height-(screen.height/1.618))-(height/2));
 	    }
 	    function golden_mean_left(width) {
 		return ((screen.width-width)/2);
 	    }
 	    function wizard_popup(url, name, height, width) {
 		var top=golden_mean_top(height);
 		var left=golden_mean_left(width);
 		var newurl = url + "?&amp;amp;WIZARD_NAME=" + name;
 		var args= "height=" + height + ",width=" + width +
 			    ",top=" + top + ",left=" + left;
 		window.open(newurl, name, args);
 		return false;
 	    }
 	    function wizard_launch(url) {
 		wizard_popup("../faces/wizard/" + url,
 			"Wizard", 400, 600);
 	    }
 		&lt;/script&gt;]]&gt;
 		&lt;/f:verbatim&gt;
 	&lt;webuijsf:panelGroup style="margin-left:10px"
 	    id="linkGroup" separator="&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;"&gt;
 	    &lt;webuijsf:button primary="true"
 	id="wizard_popup3" text="Create Email Account (Simple)"
 	    onClick="wizard_launch('emailaccount.jsp'); return false;"/&gt;
 	    &lt;webuijsf:button primary="true"  id="wizard_popup1"
 		text="Launch Submitting Steps Wizard"
                 onClick="wizard_launch('wizard-submit-component-steps.jsp'); return false;"/&gt;
 	&lt;/webuijsf:panelGroup&gt;
 	    &lt;/webuijsf:form&gt;
 	    &lt;/webuijsf:body&gt;
         &lt;/webuijsf:html&gt;
     &lt;/webuijsf:page&gt;
 &lt;/f:view&gt;
 &lt;/jsp:root&gt;
 </pre> 
]]></description>
    </tag>

    <tag>
        <name>wizardBranch</name>

        <description><![CDATA[ <p>
 Use the <code>webuijsf:wizardBranch</code> tag to
 define a branch of steps within a wizard.&nbsp; The <code>webuijsf:wizardBranch</code> 
 tag must be used as a child of the <a href="wizard.html"><code>webuijsf:wizard</code></a>
 tag, or as a child of another <code>webuijsf:wizardBranch</code>
 tag.
 </p>
 <p>
 The <code>webuijsf:wizardBranch</code> tag is a
 container for <a href="wizardBranchSteps.html"><code>webuijsf:wizardBranchSteps</code></a>,
 which define the different branch sequences that can be followed. The
 content of each step of a branch sequence is then defined with <a
  href="wizardStep.html"><code>webuijsf:wizardStep</code></a>
 tags.
 </p>
 <p>The <code>webuijsf:wizardBranch</code> tag should be
 used when the paths from the branch diverge, and never return to a common step 
 after the branch. If you want the branches to return to a common step in the 
 major sequence of steps in the wizard, you should use the <code>webuijsf:wizardSubstepBranch</code>
 tag. See the <a href="wizardSubstepBranch.html"><code>webuijsf:wizardSubstepBranch</code></a>
 documentation.
 </p>
 <p>
 See the Sun Web Application Guidelines 3.0 for more information about
 deciding which type of branching to use.
 </p>
 <h3>HTML Elements and Layout</h3>
 <p>
 No HTML elements are rendered for the <code>webuijsf:wizardBranch</code>
 tag. The <code>webuijsf:wizardBranch</code>
 tag's function is to contain the branch sequences, and to provide a way
 to conditionally render one of the sequences.
 </p>
 <p>
 When the user progresses through a wizard and arrives at a step that is
 followed by a branch, the Steps pane displays placeholder text for that
 step. The placeholder text is used instead of the summary text that
 would normally be shown for a step, because the steps to be taken are
 at this point undetermined.&nbsp; The placeholder text is replaced
 by the step summary text after the branch path is chosen. 
 </p>
 <h3>Using the <code>webuijsf:wizardBranch</code> tag</h3>
 <p>The <code>webuijsf:wizardBranch</code> tag lets you define multiple
 branches that contain sequences of steps, and to determine whether the
 branch should be taken. 
 </p>
 <p>
 The value of the <code>webuijsf:wizardBranch</code> tag's <code>taken</code>
 attribute determines whether the branch is followed. When <code>taken</code>
 is set to true, the branch is followed. If <code>taken</code>
 is false, the branch is not followed. The value of the <code>taken</code>
 attribute should be set to an expression that uses the user's response
 in a preceding step, to determine whether the branch should be
 followed. 
 </p>
 <p>
 The <code>placeholderText</code> attribute is
 used to specify text that is to be displayed in the Steps pane when the 
 branching step is displayed. The branching step gathers responses from the
 user so that the wizard can determine which branch to take, if any. The 
 <code>placeholderText</code> value is displayed only while the <code>taken</code>
 attribute is false. Typically, you would want the <code>taken</code>
 attribute to evaluate to false when the branching step is initially displayed,
 before the user makes a response that can be used in setting the value
 of the <code>taken</code> attribute. 
 </p>
 <p>
 The <code>webuijsf:wizardBranchSteps</code> tag is used
 for each possible sequence that can be followed in the branch.</p>
 <p>The following pseudocode shows the relationship of the wizard
 components when using the wizardBranch: </p>
 <p>
 <code>&lt;webuijsf:wizard&gt;<br>
 &nbsp;&nbsp;&nbsp; <span style="font-style: italic;">...
 (initial
 steps where no branching is needed)</span><br>
 <br>
 &nbsp; &nbsp; &lt;webuijsf:wizardStep&gt;<br>
 </code><code>&nbsp; &nbsp; &nbsp; &nbsp;
 &nbsp; &nbsp;&nbsp; <span style="font-style: italic;">The
 user's choice in this wizardStep
 should be used to </span></code><br>
 <code><span style="font-style: italic;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 determine whether the branch </span><span
  style="font-style: italic;">is
 followed.&nbsp; Note that the </span></code><br>
 <code><span style="font-style: italic;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 wizardBranch is NOT a child of the wizardStep component. </span></code>
 </p>
 <p><code></code></p>
 <code><span style="font-style: italic;">&nbsp;</span></code><code>&nbsp;&nbsp;
 &lt;/webuijsf:wizardStep&gt;</code><code> <br>
 </code><code><span style="font-style: italic;">&nbsp;</span>
 <br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:wizardBranch&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 <span style="font-style: italic;">The wizard framework
 uses the
 wizardBranch's <span style="font-weight: bold;">taken</span>
 attribute
 value </span><br style="font-style: italic;">
 <span style="font-style: italic;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 to decide whether to process the branch. </span><br>
 <br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<span
  style="font-weight: bold;"> </span>&lt;webuijsf:wizardBranchSteps&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 <span style="font-style: italic;">This wizardBranchSteps
 component
 represents the first choice <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 available to the user in </span></code><code><span
  style="font-style: italic;">a wizardStep that occurs before
 the branch.</span></code>
 <code><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:wizardStep&gt;</code><code><span
  style="font-style: italic;"><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 These steps are only rendered when this branch is taken.</span></code><code><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:wizardStep&gt;</code><code> </code><br>
 <code><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp; </code><code>&lt;webuijsf:wizardStep</code><code></code><code>&gt;</code><code><span
  style="font-style: italic;"><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 ...</span></code><code> <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:wizardStep&gt;</code><code> <br>
 <br>
 </code><code></code><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 </code><code>&lt;webuijsf:wizardStep</code><code>&gt;</code><code><span
  style="font-style: italic;"><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 ...</span></code><code> <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:wizardStep&gt;</code><code> </code><code></code><br>
 <code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp; &nbsp;&nbsp; ...<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:wizardBranchSteps&gt;<br>
 &nbsp;&nbsp; <br>
 &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<span
  style="font-weight: bold;"> </span>&lt;webuijsf:wizardBranchSteps&gt;<br>
 </code><code><span style="font-style: italic;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 This wizardBranchSteps component represents the second choice <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 available to the user in a wizardStep that occurs before the branch.<br>
 </span></code><code><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 </code><code>&lt;webuijsf:wizardStep</code><code></code><code>&gt;</code><code><span
  style="font-style: italic;"><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 ...</span></code><code> <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:wizardStep&gt;</code>
 <br>
 <code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:wizardStep</code><code></code><code>&gt;</code>
 <code> <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:wizardStep&gt;</code>
 <code><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &nbsp; &nbsp;&nbsp; ...<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:wizardBranchSteps&gt;<br>
 <br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:wizardBranch&gt;<br>
 <br>
 &lt;/webuijsf:wizard&gt;<br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
 </code>
 <h3>Client-side JavaScript Functions</h3>
 <p>None.</p>
 <h3><a name="Examples"></a>Examples</h3>
 <p>
 The example shown here is for creating a branching wizard. This
 example uses the following files:</p>
 <ul>
   <li><a href="./wizard.html#wizardEventListener">emailAccount
 backing bean</a> example (shown in the <code>webuijsf:wizard</code>
 tag documentation)</li>
   <li><a href="wizardBranch.html#emailaccount-branch.jsp">emailaccount-branch.jsp</a>
   </li>
   <li><a href="wizardBranch.html#acctname.jsp">acctname.jsp</a></li>
   <li><a href="wizardBranch.html#accttype.jsp">accttype.jsp</a></li>
   <li><a href="wizardBranch.html#emailserver.jsp">emailserver.jsp</a></li>
   <li><a href="wizardBranch.html#identity.jsp">identity.jsp</a></li>
   <li><a href="wizardBranch.html#inboxtype.jsp">inboxtype.jsp</a></li>
   <li><a href="wizardBranch.html#movemailserver.jsp">movemailserver.jsp</a></li>
   <li><a href="wizardBranch.html#newsserver.jsp">newsserver.jsp</a></li>
   <li><a href="wizardBranch.html#outgoingserver.jsp">outgoingserver.jsp</a></li>
   <li><a href="wizardBranch.html#username.jsp">username.jsp</a></li>
   <li><a href="wizardBranch.html#verifyfinish.jsp">verifyfinish.jsp</a></li>
 </ul>
 <h4>Example 1: Branching Wizard</h4>
 <p>This <code>emailaccount-branch.jsp</code> example shows a
 complete JSP page that uses <code>webuijsf:wizardBranch.</code> </p>
 <p>This wizard includes:</p>
 <ul>
   <li>a branch</li>
   <li>a Finish page to allows users to verify information before
 submitting</li>
   <li>a View Results page to give feedback to users that the
 wizard task completed</li>
   <li>step content specified though <code>f:subview</code>
 tags<br>
   </li>
 </ul>
 <h4><a name="emailaccount-branch.jsp"></a>emailaccount-branch.jsp</h4>
 <pre>&lt;jsp:root version="1.2"<br>
           xmlns:jsp="http://java.sun.com/JSP/Page"<br>
           xmlns:f="http://java.sun.com/jsf/core"<br>
           xmlns:h="http://java.sun.com/jsf/html"<br>
           xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;<br>
 &lt;jsp:directive.page contentType="text/html;charset=UTF-8"<br>
                     pageEncoding="UTF-8"/&gt;<br>
 &lt;f:view&gt;<br>
     &lt;webuijsf:page&gt;<br>
 	&lt;webuijsf:html&gt;<br>
 	    &lt;webuijsf:head title="Wizard Example" /&gt;<br>
 	    &lt;webuijsf:body <br>
 		onLoad="document.getElementById('form1:wizard1').wizOnLoad()"&gt;<br>
 		&lt;webuijsf:form id="form1"&gt;<br>
 <br>
     &lt;webuijsf:wizard id="wizard1" title="Create Account"<br>
 	eventListener="#{emailAccount.wizardEventListener}" &gt;<br>
 <br>
 <br>
 	&lt;!-- The first step, user chooses an account type.<br>
 	     This example is contrived in that you would never<br>
 	     have the first step as a choice and then branch.<br>
 	     You would have separate wizards, that shared jsp<br>
 	     pages, but the choice on a main page that would<br>
 	     launch the appropriate wizard.<br>
 <br>
 	--&gt;<br>
 <br>
 	&lt;webuijsf:wizardStep id="step1"<br>
 	    summary="Choose Account Type"<br>
 	    title=" New Account Setup"<br>
 	    detail="Select the type of account you would like to set up:"<br>
 	    help="In order to receive messages, you first need to set up a Mail or <br>
                   Newsgroup account. This Wizard will collect the information necessary <br>
                   to set up a Mail or Newsgroup account. If you do not know the information <br>
                   requested, please contact your System Administrator or Internet Service Provider."&gt;<br>
 <br>
 	    &lt;jsp:include page="../wizard/acct-steps/accttype.jsp"/&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 <br>
 	&lt;!-- Take the branch if a choice was made on the first step.<br>
 	     wizardBranchSteps are taken based on the choice made.<br>
 	--&gt;<br>
 	&lt;webuijsf:wizardBranch id="branch"<br>
 	    taken='#{emailAccount.acctType != ""}'<br>
 	    placeholderText="The steps that will follow are determined based on the type of account chosen" &gt;<br>
            <br>
 	&lt;webuijsf:wizardBranchSteps id="bs0"<br>
 	    taken='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail" || emailAccount.acctType == "Newsgroup"}'&gt;<br>
 <br>
 	&lt;webuijsf:wizardStep id="step2"<br>
 	    eventListener="#{emailAccount.wizardStepEventListener}"<br>
 	    summary="Specify Email Identity"<br>
 	    title="Identity"<br>
 	    detail="Enter outgoing email name and email address."<br>
 	    help="Each account has an identity, which is the information that <br>
                   identifies you to others when they receive your messages. Enter the <br>
                   name you would like to appear in the From field of your outgoing messages, <br>
                   for example, John Smith. Then enter your email address. This is the address <br>
                   others will use to send email to you, for example john.smith@example.com."&gt;<br>
 <br>
 	    &lt;jsp:include page="../wizard/acct-steps/identity.jsp"/&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 <br>
 	&lt;/webuijsf:wizardBranchSteps&gt;<br>
 <br>
 	&lt;webuijsf:wizardBranchSteps id="bs1"<br>
 	    taken='#{emailAccount.acctType == "EmailAccount"}'&gt;<br>
 <br>
 	&lt;webuijsf:wizardStep id="step3"<br>
 	    summary="Specify Email Server"<br>
 	    title="Email Server Information"<br>
 	    detail="Select the type of incoming server and outgoing server name."<br>
 	    help="&amp;lt;p&amp;gt;Select the type of the incoming server you are using. Then enter the name <br>
                   of your incoming server, for example, mail.example.com.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Then enter the <br>
                   outgoing (SMTP) server name, for example, smtp.example.com&amp;lt;/p&amp;gt;"&gt;<br>
 <br>
 	    &lt;jsp:include page="../wizard/acct-steps/emailserver.jsp"/&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 <br>
 <span
  style="color: rgb(255, 153, 0);"></span><br>
 	&lt;webuijsf:wizardStep id="step4"<br>
 	    summary="Specify User Name"<br>
 	    title="User Names"<br>
 	    detail="Enter email provider assigned user name."<br>
 	    help="Enter your existing outgoing and incoming (SMTP) username, <br>
                   for example jsmith. You can modify outgoing server settings by <br>
                   choosing Account Settings from the Tools menu."&gt;<br>
 <br>
 	    &lt;jsp:include page="../wizard/acct-steps/username.jsp"/&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 <br>
 	&lt;/webuijsf:wizardBranchSteps&gt;<br>
 <br>
 	&lt;!-- For a movemail account only an outgoing server is needed.--&gt;<br>
 <br>
 	&lt;webuijsf:wizardBranchSteps id="bs2"<br>
 	    taken='#{emailAccount.acctType == "MoveMail"}'&gt;<br>
 <br>
 	&lt;webuijsf:wizardStep id="step3"<br>
 	    summary="Specify Outgoing Server"<br>
 	    title="Outgoing Server Information"<br>
 	    detail="Specify the outgoing server name."<br>
 	    help="Enter the outgoing (SMTP) server name, for example, smtp.example.com."&gt;<br>
 <br>
 	    &lt;jsp:include page="../wizard/acct-steps/outgoingserver.jsp"/&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 <br>
 	&lt;/webuijsf:wizardBranchSteps&gt;<br>
 <br>
 	&lt;webuijsf:wizardBranchSteps id="bs3"<br>
 	    taken='#{emailAccount.acctType == "Newsgroup"}'&gt;<br>
 <br>
 	&lt;webuijsf:wizardStep id="step3"<br>
 	    summary="Specify News Server"<br>
 	    title="News Server Information"<br>
 	    detail="Specify the news server name."<br>
 	    help="Enter the news (NNTP) server name, for example, news.example.com."&gt;<br>
 	    &lt;jsp:include page="../wizard/acct-steps/newsserver.jsp"/&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 <br>
 	&lt;/webuijsf:wizardBranchSteps&gt;<br>
 <br>
 	&lt;!-- Always taken --&gt;<br>
 <br>
 	&lt;webuijsf:wizardStep id="step5"<br>
 	    summary="Specify Account Name"<br>
 	    title="Account Name"<br>
 	    detail="The name of the account."<br>
 	    help="Enter the name by which you would like to refer to this account, <br>
                   for example Work Account, Home Account, or News Account, etc."&gt;<br>
 <br>
 	    &lt;jsp:include page="../wizard/acct-steps/acctname.jsp"/&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 <br>
 	&lt;webuijsf:wizardStep id="step6"<br>
 	    finish="true"<br>
 	    summary="Verify Information"<br>
 	    title="Verify Account Information"<br>
 	    detail="Verify the information below is correct."<br>
 	    help="Click finish to create the account and previous if corrections are required."<br>
 	    onFinish="alert('WizardStep onFinish')"&gt;<br>
 <br>
 	    &lt;jsp:include page="../wizard/acct-steps/verifyfinish.jsp"/&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 <br>
 	&lt;webuijsf:wizardStep id="step7"<br>
 	    results="true"<br>
 	    summary="Results"<br>
 	    title="Results"<br>
 	    detail="Congratualations. Account Created."<br>
 	    help="Click close to end the wizard session."<br>
 	    onClose="alert('WizardStep onClose')"&gt;<br>
 <br>
 	    &lt;jsp:include page="../wizard/acct-steps/verifyfinish.jsp"/&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 	&lt;/webuijsf:wizardBranch&gt;<br>
 <br>
     &lt;/webuijsf:wizard&gt;<br>
 <br>
 		&lt;/webuijsf:form&gt;<br>
 	    &lt;/webuijsf:body&gt;<br>
         &lt;/webuijsf:html&gt;<br>
     &lt;/webuijsf:page&gt;<br>
 &lt;/f:view&gt;<br>
 &lt;/jsp:root&gt;<br>
 <br>
 </pre>
 <h3>Included JSP Pages</h3>
 <p>
 The JSP pages shown here provide the content of the steps in wizard
 that is used in the <code>emailaccount-branch.jsp</code>.</p>
 <h4><a name="acctname.jsp"></a>acctname.jsp</span></h4>
 <pre>&lt;jsp:root version="1.2"<br>
           xmlns:jsp="http://java.sun.com/JSP/Page"<br>
           xmlns:f="http://java.sun.com/jsf/core"<br>
           xmlns:h="http://java.sun.com/jsf/html"<br>
           xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;<br>
 &lt;jsp:directive.page contentType="text/html;charset=ISO-8859-1"<br>
                     pageEncoding="UTF-8"/&gt;<br>
 <br>
 &lt;f:subview id="sv_acctname"&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:label id="acctnamelbl" text="Account Name"/&gt;<br>
 	    &lt;webuijsf:textField id="acctnamefld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.acctName}'/&gt;<br>
 	    &lt;h:message id="acctnamefld_msg" for="acctnamefld"<br>
 		showDetail="true"/&gt;<br>
 <br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 &lt;/f:subview&gt;<br>
 &lt;/jsp:root&gt;<br>
 <br>
 </pre>
 <h4><a name="accttype.jsp"></a>accttype.jsp</h4>
 <pre>&lt;jsp:root version="1.2"<br>
           xmlns:jsp="http://java.sun.com/JSP/Page"<br>
           xmlns:f="http://java.sun.com/jsf/core"<br>
           xmlns:h="http://java.sun.com/jsf/html"<br>
           xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;<br>
 &lt;jsp:directive.page contentType="text/html;charset=ISO-8859-1"<br>
                     pageEncoding="UTF-8"/&gt;<br>
 <br>
 &lt;f:subview id="sv_accttype"&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:radioButton id="email" name="account"<br>
 		label="Email account"<br>
 		selectedValue="EmailAccount"<br>
 		selected="#{emailAccount.acctType}"/&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 	    <br>
 	    &lt;webuijsf:radioButton id="movemail" name="account"<br>
 		label="Movemail"<br>
 		selectedValue="MoveMail"<br>
 		selected="#{emailAccount.acctType}"/&gt;<br>
 	    <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 	    <br>
 	    &lt;webuijsf:radioButton id="rss" name="account"<br>
 		label="RSS News and Blogs"<br>
 		selectedValue="RSSNewsAndBlogs"<br>
 		selected="#{emailAccount.acctType}"/&gt;<br>
 	    <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 	    <br>
 	    &lt;webuijsf:radioButton id="news" name="account"<br>
 		label="Newsgroup account"<br>
 		selectedValue="Newsgroup"<br>
 		selected="#{emailAccount.acctType}"/&gt;<br>
 	    <br>
 	    &lt;/webuijsf:markup&gt;<br>
 &lt;/f:subview&gt;<br>
 &lt;/jsp:root&gt;<br>
 </pre>
 <h4><a name="emailserver.jsp"></a>emailserver.jsp</h4>
 <pre>&lt;jsp:root version="1.2"<br>
           xmlns:jsp="http://java.sun.com/JSP/Page"<br>
           xmlns:f="http://java.sun.com/jsf/core"<br>
           xmlns:h="http://java.sun.com/jsf/html"<br>
           xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;<br>
 &lt;jsp:directive.page contentType="text/html;charset=ISO-8859-1"<br>
                     pageEncoding="UTF-8"/&gt;<br>
 <br>
 &lt;f:subview id="sv_emailserver"&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:radioButton id="pop" name="mailservertype"<br>
 		label="POP"<br>
 		selectedValue="Pop"<br>
 		selected="#{emailAccount.serverType}"/&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 	    <br>
 	    &lt;webuijsf:radioButton id="imap" name="mailservertype"<br>
 		label="IMAP"<br>
 		selectedValue="Imap"<br>
 		selected="#{emailAccount.serverType}"/&gt;<br>
 	    <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="inserverlbl" text="Incoming Server"/&gt;<br>
 	    &lt;webuijsf:textField id="inserverfld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.inServer}'/&gt;<br>
 	    &lt;h:message id="inserverfld_msg" for="inserverfld"<br>
 		showDetail="true"/&gt;<br>
 	    <br>
 	    &lt;jsp:include page="../../wizard/acct-steps/outgoingserver.jsp"/&gt;<br>
 <br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 &lt;/f:subview&gt;<br>
 &lt;/jsp:root&gt;<br>
 <br>
 </pre>
 <h4><a name="identity.jsp"></a>identity.jsp</h4>
 <pre>&lt;jsp:root version="1.2"<br>
           xmlns:jsp="http://java.sun.com/JSP/Page"<br>
           xmlns:f="http://java.sun.com/jsf/core"<br>
           xmlns:h="http://java.sun.com/jsf/html"<br>
           xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;<br>
 &lt;jsp:directive.page contentType="text/html;charset=ISO-8859-1"<br>
                     pageEncoding="UTF-8"/&gt;<br>
 <br>
 &lt;f:subview id="sv_identity"&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:label id="namelbl" text="Your Name"/&gt;<br>
 	    &lt;webuijsf:textField id="namefld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.userName}'/&gt;<br>
 	    &lt;h:message id="namefld_msg" for="namefld"<br>
 		showDetail="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="eaddrlbl" text="Email Address"/&gt;<br>
 	    &lt;webuijsf:textField id="eaddrfld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.emailAddr}'/&gt;<br>
 	    &lt;h:message id="eaddrfld_msg" for="eaddrfld"<br>
 		showDetail="true"/&gt;<br>
 <br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 <br>
 &lt;/f:subview&gt;<br>
 &lt;/jsp:root&gt;<br>
 <br>
 &nbsp;&nbsp;&nbsp; <br>
 </pre>
 <h4><a name="inboxtype.jsp"></a>inboxtype.jsp</h4>
 <pre>&lt;jsp:root version="1.2"<br>
           xmlns:jsp="http://java.sun.com/JSP/Page"<br>
           xmlns:f="http://java.sun.com/jsf/core"<br>
           xmlns:h="http://java.sun.com/jsf/html"<br>
           xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;<br>
 &lt;jsp:directive.page contentType="text/html;charset=ISO-8859-1"<br>
                     pageEncoding="UTF-8"/&gt;<br>
 <br>
 &lt;f:subview id="sv_inboxtype"&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:checkbox id="inbox" name="inboxtype"<br>
 		label="Use Global Inbox (store mail in Local Folders)"<br>
 		selected="#{emailAccount.globalInbox}"/&gt;<br>
 <br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 <br>
 &lt;/f:subview&gt;<br>
 &lt;/jsp:root&gt;<br>
 <br>
 </pre>
 <h4><a name="movemailserver.jsp"></a>movemailserver.jsp</h4>
 <pre>&lt;jsp:root version="1.2"<br>
           xmlns:jsp="http://java.sun.com/JSP/Page"<br>
           xmlns:f="http://java.sun.com/jsf/core"<br>
           xmlns:h="http://java.sun.com/jsf/html"<br>
           xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;<br>
 &lt;jsp:directive.page contentType="text/html;charset=ISO-8859-1"<br>
                     pageEncoding="UTF-8"/&gt;<br>
 <br>
 &lt;f:subview id="sv_mvmailserver"&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:label id="outserverlbl" text="Outgoing Server"/&gt;<br>
 	    &lt;webuijsf:textField id="outserverfld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.outServer}'/&gt;<br>
 	    &lt;h:message id="outserverfld_msg" for="outserverfld"<br>
 		showDetail="true"/&gt;<br>
 	    <br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 &lt;/f:subview&gt;<br>
 &lt;/jsp:root&gt;<br>
 <br>
 </pre>
 <h4><a name="newsserver.jsp"></a>newsserver.jsp</h4>
 <pre>&lt;jsp:root version="1.2"<br>
           xmlns:jsp="http://java.sun.com/JSP/Page"<br>
           xmlns:f="http://java.sun.com/jsf/core"<br>
           xmlns:h="http://java.sun.com/jsf/html"<br>
           xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;<br>
 &lt;jsp:directive.page contentType="text/html;charset=ISO-8859-1"<br>
                     pageEncoding="UTF-8"/&gt;<br>
 <br>
 &lt;f:subview id="sv_newsserver"&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="outserverlbl" text="News Server"/&gt;<br>
 	    &lt;webuijsf:textField id="outserverfld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.outServer}'/&gt;<br>
 	    &lt;h:message id="outserverfld_msg" for="outserverfld"<br>
 		showDetail="true"/&gt;<br>
 	    <br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 &lt;/f:subview&gt;<br>
 &lt;/jsp:root&gt;<br>
 <br>
 </pre>
 <h4><a name="outgoingserver.jsp"></a>outgoingserver.jsp</h4>
 <pre>&lt;jsp:root version="1.2"<br>
           xmlns:jsp="http://java.sun.com/JSP/Page"<br>
           xmlns:f="http://java.sun.com/jsf/core"<br>
           xmlns:h="http://java.sun.com/jsf/html"<br>
           xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;<br>
 &lt;jsp:directive.page contentType="text/html;charset=ISO-8859-1"<br>
                     pageEncoding="UTF-8"/&gt;<br>
 <br>
 &lt;f:subview id="sv_outgoingserver"&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="outserverlbl" text="Outgoing Server"/&gt;<br>
 	    &lt;webuijsf:textField id="outserverfld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.outServer}'/&gt;<br>
 	    &lt;h:message id="outserverfld_msg" for="outserverfld"<br>
 		showDetail="true"/&gt;<br>
 	    <br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 &lt;/f:subview&gt;<br>
 &lt;/jsp:root&gt;<br>
 <br>
 </pre>
 <h4><a name="username.jsp"></a>username.jsp</h4>
 <pre>&lt;jsp:root version="1.2"<br>
           xmlns:jsp="http://java.sun.com/JSP/Page"<br>
           xmlns:f="http://java.sun.com/jsf/core"<br>
           xmlns:h="http://java.sun.com/jsf/html"<br>
           xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;<br>
 &lt;jsp:directive.page contentType="text/html;charset=ISO-8859-1"<br>
                     pageEncoding="UTF-8"/&gt;<br>
 <br>
 &lt;f:subview id="sv_username"&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:label id="innamelbl" text="Incoming User Name"/&gt;<br>
 	    &lt;webuijsf:textField id="innamefld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.inName}'/&gt;<br>
 	    &lt;h:message id="innamefld_msg" for="innamefld"<br>
 		showDetail="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="outnamelbl" text="Outgoing User Name"/&gt;<br>
 	    &lt;webuijsf:textField id="outnamefld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.outName}'/&gt;<br>
 	    &lt;h:message id="outnamefld_msg" for="outnamefld"<br>
 		showDetail="true"/&gt;<br>
 <br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 &lt;/f:subview&gt;<br>
 &lt;/jsp:root&gt;<br>
 <br>
 </pre>
 <h4><a name="verifyfinish.jsp"></a>verifyfinish.jsp</h4>
 <pre>&lt;jsp:root version="1.2"<br>
           xmlns:jsp="http://java.sun.com/JSP/Page"<br>
           xmlns:f="http://java.sun.com/jsf/core"<br>
           xmlns:h="http://java.sun.com/jsf/html"<br>
           xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;<br>
 &lt;jsp:directive.page contentType="text/html;charset=ISO-8859-1"<br>
                     pageEncoding="UTF-8"/&gt;<br>
 <br>
 &lt;f:subview id="sv_verifyfinish"&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	&lt;!-- account type --&gt;<br>
 	    &lt;webuijsf:label id="v_accttypelbl" text="Account Type:"/&gt;<br>
 	    &lt;webuijsf:staticText id="v_accttypetxt"<br>
 		text='#{emailAccount.acctType}'/&gt;<br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 	&lt;!-- account type --&gt;<br>
 <br>
 	&lt;!-- user name --&gt;<br>
 	    &lt;webuijsf:label id="v_usernamelbl" text="User Name:"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail" || emailAccount.acctType == "Newsgroup"}'/&gt;<br>
 	    &lt;webuijsf:staticText id="v_usernametxt"<br>
 		text='#{emailAccount.userName}'<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail" || emailAccount.acctType == "Newsgroup"}'/&gt;<br>
 	    &lt;webuijsf:markup tag="br" singleton="true"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail" || emailAccount.acctType == "Newsgroup"}'/&gt;<br>
 	&lt;!-- user name --&gt;<br>
 <br>
 	&lt;!-- account name --&gt;<br>
 	    &lt;webuijsf:label id="v_acctnamelbl" text="Account Name:"/&gt;<br>
 	    &lt;webuijsf:staticText id="v_acctnametxt"<br>
 		text='#{emailAccount.acctName}'/&gt;<br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 	&lt;!-- account name --&gt;<br>
 <br>
 	&lt;!-- email address --&gt;<br>
 	    &lt;webuijsf:label id="v_eaddrlbl" text="Email Address:"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail" || emailAccount.acctType == "Newsgroup"}'/&gt;<br>
 	    &lt;webuijsf:staticText id="v_eaddrtxt"<br>
 		text='#{emailAccount.emailAddr}'<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail" || emailAccount.acctType == "Newsgroup"}'/&gt;<br>
 	    &lt;webuijsf:markup tag="br" singleton="true"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail" || emailAccount.acctType == "Newsgroup"}'/&gt;<br>
 	&lt;!-- email address --&gt;<br>
 <br>
 	&lt;!-- incoming user name --&gt;<br>
 	    &lt;webuijsf:label id="v_innamelbl" text="Incoming User Name:"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount"}'/&gt;<br>
 	    &lt;webuijsf:staticText id="v_innametxt"<br>
 		text='#{emailAccount.inName}'<br>
 		rendered='#{emailAccount.acctType == "EmailAccount"}'/&gt;<br>
 	    &lt;webuijsf:markup tag="br" singleton="true"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount"}'/&gt;<br>
 	&lt;!-- incoming user name --&gt;<br>
 <br>
 	&lt;!-- incoming server name --&gt;<br>
 	    &lt;webuijsf:label id="v_insrvnamelbl" text="Incoming Server Name:"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount"}'/&gt;<br>
 	    &lt;webuijsf:staticText id="v_insrvnametxt"<br>
 		text='#{emailAccount.inServer}'<br>
 		rendered='#{emailAccount.acctType == "EmailAccount"}'/&gt;<br>
 	    &lt;webuijsf:markup tag="br" singleton="true"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount"}'/&gt;<br>
 	&lt;!-- incoming server name --&gt;<br>
 <br>
         &lt;!-- incoming server type --&gt;<br>
 	    &lt;webuijsf:label id="v_insrvtypelbl" text="Incoming Server Type:"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail"}'/&gt;<br> &lt;webuijsf:staticText id="v_insrvtypetxt"<br>
 		text='#{emailAccount.serverType}'<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail"}'/&gt;<br>
 	    &lt;webuijsf:markup tag="br" singleton="true"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail"}'/&gt;<br>
 	&lt;!-- incoming server type --&gt;<br>
 <br>
 	&lt;!-- global inbox  --&gt;<br>
 	    &lt;webuijsf:label id="v_glbinblbl" text="Pop Inbox Type:"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" &amp;amp;&amp;amp; emailAccount.serverType == "Pop"}'/&gt;<br>
 	    &lt;webuijsf:staticText id="v_glbinbtxt0"<br>
 		text='Inbox in Local Folders'<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" &amp;amp;&amp;amp; emailAccount.serverType == "Pop" &amp;amp;&amp;amp; emailAccount.globalInbox == "true"}'/&gt;<br>
 	    &lt;webuijsf:staticText id="v_glbinbtxt1"<br>
 		text='Inbox in Top Level Account'<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" &amp;amp;&amp;amp; emailAccount.serverType == "Pop" &amp;amp;&amp;amp; emailAccount.globalInbox == "false"}'/&gt;<br>
 	    &lt;webuijsf:markup tag="br" singleton="true"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" &amp;amp;&amp;amp; emailAccount.serverType == "Pop"}'/&gt;<br>
 	&lt;!-- global inbox --&gt;<br>
 <br>
 	&lt;!-- outgoing user name --&gt;<br>
 	    &lt;webuijsf:label id="v_outnamelbl" text="Outgoing User Name:"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail" || emailAccount.acctType == "Newsgroup"}'/&gt;<br>
 	    &lt;webuijsf:staticText id="v_outnametxt"<br>
 		text='#{emailAccount.outName}'<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail" || emailAccount.acctType == "Newsgroup"}'/&gt;<br>
 	    &lt;webuijsf:markup tag="br" singleton="true"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail" || emailAccount.acctType == "Newsgroup"}'/&gt;<br>
 	&lt;!-- outgoing user name --&gt;<br>
 <br>
 	&lt;!-- outgoing server name --&gt;<br>
 	    &lt;webuijsf:label id="v_outsrvnamelbl" text="Outgoing Server Name:"<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail"}'/&gt;<br>
 	    &lt;webuijsf:label id="v_outsrvnamelbl0" text="News Server Name:"<br>
 		rendered='#{emailAccount.acctType == "Newsgroup"}'/&gt;<br>
 	    &lt;webuijsf:staticText id="v_outsrvnametxt"<br>
 		text='#{emailAccount.outServer}'<br>
 		rendered='#{emailAccount.acctType == "EmailAccount" || emailAccount.acctType == "MoveMail" || emailAccount.acctType == "Newsgroup"}'/&gt;<br>
 	&lt;!-- outgoing server name --&gt;<br>
 <br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 &lt;/f:subview&gt;<br>
 &lt;/jsp:root&gt;<br>
 <br>
 </pre>
]]></description>
    </tag>

    <tag>
        <name>wizardBranchSteps</name>

        <description><![CDATA[ <p>Use the <code>webuijsf:wizardBranchSteps</code> tag to
 define a sequence of steps within a branch of a wizard, which is specified with 
 a <code>webuijsf:wizardBranch</code> tag. For each choice a user might make, use one 
 <code>webuijsf:wizardBranchSteps</code> tag. Within a <code>webuijsf:wizardBranchSteps</code>
 tag, use one or more <code>webuijsf:wizardStep</code> tags. See the <a
  href="wizardBranch.html"><code>webuijsf:wizardBranch</code></a> 
 tag documentation for more information. </p>
 <h3>HTML Elements and Layout</h3>
 <p>
 No HTML elements are rendered for the wizardBranchSteps component. 
 The <code>webuijsf:wizardBranchSteps</code> tag's function is to contain the step 
 tags of each branch sequence, and to provide a way to conditionally render the
 sequence. </p>
 <h3>Client-side JavaScript Functions</h3>
 <p>None.</p>
 <h3>Examples</h3>
 <p>
 See the <code>webuijsf:wizardBranch</code> tag <a href="wizardBranch.html#Examples">
 examples</a>.
 </p>
]]></description>
    </tag>

    <tag>
        <name>wizardStep</name>

        <description><![CDATA[
 <p>Use the <code>webuijsf:wizardStep</code> tag to define
 a single step of a wizard. 
 </p>
 <p>In a simple wizard, the <code>webuijsf:wizardStep</code> tag is a child of the 
 <a href="wizard.html"><code>webuijsf:wizard</code></a> tag. In a branching wizard,
 the <code>webuijsf:wizardStep</code> tag can be used as a child of the 
 <a href="wizardBranchSteps.html"><code>webuijsf:wizardBranchSteps</code></a>
 tag or <a href="wizardSubstepBranch.html"><code>webuijsf:wizardSubstepBranch</code></a> 
 tag.</p>
 <h3>HTML Elements and Layout</h3>
 <p>
 The only HTML element that is rendered specifically for the WizardStep
 component is <code>&lt;webuijsf:markup tag="div" styleClass="#{themeStyles.WIZARD_TASK}"&gt;</code>.&nbsp;
 The <code>WizTsk</code>
 class selector is not defined by the suntheme or the defaulttheme, so
 the <code>&lt;div&gt;</code> uses default
 rendering. The <code>&lt;div&gt;</code>
 contains the HTML that is rendered for the child tags that are
 contained in the <code>webuijsf:wizardStep</code> tag.</p>
 <p>
 The values that are specified in the <code>summary</code> and <code>help</code>
 attributes are displayed in the Steps tab and Help tab. The <code>title</code>
 value is displayed in the Step Title area, and the <code>detail</code>
 value is displayed in the Step Instructions area in the Step Content
 pane. The input components, labels, and so on that you specify as child
 components in the <code>webuijsf:wizardStep</code> are displayed
 in the Step Input Controls area in the Step Content pane. See the 
 <a href="wizard.html"><code>webuijsf:wizard</code></a> documentation for a detailed 
 description of all the wizard areas.</p>
 <p>
 The following diagram shows the relative location of the
 wizardStep areas. The areas that are controlled with the <code>webuijsf:wizardStep</code>
 tag are highlighted in light blue. The grayed out areas
 are controlled with the <code>webuijsf:wizard</code> tag, but are shown here
 for context.</p>
 <p>
 <table style="text-align: left; width: 100%;" border="1"
  cellpadding="2" cellspacing="2">
   <tbody>
     <tr style="color: rgb(153, 153, 153);">
       <td colspan="2" rowspan="1"
  style="background-color: rgb(237, 237, 237);">Wizard
 Title&nbsp;</td>
     </tr>
     <tr>
       <td
  style="vertical-align: top; background-color: rgb(237, 237, 237); color: rgb(153, 153, 153);"
  colspan="1" rowspan="1"><span
  style="color: rgb(153, 153, 153);">Steps
 Pane</span><br>
       <table style="text-align: left; width: 100%;" border="0"
  cellpadding="2" cellspacing="4">
         <tbody>
           <tr>
             <td
  style="width: 77px; background-color: rgb(210, 224, 235);">Steps
 Tab<span style="color: rgb(102, 102, 102);"><br>
             <br>
             <br>
             <br>
             <br>
             <br>
             <br>
             </span></td>
             <td
  style="width: 66px; vertical-align: top; background-color: rgb(210, 224, 235);">Help
 Tab<br>
             </td>
           </tr>
         </tbody>
       </table>
       </td>
       <td
  style="color: rgb(102, 102, 102); background-color: rgb(237, 237, 237);"><span
  style="color: rgb(153, 153, 153);">Step Content Pane</span><br>
       <table style="text-align: left; width: 100%;" border="1"
  cellpadding="2" cellspacing="2">
         <tbody>
           <tr>
             <td style="background-color: rgb(210, 224, 235);">Step
 Title&nbsp; <br>
             </td>
           </tr>
           <tr>
             <td style="background-color: rgb(210, 224, 235);">Step
 Instructions</td>
           </tr>
           <tr>
             <td style="background-color: rgb(210, 224, 235);">Step
 Input Controls<span style="color: rgb(102, 102, 102);"><br>
             <br>
             <br>
             </span></td>
           </tr>
         </tbody>
       </table>
       </td>
     </tr>
     <tr>
       <td colspan="2" rowspan="1" style="background-color: rgb(237, 237, 237);"><span
  style="color: rgb(153, 153, 153);">Navigation
 Controls </span>&nbsp; &nbsp; &nbsp; &nbsp;
 &nbsp;
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>
     </tr>
   </tbody>
 </table>
 </p>
 <br>
 <h3>Using the <code>webuijsf:wizardStep</code> Tag</h3>
 <p>
 Use the <code>webuijsf:wizardStep</code> tag attributes to
 provide information about the step, such as the <code>title</code>,
 <code>summary</code>, <code>detail</code>, and <code>help</code>. 
 These attributes are used in the wizard
 layout as described in the previous section.</p>
 <p>
 The <code>finish</code> attribute is used to
 indicate that the Navigation Controls area of the step should contain a Finish button
 that will execute the wizard task when clicked. 
 </p>
 <p>The <code>results</code> attribute is used to
 indicate that the step is a View Results page, which should contain a Close button in the
 Navigation Controls area. A View Results page comes after the Finish
 page, and is used to summarize the work that the wizard has performed,
 and lists any actions users should take after closing the wizard.
 </p>
 <p>The <code>webuijsf:wizardStep</code> tag also provides
 attributes (<code>onCancel</code>, <code>onClose</code>, etc.) for
 specifying client-side JavaScript to be executed when the user clicks
 on the various buttons and tabs. These attributes take precedence
 over similar attributes in the <code>webuijsf:wizard</code> tag. For
 example, if the <code>onNext</code> attribute is specified in both the
 <code>webuijsf:wizard</code> and <code>webuijsf:wizardStep</code> tags, only the JavaScript
 assigned to the <code>webuijsf:wizardStep</code> tag's <code>onNext</code>
 attribute is applied to the rendered Next button. However, for any steps in the
 wizard that do not specify the <code>onNext</code>
 attribute, the <code>webuijsf:wizard</code> tag's <code>onNext</code> attribute would be used. 
 </p>
 <p>The <code>eventListener</code> attribute is used to specify an event listener 
 for the step, which is executed as the user leaves the step
 and the form is submitted. See the <a href="wizard.html#EventListeners">
 Event Listeners</a> section in the wizard tag documentation for more information. </p>
 <p>
 Within the <code>webuijsf:wizardStep</code> tag, specify the tags for
 child components such as <code>webuijsf:staticText</code>, <code>webuijsf:textField</code>,
 <code>webuijsf:checkbox</code>, <code>webuijsf:radioButton</code>,
 and <code>webuijsf:dropDown</code> to create the content of the step.</p>
 <p>You can specify the content tags in a step in either of the
 following ways:</p>
 <ul>
   <li>Specify the step content tags within the body of the <code>webuijsf:wizardStep</code>
 tag, as shown in the following example.
     <p><code>&nbsp;&nbsp;&lt;webuijsf:wizard ...&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:wizardStep ...&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;...<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:textField id="name"
 &nbsp;&nbsp;&nbsp;&nbsp;... /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:textField
 id="address" ... /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;...<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&lt;/webuijsf:wizardStep&gt;<br>
 &nbsp;&nbsp;&lt;/webuijsf:wizard&gt;</code> </p>
   </li>
   <li>Specify the step content tags within a JSF <code>&lt;f:subview&gt;</code>
 tag in a separate JSP file. Use the <code>&lt;jsp:include&gt;</code>
 standard action in the <code>webuijsf:wizardStep</code> tag to
 include the
 JSP that contains the step content.&nbsp; In the example below, the
 subview tags are defined in the <code>step1.jsp</code>
 page.
     <p><code>&nbsp;&nbsp;&lt;webuijsf:wizard ...&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&lt;webuijsf:wizardStep ...&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;jsp:include
 page="steps/step1.jsp" /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&lt;/webuijsf:wizardStep&gt;<br>
 &nbsp;&nbsp;&lt;/webuijsf:wizard&gt;</code></p>
   </li>
 </ul>
 <div style="margin-left: 40px;">The <code>&lt;f:subview&gt;</code>
 tag
 in <code>step1.jsp</code> contains:<br>
 <p><code>&nbsp;&nbsp;&lt;f:subview id=sv_step1&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code> ...<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code>&lt;webuijsf:textField</code><code>
 id="name" ... /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code>&lt;webuijsf:textField</code><code>
 id="address" ... /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>
 &nbsp;&nbsp;/f:subview&gt;<br>
 </code></p>
 </div>
 <h4>Wizard Steps in a Branch</h4>
 <p>
 A wizard uses a branch when the sequence of steps is determined by the
 user's input. For example, the wizard can allow a user to
 choose one of two options, and that choice causes the wizard to proceed
 through one sequence of steps. If the user chooses the other option,
 the wizard proceeds through a different sequence. </p>
 <p>
 Note that you might be able to avoid branching, and simplify the
 wizard, if you can structure your application so that the user's choice
 is made before launching the wizard. You can use the user's
 choice to launch a different wizard to present each sequence of steps,
 which would require only the <code>webuijsf:wizard</code> and <code>webuijsf:wizardStep</code>
 tags.</p>
 <p>
 See the <a href="wizardBranchSteps.html"><code>webuijsf:wizardBranchSteps</code></a> 
 documentation and <a href="wizardSubstepBranch.html"><code>webuijsf:wizardSubstepBranch</code></a> 
 documentation for more information about how to implement
 branching. The <code>webuijsf:wizardStep</code> tag
 can be used a child of these branching tags, to create the steps in the branching
 sequence. </p>
 <h3>Client-side JavaScript Functions</h3>
 <p>None.</p>
 <h3>Examples</h3>
 <p>
 See the <code>webuijsf:wizard</code>
 tag <a href="wizard.html#Examples">example</a> for a simple wizard. See the webuijsf:wizardBranch tag <a
  href="wizardBranch.html#Examples">example</a>
 for a more complex wizard that uses branching.</p>
]]></description>
    </tag>

    <tag>
        <name>wizardSubstepBranch</name>

        <description><![CDATA[
 <p>Use the <code>webuijsf:wizardSubstepBranch</code> tag
 to define a substep branch within a step sequence of a <code>webuijsf:wizard</code>
 tag. A substep branch is a series of steps that are subordinate to a major
 step, and always followed by the next major step in the step sequence.
 A substep branch may or may not be taken. 
 </p>
 <p>A <code>webuijsf:wizardSubstepBranch</code> tag should
 be used when a step branches to related substeps before returning to the major step
 sequence. If the branched steps diverge and never return to a
 common step in the main step sequence, you should use the <code>webuijsf:wizardBranch</code>
 tag instead. See the <a href="wizardBranch.html"><code>webuijsf:wizardBranch</code></a>
 documentation. Also see the Sun Web Application Guidelines
 3.0 for more information about deciding which type of branching to use.
 </p>
 <p>A <code>webuijsf:wizardSubstepBranch</code> tag must be
 used as a child of a <code>webuijsf:wizard</code> tag or a <code>webuijsf:wizardBranchSteps</code>
 tag. The steps within the substep branch sequence are defined by <code>webuijsf:wizardStep</code>
 tags within the body of the <code>webuijsf:wizardSubstepBranch</code>
 tag. </p>
 <p> If the <code>taken</code> attribute is false, the <code>webuijsf:wizardStep</code>
 children are not presented to the user. Typically substep branches are
 not shown in the step list unless it is determined that the substeps
 are to be displayed. </p>
 <h3>HTML Elements and Layout</h3>
 <p>
 No HTML elements are rendered for the wizardSubstepBranch
 component. The content that is displayed for the substeps is specified in <code>webuijsf:wizardStep</code>
 tags.
 </p>
 <p>Substeps are initially hidden in the Steps pane of the
 wizard. The substeps are displayed in the Steps pane only when the application
 determines that the wizardSubstepBranch should be followed. Typically
 the user's response to the preceding step would be used to determine
 whether the branch should be followed. When the substeps are displayed
 in the Steps pane, they are indented under the associated major step,
 and numbered as subordinate to that step, such as 4.1, 4.2, 4.3 under a
 major step number 4. In the content pane, the wizardStep
 child components for both major steps and substeps are displayed. </p>
 <h3>Using the <code>webuijsf:wizardSubstepBranch</code> tag</h3>
 <p>The value of the <code>webuijsf:wizardSubstepBranch</code>
 tag's <code>taken</code> attribute determines whether the substep branch is followed. 
 When <code>taken</code> is set to true, the branch is followed. If <code>taken</code>
 is false, the branch is not followed. The value of the <code>taken</code>
 attribute could be set to an expression that uses the user's response
 in a preceding step, to determine whether the branch should be
 followed.
 </p>
 <p>The following pseudocode shows the relationship of the wizard
 components when using the <code>webuijsf:wizardSubstepBranch:</code>
 </p>
 <p><code>&lt;webuijsf:wizard&gt;<br>
 &nbsp;&nbsp;&nbsp; <span style="font-style: italic;">...
 (initial
 steps where no branching is needed)</span><br>
 <br>
 &nbsp; &nbsp; &lt;webuijsf:wizardStep&gt;<br>
 </code><code>&nbsp; &nbsp; &nbsp; &nbsp;
 &nbsp; &nbsp;&nbsp; <span style="font-style: italic;">The
 user's choice in this wizardStep
 should be used to </span></code><br>
 <code><span style="font-style: italic;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 determine whether the substep branch </span><span
  style="font-style: italic;">is followed.&nbsp; Note that
 the </span></code><br>
 <code><span style="font-style: italic;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 wizardSubstepBranch is NOT a child of the wizardStep component. </span></code>
 </p>
 <p><code></code></p>
 <code><span style="font-style: italic;">&nbsp;</span></code><code>&nbsp;&nbsp;
 &lt;/webuijsf:wizardStep&gt;</code><code> <br>
 &nbsp;&nbsp;&nbsp; <br>
 &nbsp;&nbsp;&nbsp; &lt;webuijsf:wizardSubstepBranch&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 <span style="font-style: italic;">The wizard framework
 uses the
 wizardSubstepBranch's <span style="font-weight: bold;">taken</span>
 attribute value </span><br style="font-style: italic;">
 <span style="font-style: italic;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 to decide whether to process the branch. </span><br>
 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code>&lt;webuijsf:wizardStep&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 <span style="font-style: italic;">These steps are the
 substeps that are
 rendered only when the wizardSubstepBranch</span><br
  style="font-style: italic;">
 <span style="font-style: italic;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 is taken. </span></code><code></code><code><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;/webuijsf:wizardStep&gt;<br>
 </code><code>&nbsp;</code><br>
 <code>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:wizardStep&gt;</code><code><span
  style="font-style: italic;">...</span></code><code>
 &lt;/webuijsf:wizardStep&gt;</code><code> <br>
 <br>
 </code><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 </code><code>&lt;webuijsf:wizardStep&gt;</code><code></code><code>...
 &lt;/webuijsf:wizardStep&gt;</code><code> <br>
 <br>
 </code><code></code><code></code><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 </code><code><br>
 <br>
 &nbsp;&nbsp;&nbsp; &lt;/webuijsf:wizardSubstepBranch&gt;<br>
 <br>
 </code><code>&nbsp;&nbsp;&nbsp;
 &lt;webuijsf:wizardStep&gt;<br>
 </code><code>&nbsp; &nbsp; &nbsp; &nbsp;
 &nbsp; &nbsp;&nbsp; <span style="font-style: italic;">This
 step represents the major step that
 is always followed after the<br>
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
 &nbsp;&nbsp; substep
 branch.&nbsp;&nbsp;</span></code><code><span
  style="font-style: italic;">
 </span></code>
 <p><code></code></p>
 <code><span style="font-style: italic;">&nbsp;</span></code><code>&nbsp;&nbsp;
 &lt;/webuijsf:wizardStep&gt;</code><code> </code><br>
 <code><br>
 &lt;/webuijsf:wizard&gt;</code>
 </p>
 <h3>Client-side JavaScript Functions</h3>
 <p>None.</p>
 <h3><a name="Examples"></a>Examples</h3>
 <h4>Example 1: Substep Branching Wizard</h4>
 <p>This <code>emailaccount-substep.jsp</code>
 example shows a complete JSP page that uses <code>webuijsf:wizardSubstepBranch.</code> The
 wizard uses the <a
  href="wizard.html#wizardEventListener">emailAccount
 backing bean</a> shown in the <code>webuijsf:wizard</code>
 tag documentation. </p>
 <h4><a name="emailaccount-substep.jsp"></a>emailaccount-substep.jsp</h4>
 <pre>&lt;jsp:root version="1.2"<br>
           xmlns:jsp="http://java.sun.com/JSP/Page"<br>
           xmlns:f="http://java.sun.com/jsf/core"<br>
           xmlns:h="http://java.sun.com/jsf/html"<br>
           xmlns:webuijsf="http://www.sun.com/webui/webuijsf"&gt;<br>
 &lt;jsp:directive.page contentType="text/html;charset=UTF-8"<br>
                     pageEncoding="UTF-8"/&gt;<br>
 &lt;f:view&gt;<br>
    &lt;webuijsf:page&gt;<br>
 	&lt;webuijsf:html&gt;<br>
 	    &lt;webuijsf:head title="Wizard Substeps Example" /&gt;<br>
 	    &lt;webuijsf:body <br>
 		onLoad="document.getElementById('form1:wizard1').wizOnLoad()"&gt;<br>
 		&lt;webuijsf:form id="form1"&gt;<br>
 <br>
     &lt;webuijsf:wizard id="wizard1" title="Create Account"&gt;<br>
 <br>
 	&lt;webuijsf:wizardStep id="step1"<br>
 	    summary="Choose Account Type"<br>
 	    title="New Account Setup"<br>
 	    detail="Select the type of account you would like to set up:"<br>
 	    help="In order to receive messages, you first need to set up a Mail or <br>
                   Newsgroup account. This Wizard will collect the information necessary <br>
                   to set up a Mail or Newsgroup account. If you do not know the information <br>
                   requested, please contact your System Administrator or Internet Service Provider."&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:radioButton id="email" name="account"<br>
 		label="Email account"<br>
 		selectedValue="EmailAccount"<br>
 		selected="#{emailAccount.acctType}"/&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 	    <br>
 	    &lt;webuijsf:radioButton id="movemail" name="account"<br>
 		label="Movemail"<br>
 		selectedValue="MoveMail"<br>
 		selected="#{emailAccount.acctType}"/&gt;<br>
 	    <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 	    <br>
 	    &lt;webuijsf:radioButton id="rss" name="account"<br>
 		label="RSS News and Blogs"<br>
 		selectedValue="RSSNewsAndBlogs"<br>
 		selected="#{emailAccount.acctType}"/&gt;<br>
 	    <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 	    <br>
 	    &lt;webuijsf:radioButton id="news" name="account"<br>
 		label="Newsgroup account"<br>
 		selectedValue="Newsgroup"<br>
 		selected="#{emailAccount.acctType}"/&gt;<br>
 	    <br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 <br>
 	&lt;webuijsf:wizardStep id="step2"<br>
 	    summary="Specify Email Identity"<br>
 	    title="Identity"<br>
 	    detail="Enter outgoing email name and email address."<br>
 	    help="Each account has an identity, which is the information that <br>
                   identifies you to others when they receive your messages. Enter the <br>
                   name you would like to appear in the From field of your outgoing messages, <br>
                   for example, John Smith. Then enter your email address. This is the address <br>
                   others will use to send email to you, for example john.smith@example.com."&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:label id="namelbl" text="Your Name"/&gt;<br>
 	    &lt;webuijsf:textField id="namefld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.userName}'/&gt;<br>
 	  <br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="eaddrlbl" text="Email Address"/&gt;<br>
 	    &lt;webuijsf:textField id="eaddrfld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.emailAddr}'/&gt;<br>
 	   <br>
 <br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 <br>
 	&lt;webuijsf:wizardStep id="step3"<br>
 	    summary="Specify Email Server"<br>
 	    title="Email Server Information"<br>
 	    detail="Select the type of incoming server and server name."<br>
 	    help="&amp;lt;p&amp;gt;Select the type of the incoming server you are using. Then enter the name <br>
                   of your incoming server, for example, mail.example.com.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Then enter the <br>
                   outgoing (SMTP) server name, for example, smtp.example.com&amp;lt;/p&amp;gt;"&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:radioButton id="pop" name="mailservertype"<br>
 		label="POP"<br>
 		selectedValue="Pop"<br>
 		selected="#{emailAccount.serverType}"/&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 	    <br>
 	    &lt;webuijsf:radioButton id="imap" name="mailservertype"<br>
 		label="IMAP"<br>
 		selectedValue="Imap"<br>
 		selected="#{emailAccount.serverType}"/&gt;<br>
 	    <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="inserverlbl" text="Incoming Server"/&gt;<br>
 	    &lt;webuijsf:textField id="inserverfld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.inServer}'/&gt;<br>
 	  <br>
 	    <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="outserverlbl" text="Outgoing Server"/&gt;<br>
 	    &lt;webuijsf:textField id="outserverfld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.outServer}'/&gt;<br>
 	<br>
 	    <br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 <br>
 	<br>
         &lt;webuijsf:wizardSubstepBranch id="POPsubstep"<br>
 	    taken='#{emailAccount.serverType == "Pop"}'&gt;<br>
 	<br>
         &lt;webuijsf:wizardStep id="step3_1"<br>
 		summary="Choose Inbox Account Type"<br>
 		title="Choose Inbox Account Type"<br>
 		detail="Choose Between Top Level Account or Local Folders Inbox Account"<br>
 		help="Uncheck this checkbox to store email for this account in its own directory. <br>
                       That will make this account appear as a top-level account. Otherwise, it <br>
                       will be part of the Local Folders Global Inbox account."&gt;<br>
 <br>
 		&lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 		&lt;webuijsf:checkbox id="inbox" name="inboxtype"<br>
 		    label="Use Global Inbox (store mail in Local Folders)"<br>
 		    selected="#{emailAccount.globalInbox}"/&gt;<br>
 <br>
 		&lt;/webuijsf:markup&gt;<br>
 <br>
 	    &lt;/webuijsf:wizardStep&gt;<br>
 <br>
 	&lt;/webuijsf:wizardSubstepBranch&gt;<br>
 <br>
 	&lt;webuijsf:wizardStep id="step4"<br>
 	    summary="Specify User Name"<br>
 	    title="User Names"<br>
 	    detail="Enter email provider assigned user name."<br>
 	    help="Enter your existing outgoing and incoming (SMTP) username, <br>
                   for example jsmith. You can modify outgoing server settings by <br>
                   choosing Account Settings from the Tools menu."&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:label id="innamelbl" text="Incoming User Name"/&gt;<br>
 	    &lt;webuijsf:textField id="innamefld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.inName}'/&gt;<br>
 	  <br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="outnamelbl" text="Outgoing User Name"/&gt;<br>
 	    &lt;webuijsf:textField id="outnamefld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.outName}'/&gt;<br>
 	 <br>
 <br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 <br>
 	&lt;webuijsf:wizardStep id="step5"<br>
 	    summary="Specify Account Name"<br>
 	    title="Account Name"<br>
 	    detail="The name of the account."<br>
 	    help="Enter the name by which you would like to refer to this account, <br>
                   for example Work Account, Home Account, or News Account, etc."&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:label id="acctnamelbl" text="Account Name"/&gt;<br>
 	    &lt;webuijsf:textField id="acctnamefld"<br>
 		required="true"<br>
 		validator='#{emailAccount.validate}'<br>
 		text='#{emailAccount.acctName}'/&gt;<br>
 	<br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 <br>
 	&lt;webuijsf:wizardStep id="step6"<br>
 	    finish="true"<br>
             summary="Verify Information"<br>
 	    title="Verify Account Information"<br>
 	    detail="Verify the information below is correct."<br>
 	    help="Click finish to create the account and previous if corrections are required."<br>
 	    onFinish="alert('WizardStep onFinish')"&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="p" extraAttributes="style='margin-left:2%'"&gt;<br>
 <br>
 	    &lt;webuijsf:label id="v_accttypelbl" text="Accout Type:"/&gt;<br>
 	    &lt;webuijsf:staticText id="v_accttypetxt"<br>
 		text='#{emailAccount.acctType}'/&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="v_usernamelbl" text="User Name:"/&gt;<br>
 	    &lt;webuijsf:staticText id="v_usernametxt"<br>
 		text='#{emailAccount.userName}'/&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="v_acctnamelbl" text="Account Name:"/&gt;<br>
 	    &lt;webuijsf:staticText id="v_acctnametxt"<br>
 		text='#{emailAccount.acctName}'/&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="v_eaddrlbl" text="Email Address:"/&gt;<br>
 	    &lt;webuijsf:staticText id="v_eaddrtxt"<br>
 		text='#{emailAccount.emailAddr}'/&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="v_innamelbl" text="Incoming User Name:"/&gt;<br>
 	    &lt;webuijsf:staticText id="v_innametxt"<br>
 		text='#{emailAccount.inName}'/&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="v_insrvnamelbl" text="Incoming Server Name:"/&gt;<br>
 	    &lt;webuijsf:staticText id="v_insrvnametxt"<br>
 		text='#{emailAccount.inServer}'/&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="v_insrvtypelbl" text="Incoming Server Type:"/&gt;<br>
 	    &lt;webuijsf:staticText id="v_insrvtypetxt"<br>
 		text='#{emailAccount.serverType}'/&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="v_outnamelbl" text="Outgoing User Name:"/&gt;<br>
 	    &lt;webuijsf:staticText id="v_outnametxt"<br>
 		text='#{emailAccount.outName}'/&gt;<br>
 <br>
 	    &lt;webuijsf:markup tag="br" singleton="true"/&gt;<br>
 <br>
 	    &lt;webuijsf:label id="v_outsrvnamelbl" text="Outgoing Server Name:"/&gt;<br>
 	    &lt;webuijsf:staticText id="v_outsrvnametxt"<br>
 		text='#{emailAccount.outServer}'/&gt;<br>
 <br>
 	    &lt;/webuijsf:markup&gt;<br>
 <br>
 	&lt;/webuijsf:wizardStep&gt;<br>
 <br>
     &lt;/webuijsf:wizard&gt;<br>
 <br>
 		&lt;/webuijsf:form&gt;<br>
 	    &lt;/webuijsf:body&gt;<br>
         &lt;/webuijsf:html&gt;<br>
     &lt;/webuijsf:page&gt;<br>
 &lt;/f:view&gt;<br>
 &lt;/jsp:root&gt;
 </pre>
]]></description>
    </tag>

</taglib>
