package ${tagPackage};

import jakarta.el.ELException;
import jakarta.el.MethodExpression;
import jakarta.el.ValueExpression;
import jakarta.faces.FacesException;
import jakarta.faces.component.FacesComponent;
import jakarta.faces.component.UIComponent;
import jakarta.faces.component.UIComponentBase;
import jakarta.faces.component.StateHolder;
import jakarta.faces.context.FacesContext;
import jakarta.faces.event.ActionEvent;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.context.FacesContext;

/**
 * This file was generated automatically on ${date}.
 */
@FacesComponent(${tagClass}.COMPONENT_TYPE)
public class ${tagClass} extends UIComponentBase {
    
    public static final String COMPONENT_TYPE = "${componentInfo.family}";
    
    /**
     * Returns the family.
     */
    @Override
    public String getFamily() {
        return ${tagClass}.COMPONENT_TYPE;
    }
    
    /**
     * Returns the requested renderer type.
     */
    public String getRendererType() {
#if ($componentInfo.tagRendererType)
        return "${componentInfo.tagRendererType}";
#else
        return null;
#end
    }
    
    /**
     * Release any allocated tag handler attributes.
     */
    public void release() {
#foreach($propertyInfo in $propertyInfos)
#if ($propertyInfo.attributeInfo && !($propertyInfo.name == "id" || $propertyInfo.name == "parent"))
        ${propertyInfo.instanceName} = null;
#end
#end
    }
    
    /**
     * Transfer tag attribute values to component properties.
     */
    protected void setProperties(UIComponent component) {
#foreach($propertyInfo in $propertyInfos)
#if ($propertyInfo.attributeInfo)
#if ($propertyInfo.type == "jakarta.el.MethodExpression")
        if (${propertyInfo.instanceName} != null) {
            try {
                component.getAttributes().put("${propertyInfo.instanceName}", ${propertyInfo.instanceName});
            } catch (ELException e) {
                throw new FacesException(e);
            }
        }
#elseif (!($propertyInfo.name == "id" || $propertyInfo.name == "parent"))
        if (${propertyInfo.instanceName} != null) {
            component.setValueExpression("${propertyInfo.attributeInfo.name}", ${propertyInfo.instanceName});
        }
#end
#end
#end ##foreach($propertyInfo in $propertyInfos)
    }
    

#foreach($propertyInfo in $propertyInfos)
#if ($propertyInfo.attributeInfo && !($propertyInfo.name == "id" || $propertyInfo.name == "parent"))
    /**
     * Set attribute corresponding to the "${propertyInfo.name}" property
     */
#if ($propertyInfo.type == 'jakarta.el.MethodExpression')
    private MethodExpression ${propertyInfo.instanceName} = null;
    public void ${propertyInfo.attributeInfo.writeMethodName} (MethodExpression ${propertyInfo.instanceName}) {
        this.${propertyInfo.instanceName} = ${propertyInfo.instanceName};
    }
#else
    private ValueExpression ${propertyInfo.instanceName} = null;
    public void ${propertyInfo.attributeInfo.writeMethodName} (ValueExpression ${propertyInfo.instanceName}) {
        this.${propertyInfo.instanceName} = ${propertyInfo.instanceName};
    }
#end
#end ##if ($propertyInfo.attributeInfo)
#end ##foreach($propertyInfo in $propertyInfos)

}
